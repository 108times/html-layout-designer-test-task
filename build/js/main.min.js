"use strict";function _createForOfIteratorHelper(t,n){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=_unsupportedIterableToArray(t))||n&&t&&"number"==typeof t.length){r&&(t=r);var e=0,o=function(){};return{s:o,n:function(){return e>=t.length?{done:!0}:{done:!1,value:t[e++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,u=!0,c=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return u=t.done,t},e:function(t){c=!0,i=t},f:function(){try{u||null==r.return||r.return()}finally{if(c)throw i}}}}function ownKeys(t,n){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);n&&(e=e.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),r.push.apply(r,e)}return r}function _objectSpread(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?ownKeys(Object(r),!0).forEach((function(n){_defineProperty(t,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ownKeys(Object(r)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(r,n))}))}return t}function _defineProperty(t,n,r){return n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_unsupportedIterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(t,n){if(t){if("string"==typeof t)return _arrayLikeToArray(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(t,n):void 0}}function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}function _arrayLikeToArray(t,n){(null==n||n>t.length)&&(n=t.length);for(var r=0,e=new Array(n);r<n;r++)e[r]=t[r];return e}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}!function t(n,r,e){function o(u,c){if(!r[u]){if(!n[u]){var a="function"==typeof require&&require;if(!c&&a)return a(u,!0);if(i)return i(u,!0);var f=new Error("Cannot find module '"+u+"'");throw f.code="MODULE_NOT_FOUND",f}var s=r[u]={exports:{}};n[u][0].call(s.exports,(function(t){return o(n[u][1][t]||t)}),s,s.exports,t,n,r,e)}return r[u].exports}for(var i="function"==typeof require&&require,u=0;u<e.length;u++)o(e[u]);return o}({1:[function(t,n,r){(function(n){if(t(327),t(328),t(2),n._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");function r(t,n,r){t[n]||Object.defineProperty(t,n,{writable:!0,configurable:!0,value:r})}n._babelPolyfill=!0,r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach((function(t){[][t]&&r(Array,t,Function.call.bind([][t]))}))}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2,327:327,328:328}],2:[function(t,n,r){t(130),n.exports=t(23).RegExp.escape},{130:130,23:23}],3:[function(t,n,r){n.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},{}],4:[function(t,n,r){var e=t(18);n.exports=function(t,n){if("number"!=typeof t&&"Number"!=e(t))throw TypeError(n);return+t}},{18:18}],5:[function(t,n,r){var e=t(128)("unscopables"),o=Array.prototype;null==o[e]&&t(42)(o,e,{}),n.exports=function(t){o[e][t]=!0}},{128:128,42:42}],6:[function(t,n,r){n.exports=function(t,n,r,e){if(!(t instanceof n)||void 0!==e&&e in t)throw TypeError(r+": incorrect invocation!");return t}},{}],7:[function(t,n,r){var e=t(51);n.exports=function(t){if(!e(t))throw TypeError(t+" is not an object!");return t}},{51:51}],8:[function(t,n,r){var e=t(119),o=t(114),i=t(118);n.exports=[].copyWithin||function(t,n){var r=e(this),u=i(r.length),c=o(t,u),a=o(n,u),f=arguments.length>2?arguments[2]:void 0,s=Math.min((void 0===f?u:o(f,u))-a,u-c),l=1;for(a<c&&c<a+s&&(l=-1,a+=s-1,c+=s-1);s-- >0;)a in r?r[c]=r[a]:delete r[c],c+=l,a+=l;return r}},{114:114,118:118,119:119}],9:[function(t,n,r){var e=t(119),o=t(114),i=t(118);n.exports=function(t){for(var n=e(this),r=i(n.length),u=arguments.length,c=o(u>1?arguments[1]:void 0,r),a=u>2?arguments[2]:void 0,f=void 0===a?r:o(a,r);f>c;)n[c++]=t;return n}},{114:114,118:118,119:119}],10:[function(t,n,r){var e=t(39);n.exports=function(t,n){var r=[];return e(t,!1,r.push,r,n),r}},{39:39}],11:[function(t,n,r){var e=t(117),o=t(118),i=t(114);n.exports=function(t){return function(n,r,u){var c,a=e(n),f=o(a.length),s=i(u,f);if(t&&r!=r){for(;f>s;)if((c=a[s++])!=c)return!0}else for(;f>s;s++)if((t||s in a)&&a[s]===r)return t||s||0;return!t&&-1}}},{114:114,117:117,118:118}],12:[function(t,n,r){var e=t(25),o=t(47),i=t(119),u=t(118),c=t(15);n.exports=function(t,n){var r=1==t,a=2==t,f=3==t,s=4==t,l=6==t,h=5==t||l,p=n||c;return function(n,c,v){for(var d,y,g=i(n),m=o(g),b=e(c,v,3),_=u(m.length),S=0,x=r?p(n,_):a?p(n,0):void 0;_>S;S++)if((h||S in m)&&(y=b(d=m[S],S,g),t))if(r)x[S]=y;else if(y)switch(t){case 3:return!0;case 5:return d;case 6:return S;case 2:x.push(d)}else if(s)return!1;return l?-1:f||s?s:x}}},{118:118,119:119,15:15,25:25,47:47}],13:[function(t,n,r){var e=t(3),o=t(119),i=t(47),u=t(118);n.exports=function(t,n,r,c,a){e(n);var f=o(t),s=i(f),l=u(f.length),h=a?l-1:0,p=a?-1:1;if(r<2)for(;;){if(h in s){c=s[h],h+=p;break}if(h+=p,a?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;a?h>=0:l>h;h+=p)h in s&&(c=n(c,s[h],h,f));return c}},{118:118,119:119,3:3,47:47}],14:[function(t,n,r){var e=t(51),o=t(49),i=t(128)("species");n.exports=function(t){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)||(n=void 0),e(n)&&null===(n=n[i])&&(n=void 0)),void 0===n?Array:n}},{128:128,49:49,51:51}],15:[function(t,n,r){var e=t(14);n.exports=function(t,n){return new(e(t))(n)}},{14:14}],16:[function(t,n,r){var e=t(3),o=t(51),i=t(46),u=[].slice,c={},a=function(t,n,r){if(!(n in c)){for(var e=[],o=0;o<n;o++)e[o]="a["+o+"]";c[n]=Function("F,a","return new F("+e.join(",")+")")}return c[n](t,r)};n.exports=Function.bind||function(t){var n=e(this),r=u.call(arguments,1),c=function e(){var o=r.concat(u.call(arguments));return this instanceof e?a(n,o.length,o):i(n,o,t)};return o(n.prototype)&&(c.prototype=n.prototype),c}},{3:3,46:46,51:51}],17:[function(t,n,r){var e=t(18),o=t(128)("toStringTag"),i="Arguments"==e(function(){return arguments}());n.exports=function(t){var n,r,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),o))?r:i?e(n):"Object"==(u=e(n))&&"function"==typeof n.callee?"Arguments":u}},{128:128,18:18}],18:[function(t,n,r){var e={}.toString;n.exports=function(t){return e.call(t).slice(8,-1)}},{}],19:[function(t,n,r){var e=t(72).f,o=t(71),i=t(93),u=t(25),c=t(6),a=t(39),f=t(55),s=t(57),l=t(100),h=t(29),p=t(66).fastKey,v=t(125),d=h?"_s":"size",y=function(t,n){var r,e=p(n);if("F"!==e)return t._i[e];for(r=t._f;r;r=r.n)if(r.k==n)return r};n.exports={getConstructor:function(t,n,r,f){var s=t((function(t,e){c(t,s,n,"_i"),t._t=n,t._i=o(null),t._f=void 0,t._l=void 0,t[d]=0,null!=e&&a(e,r,t[f],t)}));return i(s.prototype,{clear:function(){for(var t=v(this,n),r=t._i,e=t._f;e;e=e.n)e.r=!0,e.p&&(e.p=e.p.n=void 0),delete r[e.i];t._f=t._l=void 0,t[d]=0},delete:function(t){var r=v(this,n),e=y(r,t);if(e){var o=e.n,i=e.p;delete r._i[e.i],e.r=!0,i&&(i.n=o),o&&(o.p=i),r._f==e&&(r._f=o),r._l==e&&(r._l=i),r[d]--}return!!e},forEach:function(t){v(this,n);for(var r,e=u(t,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(e(r.v,r.k,this);r&&r.r;)r=r.p},has:function(t){return!!y(v(this,n),t)}}),h&&e(s.prototype,"size",{get:function(){return v(this,n)[d]}}),s},def:function(t,n,r){var e,o,i=y(t,n);return i?i.v=r:(t._l=i={i:o=p(n,!0),k:n,v:r,p:e=t._l,n:void 0,r:!1},t._f||(t._f=i),e&&(e.n=i),t[d]++,"F"!==o&&(t._i[o]=i)),t},getEntry:y,setStrong:function(t,n,r){f(t,n,(function(t,r){this._t=v(t,n),this._k=r,this._l=void 0}),(function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?s(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,s(1))}),r?"entries":"values",!r,!0),l(n)}}},{100:100,125:125,25:25,29:29,39:39,55:55,57:57,6:6,66:66,71:71,72:72,93:93}],20:[function(t,n,r){var e=t(17),o=t(10);n.exports=function(t){return function(){if(e(this)!=t)throw TypeError(t+"#toJSON isn't generic");return o(this)}}},{10:10,17:17}],21:[function(t,n,r){var e=t(93),o=t(66).getWeak,i=t(7),u=t(51),c=t(6),a=t(39),f=t(12),s=t(41),l=t(125),h=f(5),p=f(6),v=0,d=function(t){return t._l||(t._l=new y)},y=function(){this.a=[]},g=function(t,n){return h(t.a,(function(t){return t[0]===n}))};y.prototype={get:function(t){var n=g(this,t);if(n)return n[1]},has:function(t){return!!g(this,t)},set:function(t,n){var r=g(this,t);r?r[1]=n:this.a.push([t,n])},delete:function(t){var n=p(this.a,(function(n){return n[0]===t}));return~n&&this.a.splice(n,1),!!~n}},n.exports={getConstructor:function(t,n,r,i){var f=t((function(t,e){c(t,f,n,"_i"),t._t=n,t._i=v++,t._l=void 0,null!=e&&a(e,r,t[i],t)}));return e(f.prototype,{delete:function(t){if(!u(t))return!1;var r=o(t);return!0===r?d(l(this,n)).delete(t):r&&s(r,this._i)&&delete r[this._i]},has:function(t){if(!u(t))return!1;var r=o(t);return!0===r?d(l(this,n)).has(t):r&&s(r,this._i)}}),f},def:function(t,n,r){var e=o(i(n),!0);return!0===e?d(t).set(n,r):e[t._i]=r,t},ufstore:d}},{12:12,125:125,39:39,41:41,51:51,6:6,66:66,7:7,93:93}],22:[function(t,n,r){var e=t(40),o=t(33),i=t(94),u=t(93),c=t(66),a=t(39),f=t(6),s=t(51),l=t(35),h=t(56),p=t(101),v=t(45);n.exports=function(t,n,r,d,y,g){var m=e[t],b=m,_=y?"set":"add",S=b&&b.prototype,x={},w=function(t){var n=S[t];i(S,t,"delete"==t||"has"==t?function(t){return!(g&&!s(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!s(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,r){return n.call(this,0===t?0:t,r),this})};if("function"==typeof b&&(g||S.forEach&&!l((function(){(new b).entries().next()})))){var E=new b,O=E[_](g?{}:-0,1)!=E,A=l((function(){E.has(1)})),M=h((function(t){new b(t)})),L=!g&&l((function(){for(var t=new b,n=5;n--;)t[_](n,n);return!t.has(-0)}));M||((b=n((function(n,r){f(n,b,t);var e=v(new m,n,b);return null!=r&&a(r,y,e[_],e),e}))).prototype=S,S.constructor=b),(A||L)&&(w("delete"),w("has"),y&&w("get")),(L||O)&&w(_),g&&S.clear&&delete S.clear}else b=d.getConstructor(n,t,y,_),u(b.prototype,r),c.NEED=!0;return p(b,t),x[t]=b,o(o.G+o.W+o.F*(b!=m),x),g||d.setStrong(b,t,y),b}},{101:101,33:33,35:35,39:39,40:40,45:45,51:51,56:56,6:6,66:66,93:93,94:94}],23:[function(t,n,r){var e=n.exports={version:"2.5.0"};"number"==typeof __e&&(__e=e)},{}],24:[function(t,n,r){var e=t(72),o=t(92);n.exports=function(t,n,r){n in t?e.f(t,n,o(0,r)):t[n]=r}},{72:72,92:92}],25:[function(t,n,r){var e=t(3);n.exports=function(t,n,r){if(e(t),void 0===n)return t;switch(r){case 1:return function(r){return t.call(n,r)};case 2:return function(r,e){return t.call(n,r,e)};case 3:return function(r,e,o){return t.call(n,r,e,o)}}return function(){return t.apply(n,arguments)}}},{3:3}],26:[function(t,n,r){var e=t(35),o=Date.prototype.getTime,i=Date.prototype.toISOString,u=function(t){return t>9?t:"0"+t};n.exports=e((function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-50000000000001))}))||!e((function(){i.call(new Date(NaN))}))?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),r=t.getUTCMilliseconds(),e=n<0?"-":n>9999?"+":"";return e+("00000"+Math.abs(n)).slice(e?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(r>99?r:"0"+u(r))+"Z"}:i},{35:35}],27:[function(t,n,r){var e=t(7),o=t(120);n.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return o(e(this),"number"!=t)}},{120:120,7:7}],28:[function(t,n,r){n.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},{}],29:[function(t,n,r){n.exports=!t(35)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},{35:35}],30:[function(t,n,r){var e=t(51),o=t(40).document,i=e(o)&&e(o.createElement);n.exports=function(t){return i?o.createElement(t):{}}},{40:40,51:51}],31:[function(t,n,r){n.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],32:[function(t,n,r){var e=t(81),o=t(78),i=t(82);n.exports=function(t){var n=e(t),r=o.f;if(r)for(var u,c=r(t),a=i.f,f=0;c.length>f;)a.call(t,u=c[f++])&&n.push(u);return n}},{78:78,81:81,82:82}],33:[function(t,n,r){var e=t(40),o=t(23),i=t(42),u=t(94),c=t(25),a=function t(n,r,a){var f,s,l,h,p=n&t.F,v=n&t.G,d=n&t.P,y=n&t.B,g=v?e:n&t.S?e[r]||(e[r]={}):(e[r]||{}).prototype,m=v?o:o[r]||(o[r]={}),b=m.prototype||(m.prototype={});for(f in v&&(a=r),a)l=((s=!p&&g&&void 0!==g[f])?g:a)[f],h=y&&s?c(l,e):d&&"function"==typeof l?c(Function.call,l):l,g&&u(g,f,l,n&t.U),m[f]!=l&&i(m,f,h),d&&b[f]!=l&&(b[f]=l)};e.core=o,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,n.exports=a},{23:23,25:25,40:40,42:42,94:94}],34:[function(t,n,r){var e=t(128)("match");n.exports=function(t){var n=/./;try{"/./"[t](n)}catch(r){try{return n[e]=!1,!"/./"[t](n)}catch(t){}}return!0}},{128:128}],35:[function(t,n,r){n.exports=function(t){try{return!!t()}catch(t){return!0}}},{}],36:[function(t,n,r){var e=t(42),o=t(94),i=t(35),u=t(28),c=t(128);n.exports=function(t,n,r){var a=c(t),f=r(u,a,""[t]),s=f[0],l=f[1];i((function(){var n={};return n[a]=function(){return 7},7!=""[t](n)}))&&(o(String.prototype,t,s),e(RegExp.prototype,a,2==n?function(t,n){return l.call(t,this,n)}:function(t){return l.call(t,this)}))}},{128:128,28:28,35:35,42:42,94:94}],37:[function(t,n,r){var e=t(7);n.exports=function(){var t=e(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},{7:7}],38:[function(t,n,r){var e=t(49),o=t(51),i=t(118),u=t(25),c=t(128)("isConcatSpreadable");n.exports=function t(n,r,a,f,s,l,h,p){for(var v,d,y=s,g=0,m=!!h&&u(h,p,3);g<f;){if(g in a){if(v=m?m(a[g],g,r):a[g],d=!1,o(v)&&(d=void 0!==(d=v[c])?!!d:e(v)),d&&l>0)y=t(n,r,v,i(v.length),y,l-1)-1;else{if(y>=9007199254740991)throw TypeError();n[y]=v}y++}g++}return y}},{118:118,128:128,25:25,49:49,51:51}],39:[function(t,n,r){var e=t(25),o=t(53),i=t(48),u=t(7),c=t(118),a=t(129),f={},s={};(r=n.exports=function(t,n,r,l,h){var p,v,d,y,g=h?function(){return t}:a(t),m=e(r,l,n?2:1),b=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(i(g)){for(p=c(t.length);p>b;b++)if((y=n?m(u(v=t[b])[0],v[1]):m(t[b]))===f||y===s)return y}else for(d=g.call(t);!(v=d.next()).done;)if((y=o(d,m,v.value,n))===f||y===s)return y}).BREAK=f,r.RETURN=s},{118:118,129:129,25:25,48:48,53:53,7:7}],40:[function(t,n,r){var e=n.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},{}],41:[function(t,n,r){var e={}.hasOwnProperty;n.exports=function(t,n){return e.call(t,n)}},{}],42:[function(t,n,r){var e=t(72),o=t(92);n.exports=t(29)?function(t,n,r){return e.f(t,n,o(1,r))}:function(t,n,r){return t[n]=r,t}},{29:29,72:72,92:92}],43:[function(t,n,r){var e=t(40).document;n.exports=e&&e.documentElement},{40:40}],44:[function(t,n,r){n.exports=!t(29)&&!t(35)((function(){return 7!=Object.defineProperty(t(30)("div"),"a",{get:function(){return 7}}).a}))},{29:29,30:30,35:35}],45:[function(t,n,r){var e=t(51),o=t(99).set;n.exports=function(t,n,r){var i,u=n.constructor;return u!==r&&"function"==typeof u&&(i=u.prototype)!==r.prototype&&e(i)&&o&&o(t,i),t}},{51:51,99:99}],46:[function(t,n,r){n.exports=function(t,n,r){var e=void 0===r;switch(n.length){case 0:return e?t():t.call(r);case 1:return e?t(n[0]):t.call(r,n[0]);case 2:return e?t(n[0],n[1]):t.call(r,n[0],n[1]);case 3:return e?t(n[0],n[1],n[2]):t.call(r,n[0],n[1],n[2]);case 4:return e?t(n[0],n[1],n[2],n[3]):t.call(r,n[0],n[1],n[2],n[3])}return t.apply(r,n)}},{}],47:[function(t,n,r){var e=t(18);n.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==e(t)?t.split(""):Object(t)}},{18:18}],48:[function(t,n,r){var e=t(58),o=t(128)("iterator"),i=Array.prototype;n.exports=function(t){return void 0!==t&&(e.Array===t||i[o]===t)}},{128:128,58:58}],49:[function(t,n,r){var e=t(18);n.exports=Array.isArray||function(t){return"Array"==e(t)}},{18:18}],50:[function(t,n,r){var e=t(51),o=Math.floor;n.exports=function(t){return!e(t)&&isFinite(t)&&o(t)===t}},{51:51}],51:[function(t,n,r){n.exports=function(t){return"object"==_typeof(t)?null!==t:"function"==typeof t}},{}],52:[function(t,n,r){var e=t(51),o=t(18),i=t(128)("match");n.exports=function(t){var n;return e(t)&&(void 0!==(n=t[i])?!!n:"RegExp"==o(t))}},{128:128,18:18,51:51}],53:[function(t,n,r){var e=t(7);n.exports=function(t,n,r,o){try{return o?n(e(r)[0],r[1]):n(r)}catch(n){var i=t.return;throw void 0!==i&&e(i.call(t)),n}}},{7:7}],54:[function(t,n,r){var e=t(71),o=t(92),i=t(101),u={};t(42)(u,t(128)("iterator"),(function(){return this})),n.exports=function(t,n,r){t.prototype=e(u,{next:o(1,r)}),i(t,n+" Iterator")}},{101:101,128:128,42:42,71:71,92:92}],55:[function(t,n,r){var e=t(60),o=t(33),i=t(94),u=t(42),c=t(41),a=t(58),f=t(54),s=t(101),l=t(79),h=t(128)("iterator"),p=!([].keys&&"next"in[].keys()),v=function(){return this};n.exports=function(t,n,r,d,y,g,m){f(r,n,d);var b,_,S,x=function(t){if(!p&&t in A)return A[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},w=n+" Iterator",E="values"==y,O=!1,A=t.prototype,M=A[h]||A["@@iterator"]||y&&A[y],L=M||x(y),P=y?E?x("entries"):L:void 0,F="Array"==n&&A.entries||M;if(F&&(S=l(F.call(new t)))!==Object.prototype&&S.next&&(s(S,w,!0),e||c(S,h)||u(S,h,v)),E&&M&&"values"!==M.name&&(O=!0,L=function(){return M.call(this)}),e&&!m||!p&&!O&&A[h]||u(A,h,L),a[n]=L,a[w]=v,y)if(b={values:E?L:x("values"),keys:g?L:x("keys"),entries:P},m)for(_ in b)_ in A||i(A,_,b[_]);else o(o.P+o.F*(p||O),n,b);return b}},{101:101,128:128,33:33,41:41,42:42,54:54,58:58,60:60,79:79,94:94}],56:[function(t,n,r){var e=t(128)("iterator"),o=!1;try{var i=[7][e]();i.return=function(){o=!0},Array.from(i,(function(){throw 2}))}catch(t){}n.exports=function(t,n){if(!n&&!o)return!1;var r=!1;try{var i=[7],u=i[e]();u.next=function(){return{done:r=!0}},i[e]=function(){return u},t(i)}catch(t){}return r}},{128:128}],57:[function(t,n,r){n.exports=function(t,n){return{value:n,done:!!t}}},{}],58:[function(t,n,r){n.exports={}},{}],59:[function(t,n,r){var e=t(81),o=t(117);n.exports=function(t,n){for(var r,i=o(t),u=e(i),c=u.length,a=0;c>a;)if(i[r=u[a++]]===n)return r}},{117:117,81:81}],60:[function(t,n,r){n.exports=!1},{}],61:[function(t,n,r){var e=Math.expm1;n.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},{}],62:[function(t,n,r){var e=t(65),o=Math.pow,i=o(2,-52),u=o(2,-23),c=o(2,127)*(2-u),a=o(2,-126);n.exports=Math.fround||function(t){var n,r,o=Math.abs(t),f=e(t);return o<a?f*(o/a/u+1/i-1/i)*a*u:(r=(n=(1+u/i)*o)-(n-o))>c||r!=r?f*(1/0):f*r}},{65:65}],63:[function(t,n,r){n.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},{}],64:[function(t,n,r){n.exports=Math.scale||function(t,n,r,e,o){return 0===arguments.length||t!=t||n!=n||r!=r||e!=e||o!=o?NaN:t===1/0||t===-1/0?t:(t-n)*(o-e)/(r-n)+e}},{}],65:[function(t,n,r){n.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},{}],66:[function(t,n,r){var e=t(124)("meta"),o=t(51),i=t(41),u=t(72).f,c=0,a=Object.isExtensible||function(){return!0},f=!t(35)((function(){return a(Object.preventExtensions({}))})),s=function(t){u(t,e,{value:{i:"O"+ ++c,w:{}}})},l=n.exports={KEY:e,NEED:!1,fastKey:function(t,n){if(!o(t))return"symbol"==_typeof(t)?t:("string"==typeof t?"S":"P")+t;if(!i(t,e)){if(!a(t))return"F";if(!n)return"E";s(t)}return t[e].i},getWeak:function(t,n){if(!i(t,e)){if(!a(t))return!0;if(!n)return!1;s(t)}return t[e].w},onFreeze:function(t){return f&&l.NEED&&a(t)&&!i(t,e)&&s(t),t}}},{124:124,35:35,41:41,51:51,72:72}],67:[function(t,n,r){var e=t(160),o=t(33),i=t(103)("metadata"),u=i.store||(i.store=new(t(266))),c=function(t,n,r){var o=u.get(t);if(!o){if(!r)return;u.set(t,o=new e)}var i=o.get(n);if(!i){if(!r)return;o.set(n,i=new e)}return i};n.exports={store:u,map:c,has:function(t,n,r){var e=c(n,r,!1);return void 0!==e&&e.has(t)},get:function(t,n,r){var e=c(n,r,!1);return void 0===e?void 0:e.get(t)},set:function(t,n,r,e){c(r,e,!0).set(t,n)},keys:function(t,n){var r=c(t,n,!1),e=[];return r&&r.forEach((function(t,n){e.push(n)})),e},key:function(t){return void 0===t||"symbol"==_typeof(t)?t:String(t)},exp:function(t){o(o.S,"Reflect",t)}}},{103:103,160:160,266:266,33:33}],68:[function(t,n,r){var e=t(40),o=t(113).set,i=e.MutationObserver||e.WebKitMutationObserver,u=e.process,c=e.Promise,a="process"==t(18)(u);n.exports=function(){var t,n,r,f=function(){var e,o;for(a&&(e=u.domain)&&e.exit();t;){o=t.fn,t=t.next;try{o()}catch(e){throw t?r():n=void 0,e}}n=void 0,e&&e.enter()};if(a)r=function(){u.nextTick(f)};else if(i){var s=!0,l=document.createTextNode("");new i(f).observe(l,{characterData:!0}),r=function(){l.data=s=!s}}else if(c&&c.resolve){var h=c.resolve();r=function(){h.then(f)}}else r=function(){o.call(e,f)};return function(e){var o={fn:e,next:void 0};n&&(n.next=o),t||(t=o,r()),n=o}}},{113:113,18:18,40:40}],69:[function(t,n,r){var e=t(3);function o(t){var n,r;this.promise=new t((function(t,e){if(void 0!==n||void 0!==r)throw TypeError("Bad Promise constructor");n=t,r=e})),this.resolve=e(n),this.reject=e(r)}n.exports.f=function(t){return new o(t)}},{3:3}],70:[function(t,n,r){var e=t(81),o=t(78),i=t(82),u=t(119),c=t(47),a=Object.assign;n.exports=!a||t(35)((function(){var t={},n={},r=Symbol(),e="abcdefghijklmnopqrst";return t[r]=7,e.split("").forEach((function(t){n[t]=t})),7!=a({},t)[r]||Object.keys(a({},n)).join("")!=e}))?function(t,n){for(var r=u(t),a=arguments.length,f=1,s=o.f,l=i.f;a>f;)for(var h,p=c(arguments[f++]),v=s?e(p).concat(s(p)):e(p),d=v.length,y=0;d>y;)l.call(p,h=v[y++])&&(r[h]=p[h]);return r}:a},{119:119,35:35,47:47,78:78,81:81,82:82}],71:[function(t,n,r){var e=t(7),o=t(73),i=t(31),u=t(102)("IE_PROTO"),c=function(){},a=function(){var n,r=t(30)("iframe"),e=i.length;for(r.style.display="none",t(43).appendChild(r),r.src="javascript:",(n=r.contentWindow.document).open(),n.write("<script>document.F=Object<\/script>"),n.close(),a=n.F;e--;)delete a.prototype[i[e]];return a()};n.exports=Object.create||function(t,n){var r;return null!==t?(c.prototype=e(t),r=new c,c.prototype=null,r[u]=t):r=a(),void 0===n?r:o(r,n)}},{102:102,30:30,31:31,43:43,7:7,73:73}],72:[function(t,n,r){var e=t(7),o=t(44),i=t(120),u=Object.defineProperty;r.f=t(29)?Object.defineProperty:function(t,n,r){if(e(t),n=i(n,!0),e(r),o)try{return u(t,n,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[n]=r.value),t}},{120:120,29:29,44:44,7:7}],73:[function(t,n,r){var e=t(72),o=t(7),i=t(81);n.exports=t(29)?Object.defineProperties:function(t,n){o(t);for(var r,u=i(n),c=u.length,a=0;c>a;)e.f(t,r=u[a++],n[r]);return t}},{29:29,7:7,72:72,81:81}],74:[function(t,n,r){n.exports=t(60)||!t(35)((function(){var n=Math.random();__defineSetter__.call(null,n,(function(){})),delete t(40)[n]}))},{35:35,40:40,60:60}],75:[function(t,n,r){var e=t(82),o=t(92),i=t(117),u=t(120),c=t(41),a=t(44),f=Object.getOwnPropertyDescriptor;r.f=t(29)?f:function(t,n){if(t=i(t),n=u(n,!0),a)try{return f(t,n)}catch(t){}if(c(t,n))return o(!e.f.call(t,n),t[n])}},{117:117,120:120,29:29,41:41,44:44,82:82,92:92}],76:[function(t,n,r){var e=t(117),o=t(77).f,i={}.toString,u="object"==("undefined"==typeof window?"undefined":_typeof(window))&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];n.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(e(t))}},{117:117,77:77}],77:[function(t,n,r){var e=t(80),o=t(31).concat("length","prototype");r.f=Object.getOwnPropertyNames||function(t){return e(t,o)}},{31:31,80:80}],78:[function(t,n,r){r.f=Object.getOwnPropertySymbols},{}],79:[function(t,n,r){var e=t(41),o=t(119),i=t(102)("IE_PROTO"),u=Object.prototype;n.exports=Object.getPrototypeOf||function(t){return t=o(t),e(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},{102:102,119:119,41:41}],80:[function(t,n,r){var e=t(41),o=t(117),i=t(11)(!1),u=t(102)("IE_PROTO");n.exports=function(t,n){var r,c=o(t),a=0,f=[];for(r in c)r!=u&&e(c,r)&&f.push(r);for(;n.length>a;)e(c,r=n[a++])&&(~i(f,r)||f.push(r));return f}},{102:102,11:11,117:117,41:41}],81:[function(t,n,r){var e=t(80),o=t(31);n.exports=Object.keys||function(t){return e(t,o)}},{31:31,80:80}],82:[function(t,n,r){r.f={}.propertyIsEnumerable},{}],83:[function(t,n,r){var e=t(33),o=t(23),i=t(35);n.exports=function(t,n){var r=(o.Object||{})[t]||Object[t],u={};u[t]=n(r),e(e.S+e.F*i((function(){r(1)})),"Object",u)}},{23:23,33:33,35:35}],84:[function(t,n,r){var e=t(81),o=t(117),i=t(82).f;n.exports=function(t){return function(n){for(var r,u=o(n),c=e(u),a=c.length,f=0,s=[];a>f;)i.call(u,r=c[f++])&&s.push(t?[r,u[r]]:u[r]);return s}}},{117:117,81:81,82:82}],85:[function(t,n,r){var e=t(77),o=t(78),i=t(7),u=t(40).Reflect;n.exports=u&&u.ownKeys||function(t){var n=e.f(i(t)),r=o.f;return r?n.concat(r(t)):n}},{40:40,7:7,77:77,78:78}],86:[function(t,n,r){var e=t(40).parseFloat,o=t(111).trim;n.exports=1/e(t(112)+"-0")!=-1/0?function(t){var n=o(String(t),3),r=e(n);return 0===r&&"-"==n.charAt(0)?-0:r}:e},{111:111,112:112,40:40}],87:[function(t,n,r){var e=t(40).parseInt,o=t(111).trim,i=t(112),u=/^[-+]?0[xX]/;n.exports=8!==e(i+"08")||22!==e(i+"0x16")?function(t,n){var r=o(String(t),3);return e(r,n>>>0||(u.test(r)?16:10))}:e},{111:111,112:112,40:40}],88:[function(t,n,r){var e=t(89),o=t(46),i=t(3);n.exports=function(){for(var t=i(this),n=arguments.length,r=Array(n),u=0,c=e._,a=!1;n>u;)(r[u]=arguments[u++])===c&&(a=!0);return function(){var e,i=this,u=arguments.length,f=0,s=0;if(!a&&!u)return o(t,r,i);if(e=r.slice(),a)for(;n>f;f++)e[f]===c&&(e[f]=arguments[s++]);for(;u>s;)e.push(arguments[s++]);return o(t,e,i)}}},{3:3,46:46,89:89}],89:[function(t,n,r){n.exports=t(40)},{40:40}],90:[function(t,n,r){n.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},{}],91:[function(t,n,r){var e=t(69);n.exports=function(t,n){var r=e.f(t);return(0,r.resolve)(n),r.promise}},{69:69}],92:[function(t,n,r){n.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},{}],93:[function(t,n,r){var e=t(94);n.exports=function(t,n,r){for(var o in n)e(t,o,n[o],r);return t}},{94:94}],94:[function(t,n,r){var e=t(40),o=t(42),i=t(41),u=t(124)("src"),c=Function.toString,a=(""+c).split("toString");t(23).inspectSource=function(t){return c.call(t)},(n.exports=function(t,n,r,c){var f="function"==typeof r;f&&(i(r,"name")||o(r,"name",n)),t[n]!==r&&(f&&(i(r,u)||o(r,u,t[n]?""+t[n]:a.join(String(n)))),t===e?t[n]=r:c?t[n]?t[n]=r:o(t,n,r):(delete t[n],o(t,n,r)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[u]||c.call(this)}))},{124:124,23:23,40:40,41:41,42:42}],95:[function(t,n,r){n.exports=function(t,n){var r=n===Object(n)?function(t){return n[t]}:n;return function(n){return String(n).replace(t,r)}}},{}],96:[function(t,n,r){n.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},{}],97:[function(t,n,r){var e=t(33),o=t(3),i=t(25),u=t(39);n.exports=function(t){e(e.S,t,{from:function(t){var n,r,e,c,a=arguments[1];return o(this),(n=void 0!==a)&&o(a),null==t?new this:(r=[],n?(e=0,c=i(a,arguments[2],2),u(t,!1,(function(t){r.push(c(t,e++))}))):u(t,!1,r.push,r),new this(r))}})}},{25:25,3:3,33:33,39:39}],98:[function(t,n,r){var e=t(33);n.exports=function(t){e(e.S,t,{of:function(){for(var t=arguments.length,n=Array(t);t--;)n[t]=arguments[t];return new this(n)}})}},{33:33}],99:[function(t,n,r){var e=t(51),o=t(7),i=function(t,n){if(o(t),!e(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};n.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(n,r,e){try{(e=t(25)(Function.call,t(75).f(Object.prototype,"__proto__").set,2))(n,[]),r=!(n instanceof Array)}catch(t){r=!0}return function(t,n){return i(t,n),r?t.__proto__=n:e(t,n),t}}({},!1):void 0),check:i}},{25:25,51:51,7:7,75:75}],100:[function(t,n,r){var e=t(40),o=t(72),i=t(29),u=t(128)("species");n.exports=function(t){var n=e[t];i&&n&&!n[u]&&o.f(n,u,{configurable:!0,get:function(){return this}})}},{128:128,29:29,40:40,72:72}],101:[function(t,n,r){var e=t(72).f,o=t(41),i=t(128)("toStringTag");n.exports=function(t,n,r){t&&!o(t=r?t:t.prototype,i)&&e(t,i,{configurable:!0,value:n})}},{128:128,41:41,72:72}],102:[function(t,n,r){var e=t(103)("keys"),o=t(124);n.exports=function(t){return e[t]||(e[t]=o(t))}},{103:103,124:124}],103:[function(t,n,r){var e=t(40),o=e["__core-js_shared__"]||(e["__core-js_shared__"]={});n.exports=function(t){return o[t]||(o[t]={})}},{40:40}],104:[function(t,n,r){var e=t(7),o=t(3),i=t(128)("species");n.exports=function(t,n){var r,u=e(t).constructor;return void 0===u||null==(r=e(u)[i])?n:o(r)}},{128:128,3:3,7:7}],105:[function(t,n,r){var e=t(35);n.exports=function(t,n){return!!t&&e((function(){n?t.call(null,(function(){}),1):t.call(null)}))}},{35:35}],106:[function(t,n,r){var e=t(116),o=t(28);n.exports=function(t){return function(n,r){var i,u,c=String(o(n)),a=e(r),f=c.length;return a<0||a>=f?t?"":void 0:(i=c.charCodeAt(a))<55296||i>56319||a+1===f||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):i:t?c.slice(a,a+2):u-56320+(i-55296<<10)+65536}}},{116:116,28:28}],107:[function(t,n,r){var e=t(52),o=t(28);n.exports=function(t,n,r){if(e(n))throw TypeError("String#"+r+" doesn't accept regex!");return String(o(t))}},{28:28,52:52}],108:[function(t,n,r){var e=t(33),o=t(35),i=t(28),u=/"/g,c=function(t,n,r,e){var o=String(i(t)),c="<"+n;return""!==r&&(c+=" "+r+'="'+String(e).replace(u,"&quot;")+'"'),c+">"+o+"</"+n+">"};n.exports=function(t,n){var r={};r[t]=n(c),e(e.P+e.F*o((function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3})),"String",r)}},{28:28,33:33,35:35}],109:[function(t,n,r){var e=t(118),o=t(110),i=t(28);n.exports=function(t,n,r,u){var c=String(i(t)),a=c.length,f=void 0===r?" ":String(r),s=e(n);if(s<=a||""==f)return c;var l=s-a,h=o.call(f,Math.ceil(l/f.length));return h.length>l&&(h=h.slice(0,l)),u?h+c:c+h}},{110:110,118:118,28:28}],110:[function(t,n,r){var e=t(116),o=t(28);n.exports=function(t){var n=String(o(this)),r="",i=e(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(n+=n))1&i&&(r+=n);return r}},{116:116,28:28}],111:[function(t,n,r){var e=t(33),o=t(28),i=t(35),u=t(112),c="["+u+"]",a=RegExp("^"+c+c+"*"),f=RegExp(c+c+"*$"),s=function(t,n,r){var o={},c=i((function(){return!!u[t]()||"​"!="​"[t]()})),a=o[t]=c?n(l):u[t];r&&(o[r]=a),e(e.P+e.F*c,"String",o)},l=s.trim=function(t,n){return t=String(o(t)),1&n&&(t=t.replace(a,"")),2&n&&(t=t.replace(f,"")),t};n.exports=s},{112:112,28:28,33:33,35:35}],112:[function(t,n,r){n.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},{}],113:[function(t,n,r){var e,o,i,u=t(25),c=t(46),a=t(43),f=t(30),s=t(40),l=s.process,h=s.setImmediate,p=s.clearImmediate,v=s.MessageChannel,d=s.Dispatch,y=0,g={},m=function(){var t=+this;if(g.hasOwnProperty(t)){var n=g[t];delete g[t],n()}},b=function(t){m.call(t.data)};h&&p||(h=function(t){for(var n=[],r=1;arguments.length>r;)n.push(arguments[r++]);return g[++y]=function(){c("function"==typeof t?t:Function(t),n)},e(y),y},p=function(t){delete g[t]},"process"==t(18)(l)?e=function(t){l.nextTick(u(m,t,1))}:d&&d.now?e=function(t){d.now(u(m,t,1))}:v?(i=(o=new v).port2,o.port1.onmessage=b,e=u(i.postMessage,i,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(e=function(t){s.postMessage(t+"","*")},s.addEventListener("message",b,!1)):e="onreadystatechange"in f("script")?function(t){a.appendChild(f("script")).onreadystatechange=function(){a.removeChild(this),m.call(t)}}:function(t){setTimeout(u(m,t,1),0)}),n.exports={set:h,clear:p}},{18:18,25:25,30:30,40:40,43:43,46:46}],114:[function(t,n,r){var e=t(116),o=Math.max,i=Math.min;n.exports=function(t,n){return(t=e(t))<0?o(t+n,0):i(t,n)}},{116:116}],115:[function(t,n,r){var e=t(116),o=t(118);n.exports=function(t){if(void 0===t)return 0;var n=e(t),r=o(n);if(n!==r)throw RangeError("Wrong length!");return r}},{116:116,118:118}],116:[function(t,n,r){var e=Math.ceil,o=Math.floor;n.exports=function(t){return isNaN(t=+t)?0:(t>0?o:e)(t)}},{}],117:[function(t,n,r){var e=t(47),o=t(28);n.exports=function(t){return e(o(t))}},{28:28,47:47}],118:[function(t,n,r){var e=t(116),o=Math.min;n.exports=function(t){return t>0?o(e(t),9007199254740991):0}},{116:116}],119:[function(t,n,r){var e=t(28);n.exports=function(t){return Object(e(t))}},{28:28}],120:[function(t,n,r){var e=t(51);n.exports=function(t,n){if(!e(t))return t;var r,o;if(n&&"function"==typeof(r=t.toString)&&!e(o=r.call(t)))return o;if("function"==typeof(r=t.valueOf)&&!e(o=r.call(t)))return o;if(!n&&"function"==typeof(r=t.toString)&&!e(o=r.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},{51:51}],121:[function(t,n,r){if(t(29)){var e=t(60),o=t(40),i=t(35),u=t(33),c=t(123),a=t(122),f=t(25),s=t(6),l=t(92),h=t(42),p=t(93),v=t(116),d=t(118),y=t(115),g=t(114),m=t(120),b=t(41),_=t(17),S=t(51),x=t(119),w=t(48),E=t(71),O=t(79),A=t(77).f,M=t(129),L=t(124),P=t(128),F=t(12),j=t(11),N=t(104),k=t(141),T=t(58),I=t(56),R=t(100),C=t(9),D=t(8),W=t(72),U=t(75),G=W.f,V=U.f,B=o.RangeError,q=o.TypeError,z=o.Uint8Array,H=Array.prototype,K=a.ArrayBuffer,Y=a.DataView,J=F(0),X=F(2),$=F(3),Z=F(4),Q=F(5),tt=F(6),nt=j(!0),rt=j(!1),et=k.values,ot=k.keys,it=k.entries,ut=H.lastIndexOf,ct=H.reduce,at=H.reduceRight,ft=H.join,st=H.sort,lt=H.slice,ht=H.toString,pt=H.toLocaleString,vt=P("iterator"),dt=P("toStringTag"),yt=L("typed_constructor"),gt=L("def_constructor"),mt=c.CONSTR,bt=c.TYPED,_t=c.VIEW,St=F(1,(function(t,n){return At(N(t,t[gt]),n)})),xt=i((function(){return 1===new z(new Uint16Array([1]).buffer)[0]})),wt=!!z&&!!z.prototype.set&&i((function(){new z(1).set({})})),Et=function(t,n){var r=v(t);if(r<0||r%n)throw B("Wrong offset!");return r},Ot=function(t){if(S(t)&&bt in t)return t;throw q(t+" is not a typed array!")},At=function(t,n){if(!S(t)||!(yt in t))throw q("It is not a typed array constructor!");return new t(n)},Mt=function(t,n){return Lt(N(t,t[gt]),n)},Lt=function(t,n){for(var r=0,e=n.length,o=At(t,e);e>r;)o[r]=n[r++];return o},Pt=function(t,n,r){G(t,n,{get:function(){return this._d[r]}})},Ft=function(t){var n,r,e,o,i,u,c=x(t),a=arguments.length,s=a>1?arguments[1]:void 0,l=void 0!==s,h=M(c);if(null!=h&&!w(h)){for(u=h.call(c),e=[],n=0;!(i=u.next()).done;n++)e.push(i.value);c=e}for(l&&a>2&&(s=f(s,arguments[2],2)),n=0,r=d(c.length),o=At(this,r);r>n;n++)o[n]=l?s(c[n],n):c[n];return o},jt=function(){for(var t=0,n=arguments.length,r=At(this,n);n>t;)r[t]=arguments[t++];return r},Nt=!!z&&i((function(){pt.call(new z(1))})),kt=function(){return pt.apply(Nt?lt.call(Ot(this)):Ot(this),arguments)},Tt={copyWithin:function(t,n){return D.call(Ot(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return Z(Ot(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return C.apply(Ot(this),arguments)},filter:function(t){return Mt(this,X(Ot(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(Ot(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){J(Ot(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return rt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return nt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ft.apply(Ot(this),arguments)},lastIndexOf:function(t){return ut.apply(Ot(this),arguments)},map:function(t){return St(Ot(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ct.apply(Ot(this),arguments)},reduceRight:function(t){return at.apply(Ot(this),arguments)},reverse:function(){for(var t,n=Ot(this).length,r=Math.floor(n/2),e=0;e<r;)t=this[e],this[e++]=this[--n],this[n]=t;return this},some:function(t){return $(Ot(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return st.call(Ot(this),t)},subarray:function(t,n){var r=Ot(this),e=r.length,o=g(t,e);return new(N(r,r[gt]))(r.buffer,r.byteOffset+o*r.BYTES_PER_ELEMENT,d((void 0===n?e:g(n,e))-o))}},It=function(t,n){return Mt(this,lt.call(Ot(this),t,n))},Rt=function(t){Ot(this);var n=Et(arguments[1],1),r=this.length,e=x(t),o=d(e.length),i=0;if(o+n>r)throw B("Wrong length!");for(;i<o;)this[n+i]=e[i++]},Ct={entries:function(){return it.call(Ot(this))},keys:function(){return ot.call(Ot(this))},values:function(){return et.call(Ot(this))}},Dt=function(t,n){return S(t)&&t[bt]&&"symbol"!=_typeof(n)&&n in t&&String(+n)==String(n)},Wt=function(t,n){return Dt(t,n=m(n,!0))?l(2,t[n]):V(t,n)},Ut=function(t,n,r){return!(Dt(t,n=m(n,!0))&&S(r)&&b(r,"value"))||b(r,"get")||b(r,"set")||r.configurable||b(r,"writable")&&!r.writable||b(r,"enumerable")&&!r.enumerable?G(t,n,r):(t[n]=r.value,t)};mt||(U.f=Wt,W.f=Ut),u(u.S+u.F*!mt,"Object",{getOwnPropertyDescriptor:Wt,defineProperty:Ut}),i((function(){ht.call({})}))&&(ht=pt=function(){return ft.call(this)});var Gt=p({},Tt);p(Gt,Ct),h(Gt,vt,Ct.values),p(Gt,{slice:It,set:Rt,constructor:function(){},toString:ht,toLocaleString:kt}),Pt(Gt,"buffer","b"),Pt(Gt,"byteOffset","o"),Pt(Gt,"byteLength","l"),Pt(Gt,"length","e"),G(Gt,dt,{get:function(){return this[bt]}}),n.exports=function(t,n,r,a){var f=t+((a=!!a)?"Clamped":"")+"Array",l="get"+t,p="set"+t,v=o[f],g=v||{},m=v&&O(v),b=!v||!c.ABV,x={},w=v&&v.prototype,M=function(t,r){G(t,r,{get:function(){return function(t,r){var e=t._d;return e.v[l](r*n+e.o,xt)}(this,r)},set:function(t){return function(t,r,e){var o=t._d;a&&(e=(e=Math.round(e))<0?0:e>255?255:255&e),o.v[p](r*n+o.o,e,xt)}(this,r,t)},enumerable:!0})};b?(v=r((function(t,r,e,o){s(t,v,f,"_d");var i,u,c,a,l=0,p=0;if(S(r)){if(!(r instanceof K||"ArrayBuffer"==(a=_(r))||"SharedArrayBuffer"==a))return bt in r?Lt(v,r):Ft.call(v,r);i=r,p=Et(e,n);var g=r.byteLength;if(void 0===o){if(g%n)throw B("Wrong length!");if((u=g-p)<0)throw B("Wrong length!")}else if((u=d(o)*n)+p>g)throw B("Wrong length!");c=u/n}else c=y(r),i=new K(u=c*n);for(h(t,"_d",{b:i,o:p,l:u,e:c,v:new Y(i)});l<c;)M(t,l++)})),w=v.prototype=E(Gt),h(w,"constructor",v)):i((function(){v(1)}))&&i((function(){new v(-1)}))&&I((function(t){new v,new v(null),new v(1.5),new v(t)}),!0)||(v=r((function(t,r,e,o){var i;return s(t,v,f),S(r)?r instanceof K||"ArrayBuffer"==(i=_(r))||"SharedArrayBuffer"==i?void 0!==o?new g(r,Et(e,n),o):void 0!==e?new g(r,Et(e,n)):new g(r):bt in r?Lt(v,r):Ft.call(v,r):new g(y(r))})),J(m!==Function.prototype?A(g).concat(A(m)):A(g),(function(t){t in v||h(v,t,g[t])})),v.prototype=w,e||(w.constructor=v));var L=w[vt],P=!!L&&("values"==L.name||null==L.name),F=Ct.values;h(v,yt,!0),h(w,bt,f),h(w,_t,!0),h(w,gt,v),(a?new v(1)[dt]==f:dt in w)||G(w,dt,{get:function(){return f}}),x[f]=v,u(u.G+u.W+u.F*(v!=g),x),u(u.S,f,{BYTES_PER_ELEMENT:n}),u(u.S+u.F*i((function(){g.of.call(v,1)})),f,{from:Ft,of:jt}),"BYTES_PER_ELEMENT"in w||h(w,"BYTES_PER_ELEMENT",n),u(u.P,f,Tt),R(f),u(u.P+u.F*wt,f,{set:Rt}),u(u.P+u.F*!P,f,Ct),e||w.toString==ht||(w.toString=ht),u(u.P+u.F*i((function(){new v(1).slice()})),f,{slice:It}),u(u.P+u.F*(i((function(){return[1,2].toLocaleString()!=new v([1,2]).toLocaleString()}))||!i((function(){w.toLocaleString.call([1,2])}))),f,{toLocaleString:kt}),T[f]=P?L:F,e||P||h(w,vt,F)}}else n.exports=function(){}},{100:100,104:104,11:11,114:114,115:115,116:116,118:118,119:119,12:12,120:120,122:122,123:123,124:124,128:128,129:129,141:141,17:17,25:25,29:29,33:33,35:35,40:40,41:41,42:42,48:48,51:51,56:56,58:58,6:6,60:60,71:71,72:72,75:75,77:77,79:79,8:8,9:9,92:92,93:93}],122:[function(t,n,r){var e=t(40),o=t(29),i=t(60),u=t(123),c=t(42),a=t(93),f=t(35),s=t(6),l=t(116),h=t(118),p=t(115),v=t(77).f,d=t(72).f,y=t(9),g=t(101),m=e.ArrayBuffer,b=e.DataView,_=e.Math,S=e.RangeError,x=e.Infinity,w=m,E=_.abs,O=_.pow,A=_.floor,M=_.log,L=_.LN2,P=o?"_b":"buffer",F=o?"_l":"byteLength",j=o?"_o":"byteOffset";function N(t,n,r){var e,o,i,u=Array(r),c=8*r-n-1,a=(1<<c)-1,f=a>>1,s=23===n?O(2,-24)-O(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=E(t))!=t||t===x?(o=t!=t?1:0,e=a):(e=A(M(t)/L),t*(i=O(2,-e))<1&&(e--,i*=2),(t+=e+f>=1?s/i:s*O(2,1-f))*i>=2&&(e++,i/=2),e+f>=a?(o=0,e=a):e+f>=1?(o=(t*i-1)*O(2,n),e+=f):(o=t*O(2,f-1)*O(2,n),e=0));n>=8;u[l++]=255&o,o/=256,n-=8);for(e=e<<n|o,c+=n;c>0;u[l++]=255&e,e/=256,c-=8);return u[--l]|=128*h,u}function k(t,n,r){var e,o=8*r-n-1,i=(1<<o)-1,u=i>>1,c=o-7,a=r-1,f=t[a--],s=127&f;for(f>>=7;c>0;s=256*s+t[a],a--,c-=8);for(e=s&(1<<-c)-1,s>>=-c,c+=n;c>0;e=256*e+t[a],a--,c-=8);if(0===s)s=1-u;else{if(s===i)return e?NaN:f?-x:x;e+=O(2,n),s-=u}return(f?-1:1)*e*O(2,s-n)}function T(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function I(t){return[255&t]}function R(t){return[255&t,t>>8&255]}function C(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function D(t){return N(t,52,8)}function W(t){return N(t,23,4)}function U(t,n,r){d(t.prototype,n,{get:function(){return this[r]}})}function G(t,n,r,e){var o=p(+r);if(o+n>t[F])throw S("Wrong index!");var i=t[P]._b,u=o+t[j],c=i.slice(u,u+n);return e?c:c.reverse()}function V(t,n,r,e,o,i){var u=p(+r);if(u+n>t[F])throw S("Wrong index!");for(var c=t[P]._b,a=u+t[j],f=e(+o),s=0;s<n;s++)c[a+s]=f[i?s:n-s-1]}if(u.ABV){if(!f((function(){m(1)}))||!f((function(){new m(-1)}))||f((function(){return new m,new m(1.5),new m(NaN),"ArrayBuffer"!=m.name}))){for(var B,q=(m=function(t){return s(this,m),new w(p(t))}).prototype=w.prototype,z=v(w),H=0;z.length>H;)(B=z[H++])in m||c(m,B,w[B]);i||(q.constructor=m)}var K=new b(new m(2)),Y=b.prototype.setInt8;K.setInt8(0,2147483648),K.setInt8(1,2147483649),!K.getInt8(0)&&K.getInt8(1)||a(b.prototype,{setInt8:function(t,n){Y.call(this,t,n<<24>>24)},setUint8:function(t,n){Y.call(this,t,n<<24>>24)}},!0)}else m=function(t){s(this,m,"ArrayBuffer");var n=p(t);this._b=y.call(Array(n),0),this[F]=n},b=function(t,n,r){s(this,b,"DataView"),s(t,m,"DataView");var e=t[F],o=l(n);if(o<0||o>e)throw S("Wrong offset!");if(o+(r=void 0===r?e-o:h(r))>e)throw S("Wrong length!");this[P]=t,this[j]=o,this[F]=r},o&&(U(m,"byteLength","_l"),U(b,"buffer","_b"),U(b,"byteLength","_l"),U(b,"byteOffset","_o")),a(b.prototype,{getInt8:function(t){return G(this,1,t)[0]<<24>>24},getUint8:function(t){return G(this,1,t)[0]},getInt16:function(t){var n=G(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=G(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return T(G(this,4,t,arguments[1]))},getUint32:function(t){return T(G(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return k(G(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return k(G(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){V(this,1,t,I,n)},setUint8:function(t,n){V(this,1,t,I,n)},setInt16:function(t,n){V(this,2,t,R,n,arguments[2])},setUint16:function(t,n){V(this,2,t,R,n,arguments[2])},setInt32:function(t,n){V(this,4,t,C,n,arguments[2])},setUint32:function(t,n){V(this,4,t,C,n,arguments[2])},setFloat32:function(t,n){V(this,4,t,W,n,arguments[2])},setFloat64:function(t,n){V(this,8,t,D,n,arguments[2])}});g(m,"ArrayBuffer"),g(b,"DataView"),c(b.prototype,u.VIEW,!0),r.ArrayBuffer=m,r.DataView=b},{101:101,115:115,116:116,118:118,123:123,29:29,35:35,40:40,42:42,6:6,60:60,72:72,77:77,9:9,93:93}],123:[function(t,n,r){for(var e,o=t(40),i=t(42),u=t(124),c=u("typed_array"),a=u("view"),f=!(!o.ArrayBuffer||!o.DataView),s=f,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(e=o[h[l++]])?(i(e.prototype,c,!0),i(e.prototype,a,!0)):s=!1;n.exports={ABV:f,CONSTR:s,TYPED:c,VIEW:a}},{124:124,40:40,42:42}],124:[function(t,n,r){var e=0,o=Math.random();n.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+o).toString(36))}},{}],125:[function(t,n,r){var e=t(51);n.exports=function(t,n){if(!e(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},{51:51}],126:[function(t,n,r){var e=t(40),o=t(23),i=t(60),u=t(127),c=t(72).f;n.exports=function(t){var n=o.Symbol||(o.Symbol=i?{}:e.Symbol||{});"_"==t.charAt(0)||t in n||c(n,t,{value:u.f(t)})}},{127:127,23:23,40:40,60:60,72:72}],127:[function(t,n,r){r.f=t(128)},{128:128}],128:[function(t,n,r){var e=t(103)("wks"),o=t(124),i=t(40).Symbol,u="function"==typeof i;(n.exports=function(t){return e[t]||(e[t]=u&&i[t]||(u?i:o)("Symbol."+t))}).store=e},{103:103,124:124,40:40}],129:[function(t,n,r){var e=t(17),o=t(128)("iterator"),i=t(58);n.exports=t(23).getIteratorMethod=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[e(t)]}},{128:128,17:17,23:23,58:58}],130:[function(t,n,r){var e=t(33),o=t(95)(/[\\^$*+?.()|[\]{}]/g,"\\$&");e(e.S,"RegExp",{escape:function(t){return o(t)}})},{33:33,95:95}],131:[function(t,n,r){var e=t(33);e(e.P,"Array",{copyWithin:t(8)}),t(5)("copyWithin")},{33:33,5:5,8:8}],132:[function(t,n,r){var e=t(33),o=t(12)(4);e(e.P+e.F*!t(105)([].every,!0),"Array",{every:function(t){return o(this,t,arguments[1])}})},{105:105,12:12,33:33}],133:[function(t,n,r){var e=t(33);e(e.P,"Array",{fill:t(9)}),t(5)("fill")},{33:33,5:5,9:9}],134:[function(t,n,r){var e=t(33),o=t(12)(2);e(e.P+e.F*!t(105)([].filter,!0),"Array",{filter:function(t){return o(this,t,arguments[1])}})},{105:105,12:12,33:33}],135:[function(t,n,r){var e=t(33),o=t(12)(6),i="findIndex",u=!0;i in[]&&Array(1)[i]((function(){u=!1})),e(e.P+e.F*u,"Array",{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),t(5)(i)},{12:12,33:33,5:5}],136:[function(t,n,r){var e=t(33),o=t(12)(5),i=!0;"find"in[]&&Array(1).find((function(){i=!1})),e(e.P+e.F*i,"Array",{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),t(5)("find")},{12:12,33:33,5:5}],137:[function(t,n,r){var e=t(33),o=t(12)(0),i=t(105)([].forEach,!0);e(e.P+e.F*!i,"Array",{forEach:function(t){return o(this,t,arguments[1])}})},{105:105,12:12,33:33}],138:[function(t,n,r){var e=t(25),o=t(33),i=t(119),u=t(53),c=t(48),a=t(118),f=t(24),s=t(129);o(o.S+o.F*!t(56)((function(t){Array.from(t)})),"Array",{from:function(t){var n,r,o,l,h=i(t),p="function"==typeof this?this:Array,v=arguments.length,d=v>1?arguments[1]:void 0,y=void 0!==d,g=0,m=s(h);if(y&&(d=e(d,v>2?arguments[2]:void 0,2)),null==m||p==Array&&c(m))for(r=new p(n=a(h.length));n>g;g++)f(r,g,y?d(h[g],g):h[g]);else for(l=m.call(h),r=new p;!(o=l.next()).done;g++)f(r,g,y?u(l,d,[o.value,g],!0):o.value);return r.length=g,r}})},{118:118,119:119,129:129,24:24,25:25,33:33,48:48,53:53,56:56}],139:[function(t,n,r){var e=t(33),o=t(11)(!1),i=[].indexOf,u=!!i&&1/[1].indexOf(1,-0)<0;e(e.P+e.F*(u||!t(105)(i)),"Array",{indexOf:function(t){return u?i.apply(this,arguments)||0:o(this,t,arguments[1])}})},{105:105,11:11,33:33}],140:[function(t,n,r){var e=t(33);e(e.S,"Array",{isArray:t(49)})},{33:33,49:49}],141:[function(t,n,r){var e=t(5),o=t(57),i=t(58),u=t(117);n.exports=t(55)(Array,"Array",(function(t,n){this._t=u(t),this._i=0,this._k=n}),(function(){var t=this._t,n=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,o(1)):o(0,"keys"==n?r:"values"==n?t[r]:[r,t[r]])}),"values"),i.Arguments=i.Array,e("keys"),e("values"),e("entries")},{117:117,5:5,55:55,57:57,58:58}],142:[function(t,n,r){var e=t(33),o=t(117),i=[].join;e(e.P+e.F*(t(47)!=Object||!t(105)(i)),"Array",{join:function(t){return i.call(o(this),void 0===t?",":t)}})},{105:105,117:117,33:33,47:47}],143:[function(t,n,r){var e=t(33),o=t(117),i=t(116),u=t(118),c=[].lastIndexOf,a=!!c&&1/[1].lastIndexOf(1,-0)<0;e(e.P+e.F*(a||!t(105)(c)),"Array",{lastIndexOf:function(t){if(a)return c.apply(this,arguments)||0;var n=o(this),r=u(n.length),e=r-1;for(arguments.length>1&&(e=Math.min(e,i(arguments[1]))),e<0&&(e=r+e);e>=0;e--)if(e in n&&n[e]===t)return e||0;return-1}})},{105:105,116:116,117:117,118:118,33:33}],144:[function(t,n,r){var e=t(33),o=t(12)(1);e(e.P+e.F*!t(105)([].map,!0),"Array",{map:function(t){return o(this,t,arguments[1])}})},{105:105,12:12,33:33}],145:[function(t,n,r){var e=t(33),o=t(24);e(e.S+e.F*t(35)((function(){function t(){}return!(Array.of.call(t)instanceof t)})),"Array",{of:function(){for(var t=0,n=arguments.length,r=new("function"==typeof this?this:Array)(n);n>t;)o(r,t,arguments[t++]);return r.length=n,r}})},{24:24,33:33,35:35}],146:[function(t,n,r){var e=t(33),o=t(13);e(e.P+e.F*!t(105)([].reduceRight,!0),"Array",{reduceRight:function(t){return o(this,t,arguments.length,arguments[1],!0)}})},{105:105,13:13,33:33}],147:[function(t,n,r){var e=t(33),o=t(13);e(e.P+e.F*!t(105)([].reduce,!0),"Array",{reduce:function(t){return o(this,t,arguments.length,arguments[1],!1)}})},{105:105,13:13,33:33}],148:[function(t,n,r){var e=t(33),o=t(43),i=t(18),u=t(114),c=t(118),a=[].slice;e(e.P+e.F*t(35)((function(){o&&a.call(o)})),"Array",{slice:function(t,n){var r=c(this.length),e=i(this);if(n=void 0===n?r:n,"Array"==e)return a.call(this,t,n);for(var o=u(t,r),f=u(n,r),s=c(f-o),l=Array(s),h=0;h<s;h++)l[h]="String"==e?this.charAt(o+h):this[o+h];return l}})},{114:114,118:118,18:18,33:33,35:35,43:43}],149:[function(t,n,r){var e=t(33),o=t(12)(3);e(e.P+e.F*!t(105)([].some,!0),"Array",{some:function(t){return o(this,t,arguments[1])}})},{105:105,12:12,33:33}],150:[function(t,n,r){var e=t(33),o=t(3),i=t(119),u=t(35),c=[].sort,a=[1,2,3];e(e.P+e.F*(u((function(){a.sort(void 0)}))||!u((function(){a.sort(null)}))||!t(105)(c)),"Array",{sort:function(t){return void 0===t?c.call(i(this)):c.call(i(this),o(t))}})},{105:105,119:119,3:3,33:33,35:35}],151:[function(t,n,r){t(100)("Array")},{100:100}],152:[function(t,n,r){var e=t(33);e(e.S,"Date",{now:function(){return(new Date).getTime()}})},{33:33}],153:[function(t,n,r){var e=t(33),o=t(26);e(e.P+e.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},{26:26,33:33}],154:[function(t,n,r){var e=t(33),o=t(119),i=t(120);e(e.P+e.F*t(35)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(t){var n=o(this),r=i(n);return"number"!=typeof r||isFinite(r)?n.toISOString():null}})},{119:119,120:120,33:33,35:35}],155:[function(t,n,r){var e=t(128)("toPrimitive"),o=Date.prototype;e in o||t(42)(o,e,t(27))},{128:128,27:27,42:42}],156:[function(t,n,r){var e=Date.prototype,o=e.toString,i=e.getTime;new Date(NaN)+""!="Invalid Date"&&t(94)(e,"toString",(function(){var t=i.call(this);return t==t?o.call(this):"Invalid Date"}))},{94:94}],157:[function(t,n,r){var e=t(33);e(e.P,"Function",{bind:t(16)})},{16:16,33:33}],158:[function(t,n,r){var e=t(51),o=t(79),i=t(128)("hasInstance"),u=Function.prototype;i in u||t(72).f(u,i,{value:function(t){if("function"!=typeof this||!e(t))return!1;if(!e(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},{128:128,51:51,72:72,79:79}],159:[function(t,n,r){var e=t(72).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||t(29)&&e(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},{29:29,72:72}],160:[function(t,n,r){var e=t(19),o=t(125);n.exports=t(22)("Map",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(t){var n=e.getEntry(o(this,"Map"),t);return n&&n.v},set:function(t,n){return e.def(o(this,"Map"),0===t?0:t,n)}},e,!0)},{125:125,19:19,22:22}],161:[function(t,n,r){var e=t(33),o=t(63),i=Math.sqrt,u=Math.acosh;e(e.S+e.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:o(t-1+i(t-1)*i(t+1))}})},{33:33,63:63}],162:[function(t,n,r){var e=t(33),o=Math.asinh;e(e.S+e.F*!(o&&1/o(0)>0),"Math",{asinh:function t(n){return isFinite(n=+n)&&0!=n?n<0?-t(-n):Math.log(n+Math.sqrt(n*n+1)):n}})},{33:33}],163:[function(t,n,r){var e=t(33),o=Math.atanh;e(e.S+e.F*!(o&&1/o(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},{33:33}],164:[function(t,n,r){var e=t(33),o=t(65);e(e.S,"Math",{cbrt:function(t){return o(t=+t)*Math.pow(Math.abs(t),1/3)}})},{33:33,65:65}],165:[function(t,n,r){var e=t(33);e(e.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},{33:33}],166:[function(t,n,r){var e=t(33),o=Math.exp;e(e.S,"Math",{cosh:function(t){return(o(t=+t)+o(-t))/2}})},{33:33}],167:[function(t,n,r){var e=t(33),o=t(61);e(e.S+e.F*(o!=Math.expm1),"Math",{expm1:o})},{33:33,61:61}],168:[function(t,n,r){var e=t(33);e(e.S,"Math",{fround:t(62)})},{33:33,62:62}],169:[function(t,n,r){var e=t(33),o=Math.abs;e(e.S,"Math",{hypot:function(t,n){for(var r,e,i=0,u=0,c=arguments.length,a=0;u<c;)a<(r=o(arguments[u++]))?(i=i*(e=a/r)*e+1,a=r):i+=r>0?(e=r/a)*e:r;return a===1/0?1/0:a*Math.sqrt(i)}})},{33:33}],170:[function(t,n,r){var e=t(33),o=Math.imul;e(e.S+e.F*t(35)((function(){return-5!=o(4294967295,5)||2!=o.length})),"Math",{imul:function(t,n){var r=+t,e=+n,o=65535&r,i=65535&e;return 0|o*i+((65535&r>>>16)*i+o*(65535&e>>>16)<<16>>>0)}})},{33:33,35:35}],171:[function(t,n,r){var e=t(33);e(e.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},{33:33}],172:[function(t,n,r){var e=t(33);e(e.S,"Math",{log1p:t(63)})},{33:33,63:63}],173:[function(t,n,r){var e=t(33);e(e.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},{33:33}],174:[function(t,n,r){var e=t(33);e(e.S,"Math",{sign:t(65)})},{33:33,65:65}],175:[function(t,n,r){var e=t(33),o=t(61),i=Math.exp;e(e.S+e.F*t(35)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(o(t)-o(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},{33:33,35:35,61:61}],176:[function(t,n,r){var e=t(33),o=t(61),i=Math.exp;e(e.S,"Math",{tanh:function(t){var n=o(t=+t),r=o(-t);return n==1/0?1:r==1/0?-1:(n-r)/(i(t)+i(-t))}})},{33:33,61:61}],177:[function(t,n,r){var e=t(33);e(e.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},{33:33}],178:[function(t,n,r){var e=t(40),o=t(41),i=t(18),u=t(45),c=t(120),a=t(35),f=t(77).f,s=t(75).f,l=t(72).f,h=t(111).trim,p=e.Number,v=p,d=p.prototype,y="Number"==i(t(71)(d)),g="trim"in String.prototype,m=function(t){var n=c(t,!1);if("string"==typeof n&&n.length>2){var r,e,o,i=(n=g?n.trim():h(n,3)).charCodeAt(0);if(43===i||45===i){if(88===(r=n.charCodeAt(2))||120===r)return NaN}else if(48===i){switch(n.charCodeAt(1)){case 66:case 98:e=2,o=49;break;case 79:case 111:e=8,o=55;break;default:return+n}for(var u,a=n.slice(2),f=0,s=a.length;f<s;f++)if((u=a.charCodeAt(f))<48||u>o)return NaN;return parseInt(a,e)}}return+n};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var n=arguments.length<1?0:t,r=this;return r instanceof p&&(y?a((function(){d.valueOf.call(r)})):"Number"!=i(r))?u(new v(m(n)),r,p):m(n)};for(var b,_=t(29)?f(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),S=0;_.length>S;S++)o(v,b=_[S])&&!o(p,b)&&l(p,b,s(v,b));p.prototype=d,d.constructor=p,t(94)(e,"Number",p)}},{111:111,120:120,18:18,29:29,35:35,40:40,41:41,45:45,71:71,72:72,75:75,77:77,94:94}],179:[function(t,n,r){var e=t(33);e(e.S,"Number",{EPSILON:Math.pow(2,-52)})},{33:33}],180:[function(t,n,r){var e=t(33),o=t(40).isFinite;e(e.S,"Number",{isFinite:function(t){return"number"==typeof t&&o(t)}})},{33:33,40:40}],181:[function(t,n,r){var e=t(33);e(e.S,"Number",{isInteger:t(50)})},{33:33,50:50}],182:[function(t,n,r){var e=t(33);e(e.S,"Number",{isNaN:function(t){return t!=t}})},{33:33}],183:[function(t,n,r){var e=t(33),o=t(50),i=Math.abs;e(e.S,"Number",{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},{33:33,50:50}],184:[function(t,n,r){var e=t(33);e(e.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},{33:33}],185:[function(t,n,r){var e=t(33);e(e.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},{33:33}],186:[function(t,n,r){var e=t(33),o=t(86);e(e.S+e.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},{33:33,86:86}],187:[function(t,n,r){var e=t(33),o=t(87);e(e.S+e.F*(Number.parseInt!=o),"Number",{parseInt:o})},{33:33,87:87}],188:[function(t,n,r){var e=t(33),o=t(116),i=t(4),u=t(110),c=1..toFixed,a=Math.floor,f=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",l=function(t,n){for(var r=-1,e=n;++r<6;)e+=t*f[r],f[r]=e%1e7,e=a(e/1e7)},h=function(t){for(var n=6,r=0;--n>=0;)r+=f[n],f[n]=a(r/t),r=r%t*1e7},p=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==f[t]){var r=String(f[t]);n=""===n?r:n+u.call("0",7-r.length)+r}return n},v=function t(n,r,e){return 0===r?e:r%2==1?t(n,r-1,e*n):t(n*n,r/2,e)};e(e.P+e.F*(!!c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!t(35)((function(){c.call({})}))),"Number",{toFixed:function(t){var n,r,e,c,a=i(this,s),f=o(t),d="",y="0";if(f<0||f>20)throw RangeError(s);if(a!=a)return"NaN";if(a<=-1e21||a>=1e21)return String(a);if(a<0&&(d="-",a=-a),a>1e-21)if(r=(n=function(t){for(var n=0,r=t;r>=4096;)n+=12,r/=4096;for(;r>=2;)n+=1,r/=2;return n}(a*v(2,69,1))-69)<0?a*v(2,-n,1):a/v(2,n,1),r*=4503599627370496,(n=52-n)>0){for(l(0,r),e=f;e>=7;)l(1e7,0),e-=7;for(l(v(10,e,1),0),e=n-1;e>=23;)h(1<<23),e-=23;h(1<<e),l(1,1),h(2),y=p()}else l(0,r),l(1<<-n,0),y=p()+u.call("0",f);return f>0?d+((c=y.length)<=f?"0."+u.call("0",f-c)+y:y.slice(0,c-f)+"."+y.slice(c-f)):d+y}})},{110:110,116:116,33:33,35:35,4:4}],189:[function(t,n,r){var e=t(33),o=t(35),i=t(4),u=1..toPrecision;e(e.P+e.F*(o((function(){return"1"!==u.call(1,void 0)}))||!o((function(){u.call({})}))),"Number",{toPrecision:function(t){var n=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(n):u.call(n,t)}})},{33:33,35:35,4:4}],190:[function(t,n,r){var e=t(33);e(e.S+e.F,"Object",{assign:t(70)})},{33:33,70:70}],191:[function(t,n,r){var e=t(33);e(e.S,"Object",{create:t(71)})},{33:33,71:71}],192:[function(t,n,r){var e=t(33);e(e.S+e.F*!t(29),"Object",{defineProperties:t(73)})},{29:29,33:33,73:73}],193:[function(t,n,r){var e=t(33);e(e.S+e.F*!t(29),"Object",{defineProperty:t(72).f})},{29:29,33:33,72:72}],194:[function(t,n,r){var e=t(51),o=t(66).onFreeze;t(83)("freeze",(function(t){return function(n){return t&&e(n)?t(o(n)):n}}))},{51:51,66:66,83:83}],195:[function(t,n,r){var e=t(117),o=t(75).f;t(83)("getOwnPropertyDescriptor",(function(){return function(t,n){return o(e(t),n)}}))},{117:117,75:75,83:83}],196:[function(t,n,r){t(83)("getOwnPropertyNames",(function(){return t(76).f}))},{76:76,83:83}],197:[function(t,n,r){var e=t(119),o=t(79);t(83)("getPrototypeOf",(function(){return function(t){return o(e(t))}}))},{119:119,79:79,83:83}],198:[function(t,n,r){var e=t(51);t(83)("isExtensible",(function(t){return function(n){return!!e(n)&&(!t||t(n))}}))},{51:51,83:83}],199:[function(t,n,r){var e=t(51);t(83)("isFrozen",(function(t){return function(n){return!e(n)||!!t&&t(n)}}))},{51:51,83:83}],200:[function(t,n,r){var e=t(51);t(83)("isSealed",(function(t){return function(n){return!e(n)||!!t&&t(n)}}))},{51:51,83:83}],201:[function(t,n,r){var e=t(33);e(e.S,"Object",{is:t(96)})},{33:33,96:96}],202:[function(t,n,r){var e=t(119),o=t(81);t(83)("keys",(function(){return function(t){return o(e(t))}}))},{119:119,81:81,83:83}],203:[function(t,n,r){var e=t(51),o=t(66).onFreeze;t(83)("preventExtensions",(function(t){return function(n){return t&&e(n)?t(o(n)):n}}))},{51:51,66:66,83:83}],204:[function(t,n,r){var e=t(51),o=t(66).onFreeze;t(83)("seal",(function(t){return function(n){return t&&e(n)?t(o(n)):n}}))},{51:51,66:66,83:83}],205:[function(t,n,r){var e=t(33);e(e.S,"Object",{setPrototypeOf:t(99).set})},{33:33,99:99}],206:[function(t,n,r){var e=t(17),o={};o[t(128)("toStringTag")]="z",o+""!="[object z]"&&t(94)(Object.prototype,"toString",(function(){return"[object "+e(this)+"]"}),!0)},{128:128,17:17,94:94}],207:[function(t,n,r){var e=t(33),o=t(86);e(e.G+e.F*(parseFloat!=o),{parseFloat:o})},{33:33,86:86}],208:[function(t,n,r){var e=t(33),o=t(87);e(e.G+e.F*(parseInt!=o),{parseInt:o})},{33:33,87:87}],209:[function(t,n,r){var e,o,i,u,c=t(60),a=t(40),f=t(25),s=t(17),l=t(33),h=t(51),p=t(3),v=t(6),d=t(39),y=t(104),g=t(113).set,m=t(68)(),b=t(69),_=t(90),S=t(91),x=a.TypeError,w=a.process,E=a.Promise,O="process"==s(w),A=function(){},M=o=b.f,L=!!function(){try{var n=E.resolve(1),r=(n.constructor={})[t(128)("species")]=function(t){t(A,A)};return(O||"function"==typeof PromiseRejectionEvent)&&n.then(A)instanceof r}catch(t){}}(),P=c?function(t,n){return t===n||t===E&&n===u}:function(t,n){return t===n},F=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},j=function(t,n){if(!t._n){t._n=!0;var r=t._c;m((function(){for(var e=t._v,o=1==t._s,i=0,u=function(n){var r,i,u=o?n.ok:n.fail,c=n.resolve,a=n.reject,f=n.domain;try{u?(o||(2==t._h&&T(t),t._h=1),!0===u?r=e:(f&&f.enter(),r=u(e),f&&f.exit()),r===n.promise?a(x("Promise-chain cycle")):(i=F(r))?i.call(r,c,a):c(r)):a(e)}catch(t){a(t)}};r.length>i;)u(r[i++]);t._c=[],t._n=!1,n&&!t._h&&N(t)}))}},N=function(t){g.call(a,(function(){var n,r,e,o=t._v,i=k(t);if(i&&(n=_((function(){O?w.emit("unhandledRejection",o,t):(r=a.onunhandledrejection)?r({promise:t,reason:o}):(e=a.console)&&e.error&&e.error("Unhandled promise rejection",o)})),t._h=O||k(t)?2:1),t._a=void 0,i&&n.e)throw n.v}))},k=function t(n){if(1==n._h)return!1;for(var r,e=n._a||n._c,o=0;e.length>o;)if((r=e[o++]).fail||!t(r.promise))return!1;return!0},T=function(t){g.call(a,(function(){var n;O?w.emit("rejectionHandled",t):(n=a.onrejectionhandled)&&n({promise:t,reason:t._v})}))},I=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),j(n,!0))},R=function t(n){var r,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===n)throw x("Promise can't be resolved itself");(r=F(n))?m((function(){var o={_w:e,_d:!1};try{r.call(n,f(t,o,1),f(I,o,1))}catch(t){I.call(o,t)}})):(e._v=n,e._s=1,j(e,!1))}catch(n){I.call({_w:e,_d:!1},n)}}};L||(E=function(t){v(this,E,"Promise","_h"),p(t),e.call(this);try{t(f(R,this,1),f(I,this,1))}catch(t){I.call(this,t)}},(e=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=t(93)(E.prototype,{then:function(t,n){var r=M(y(this,E));return r.ok="function"!=typeof t||t,r.fail="function"==typeof n&&n,r.domain=O?w.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&j(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new e;this.promise=t,this.resolve=f(R,t,1),this.reject=f(I,t,1)},b.f=M=function(t){return P(E,t)?new i(t):o(t)}),l(l.G+l.W+l.F*!L,{Promise:E}),t(101)(E,"Promise"),t(100)("Promise"),u=t(23).Promise,l(l.S+l.F*!L,"Promise",{reject:function(t){var n=M(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(c||!L),"Promise",{resolve:function(t){return t instanceof E&&P(t.constructor,this)?t:S(this,t)}}),l(l.S+l.F*!(L&&t(56)((function(t){E.all(t).catch(A)}))),"Promise",{all:function(t){var n=this,r=M(n),e=r.resolve,o=r.reject,i=_((function(){var r=[],i=0,u=1;d(t,!1,(function(t){var c=i++,a=!1;r.push(void 0),u++,n.resolve(t).then((function(t){a||(a=!0,r[c]=t,--u||e(r))}),o)})),--u||e(r)}));return i.e&&o(i.v),r.promise},race:function(t){var n=this,r=M(n),e=r.reject,o=_((function(){d(t,!1,(function(t){n.resolve(t).then(r.resolve,e)}))}));return o.e&&e(o.v),r.promise}})},{100:100,101:101,104:104,113:113,128:128,17:17,23:23,25:25,3:3,33:33,39:39,40:40,51:51,56:56,6:6,60:60,68:68,69:69,90:90,91:91,93:93}],210:[function(t,n,r){var e=t(33),o=t(3),i=t(7),u=(t(40).Reflect||{}).apply,c=Function.apply;e(e.S+e.F*!t(35)((function(){u((function(){}))})),"Reflect",{apply:function(t,n,r){var e=o(t),a=i(r);return u?u(e,n,a):c.call(e,n,a)}})},{3:3,33:33,35:35,40:40,7:7}],211:[function(t,n,r){var e=t(33),o=t(71),i=t(3),u=t(7),c=t(51),a=t(35),f=t(16),s=(t(40).Reflect||{}).construct,l=a((function(){function t(){}return!(s((function(){}),[],t)instanceof t)})),h=!a((function(){s((function(){}))}));e(e.S+e.F*(l||h),"Reflect",{construct:function(t,n){i(t),u(n);var r=arguments.length<3?t:i(arguments[2]);if(h&&!l)return s(t,n,r);if(t==r){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var e=[null];return e.push.apply(e,n),new(f.apply(t,e))}var a=r.prototype,p=o(c(a)?a:Object.prototype),v=Function.apply.call(t,p,n);return c(v)?v:p}})},{16:16,3:3,33:33,35:35,40:40,51:51,7:7,71:71}],212:[function(t,n,r){var e=t(72),o=t(33),i=t(7),u=t(120);o(o.S+o.F*t(35)((function(){Reflect.defineProperty(e.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(t,n,r){i(t),n=u(n,!0),i(r);try{return e.f(t,n,r),!0}catch(t){return!1}}})},{120:120,33:33,35:35,7:7,72:72}],213:[function(t,n,r){var e=t(33),o=t(75).f,i=t(7);e(e.S,"Reflect",{deleteProperty:function(t,n){var r=o(i(t),n);return!(r&&!r.configurable)&&delete t[n]}})},{33:33,7:7,75:75}],214:[function(t,n,r){var e=t(33),o=t(7),i=function(t){this._t=o(t),this._i=0;var n,r=this._k=[];for(n in t)r.push(n)};t(54)(i,"Object",(function(){var t,n=this._k;do{if(this._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[this._i++])in this._t));return{value:t,done:!1}})),e(e.S,"Reflect",{enumerate:function(t){return new i(t)}})},{33:33,54:54,7:7}],215:[function(t,n,r){var e=t(75),o=t(33),i=t(7);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return e.f(i(t),n)}})},{33:33,7:7,75:75}],216:[function(t,n,r){var e=t(33),o=t(79),i=t(7);e(e.S,"Reflect",{getPrototypeOf:function(t){return o(i(t))}})},{33:33,7:7,79:79}],217:[function(t,n,r){var e=t(75),o=t(79),i=t(41),u=t(33),c=t(51),a=t(7);u(u.S,"Reflect",{get:function t(n,r){var u,f,s=arguments.length<3?n:arguments[2];return a(n)===s?n[r]:(u=e.f(n,r))?i(u,"value")?u.value:void 0!==u.get?u.get.call(s):void 0:c(f=o(n))?t(f,r,s):void 0}})},{33:33,41:41,51:51,7:7,75:75,79:79}],218:[function(t,n,r){var e=t(33);e(e.S,"Reflect",{has:function(t,n){return n in t}})},{33:33}],219:[function(t,n,r){var e=t(33),o=t(7),i=Object.isExtensible;e(e.S,"Reflect",{isExtensible:function(t){return o(t),!i||i(t)}})},{33:33,7:7}],220:[function(t,n,r){var e=t(33);e(e.S,"Reflect",{ownKeys:t(85)})},{33:33,85:85}],221:[function(t,n,r){var e=t(33),o=t(7),i=Object.preventExtensions;e(e.S,"Reflect",{preventExtensions:function(t){o(t);try{return i&&i(t),!0}catch(t){return!1}}})},{33:33,7:7}],222:[function(t,n,r){var e=t(33),o=t(99);o&&e(e.S,"Reflect",{setPrototypeOf:function(t,n){o.check(t,n);try{return o.set(t,n),!0}catch(t){return!1}}})},{33:33,99:99}],223:[function(t,n,r){var e=t(72),o=t(75),i=t(79),u=t(41),c=t(33),a=t(92),f=t(7),s=t(51);c(c.S,"Reflect",{set:function t(n,r,c){var l,h,p=arguments.length<4?n:arguments[3],v=o.f(f(n),r);if(!v){if(s(h=i(n)))return t(h,r,c,p);v=a(0)}return u(v,"value")?!(!1===v.writable||!s(p)||((l=o.f(p,r)||a(0)).value=c,e.f(p,r,l),0)):void 0!==v.set&&(v.set.call(p,c),!0)}})},{33:33,41:41,51:51,7:7,72:72,75:75,79:79,92:92}],224:[function(t,n,r){var e=t(40),o=t(45),i=t(72).f,u=t(77).f,c=t(52),a=t(37),f=e.RegExp,s=f,l=f.prototype,h=/a/g,p=/a/g,v=new f(h)!==h;if(t(29)&&(!v||t(35)((function(){return p[t(128)("match")]=!1,f(h)!=h||f(p)==p||"/a/i"!=f(h,"i")})))){f=function(t,n){var r=this instanceof f,e=c(t),i=void 0===n;return!r&&e&&t.constructor===f&&i?t:o(v?new s(e&&!i?t.source:t,n):s((e=t instanceof f)?t.source:t,e&&i?a.call(t):n),r?this:l,f)};for(var d=function(t){t in f||i(f,t,{configurable:!0,get:function(){return s[t]},set:function(n){s[t]=n}})},y=u(s),g=0;y.length>g;)d(y[g++]);l.constructor=f,f.prototype=l,t(94)(e,"RegExp",f)}t(100)("RegExp")},{100:100,128:128,29:29,35:35,37:37,40:40,45:45,52:52,72:72,77:77,94:94}],225:[function(t,n,r){t(29)&&"g"!=/./g.flags&&t(72).f(RegExp.prototype,"flags",{configurable:!0,get:t(37)})},{29:29,37:37,72:72}],226:[function(t,n,r){t(36)("match",1,(function(t,n,r){return[function(r){var e=t(this),o=null==r?void 0:r[n];return void 0!==o?o.call(r,e):new RegExp(r)[n](String(e))},r]}))},{36:36}],227:[function(t,n,r){t(36)("replace",2,(function(t,n,r){return[function(e,o){var i=t(this),u=null==e?void 0:e[n];return void 0!==u?u.call(e,i,o):r.call(String(i),e,o)},r]}))},{36:36}],228:[function(t,n,r){t(36)("search",1,(function(t,n,r){return[function(r){var e=t(this),o=null==r?void 0:r[n];return void 0!==o?o.call(r,e):new RegExp(r)[n](String(e))},r]}))},{36:36}],229:[function(t,n,r){t(36)("split",2,(function(n,r,e){var o=t(52),i=e,u=[].push,c="length";if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1)[c]||2!="ab".split(/(?:ab)*/)[c]||4!=".".split(/(.?)(.?)/)[c]||".".split(/()()/)[c]>1||"".split(/.?/)[c]){var a=void 0===/()??/.exec("")[1];e=function(t,n){var r=String(this);if(void 0===t&&0===n)return[];if(!o(t))return i.call(r,t,n);var e,f,s,l,h,p=[],v=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),d=0,y=void 0===n?4294967295:n>>>0,g=new RegExp(t.source,v+"g");for(a||(e=new RegExp("^"+g.source+"$(?!\\s)",v));(f=g.exec(r))&&!((s=f.index+f[0][c])>d&&(p.push(r.slice(d,f.index)),!a&&f[c]>1&&f[0].replace(e,(function(){for(h=1;h<arguments[c]-2;h++)void 0===arguments[h]&&(f[h]=void 0)})),f[c]>1&&f.index<r[c]&&u.apply(p,f.slice(1)),l=f[0][c],d=s,p[c]>=y));)g.lastIndex===f.index&&g.lastIndex++;return d===r[c]?!l&&g.test("")||p.push(""):p.push(r.slice(d)),p[c]>y?p.slice(0,y):p}}else"0".split(void 0,0)[c]&&(e=function(t,n){return void 0===t&&0===n?[]:i.call(this,t,n)});return[function(t,o){var i=n(this),u=null==t?void 0:t[r];return void 0!==u?u.call(t,i,o):e.call(String(i),t,o)},e]}))},{36:36,52:52}],230:[function(t,n,r){t(225);var e=t(7),o=t(37),i=t(29),u=/./.toString,c=function(n){t(94)(RegExp.prototype,"toString",n,!0)};t(35)((function(){return"/a/b"!=u.call({source:"a",flags:"b"})}))?c((function(){var t=e(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?o.call(t):void 0)})):"toString"!=u.name&&c((function(){return u.call(this)}))},{225:225,29:29,35:35,37:37,7:7,94:94}],231:[function(t,n,r){var e=t(19),o=t(125);n.exports=t(22)("Set",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return e.def(o(this,"Set"),t=0===t?0:t,t)}},e)},{125:125,19:19,22:22}],232:[function(t,n,r){t(108)("anchor",(function(t){return function(n){return t(this,"a","name",n)}}))},{108:108}],233:[function(t,n,r){t(108)("big",(function(t){return function(){return t(this,"big","","")}}))},{108:108}],234:[function(t,n,r){t(108)("blink",(function(t){return function(){return t(this,"blink","","")}}))},{108:108}],235:[function(t,n,r){t(108)("bold",(function(t){return function(){return t(this,"b","","")}}))},{108:108}],236:[function(t,n,r){var e=t(33),o=t(106)(!1);e(e.P,"String",{codePointAt:function(t){return o(this,t)}})},{106:106,33:33}],237:[function(t,n,r){var e=t(33),o=t(118),i=t(107),u="".endsWith;e(e.P+e.F*t(34)("endsWith"),"String",{endsWith:function(t){var n=i(this,t,"endsWith"),r=arguments.length>1?arguments[1]:void 0,e=o(n.length),c=void 0===r?e:Math.min(o(r),e),a=String(t);return u?u.call(n,a,c):n.slice(c-a.length,c)===a}})},{107:107,118:118,33:33,34:34}],238:[function(t,n,r){t(108)("fixed",(function(t){return function(){return t(this,"tt","","")}}))},{108:108}],239:[function(t,n,r){t(108)("fontcolor",(function(t){return function(n){return t(this,"font","color",n)}}))},{108:108}],240:[function(t,n,r){t(108)("fontsize",(function(t){return function(n){return t(this,"font","size",n)}}))},{108:108}],241:[function(t,n,r){var e=t(33),o=t(114),i=String.fromCharCode,u=String.fromCodePoint;e(e.S+e.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(t){for(var n,r=[],e=arguments.length,u=0;e>u;){if(n=+arguments[u++],o(n,1114111)!==n)throw RangeError(n+" is not a valid code point");r.push(n<65536?i(n):i(55296+((n-=65536)>>10),n%1024+56320))}return r.join("")}})},{114:114,33:33}],242:[function(t,n,r){var e=t(33),o=t(107);e(e.P+e.F*t(34)("includes"),"String",{includes:function(t){return!!~o(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},{107:107,33:33,34:34}],243:[function(t,n,r){t(108)("italics",(function(t){return function(){return t(this,"i","","")}}))},{108:108}],244:[function(t,n,r){var e=t(106)(!0);t(55)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,n=this._t,r=this._i;return r>=n.length?{value:void 0,done:!0}:(t=e(n,r),this._i+=t.length,{value:t,done:!1})}))},{106:106,55:55}],245:[function(t,n,r){t(108)("link",(function(t){return function(n){return t(this,"a","href",n)}}))},{108:108}],246:[function(t,n,r){var e=t(33),o=t(117),i=t(118);e(e.S,"String",{raw:function(t){for(var n=o(t.raw),r=i(n.length),e=arguments.length,u=[],c=0;r>c;)u.push(String(n[c++])),c<e&&u.push(String(arguments[c]));return u.join("")}})},{117:117,118:118,33:33}],247:[function(t,n,r){var e=t(33);e(e.P,"String",{repeat:t(110)})},{110:110,33:33}],248:[function(t,n,r){t(108)("small",(function(t){return function(){return t(this,"small","","")}}))},{108:108}],249:[function(t,n,r){var e=t(33),o=t(118),i=t(107),u="".startsWith;e(e.P+e.F*t(34)("startsWith"),"String",{startsWith:function(t){var n=i(this,t,"startsWith"),r=o(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),e=String(t);return u?u.call(n,e,r):n.slice(r,r+e.length)===e}})},{107:107,118:118,33:33,34:34}],250:[function(t,n,r){t(108)("strike",(function(t){return function(){return t(this,"strike","","")}}))},{108:108}],251:[function(t,n,r){t(108)("sub",(function(t){return function(){return t(this,"sub","","")}}))},{108:108}],252:[function(t,n,r){t(108)("sup",(function(t){return function(){return t(this,"sup","","")}}))},{108:108}],253:[function(t,n,r){t(111)("trim",(function(t){return function(){return t(this,3)}}))},{111:111}],254:[function(t,n,r){var e=t(40),o=t(41),i=t(29),u=t(33),c=t(94),a=t(66).KEY,f=t(35),s=t(103),l=t(101),h=t(124),p=t(128),v=t(127),d=t(126),y=t(59),g=t(32),m=t(49),b=t(7),_=t(117),S=t(120),x=t(92),w=t(71),E=t(76),O=t(75),A=t(72),M=t(81),L=O.f,P=A.f,F=E.f,j=e.Symbol,N=e.JSON,k=N&&N.stringify,T=p("_hidden"),I=p("toPrimitive"),R={}.propertyIsEnumerable,C=s("symbol-registry"),D=s("symbols"),W=s("op-symbols"),U=Object.prototype,G="function"==typeof j,V=e.QObject,B=!V||!V.prototype||!V.prototype.findChild,q=i&&f((function(){return 7!=w(P({},"a",{get:function(){return P(this,"a",{value:7}).a}})).a}))?function(t,n,r){var e=L(U,n);e&&delete U[n],P(t,n,r),e&&t!==U&&P(U,n,e)}:P,z=function(t){var n=D[t]=w(j.prototype);return n._k=t,n},H=G&&"symbol"==_typeof(j.iterator)?function(t){return"symbol"==_typeof(t)}:function(t){return t instanceof j},K=function t(n,r,e){return n===U&&t(W,r,e),b(n),r=S(r,!0),b(e),o(D,r)?(e.enumerable?(o(n,T)&&n[T][r]&&(n[T][r]=!1),e=w(e,{enumerable:x(0,!1)})):(o(n,T)||P(n,T,x(1,{})),n[T][r]=!0),q(n,r,e)):P(n,r,e)},Y=function(t,n){b(t);for(var r,e=g(n=_(n)),o=0,i=e.length;i>o;)K(t,r=e[o++],n[r]);return t},J=function(t){var n=R.call(this,t=S(t,!0));return!(this===U&&o(D,t)&&!o(W,t))&&(!(n||!o(this,t)||!o(D,t)||o(this,T)&&this[T][t])||n)},X=function(t,n){if(t=_(t),n=S(n,!0),t!==U||!o(D,n)||o(W,n)){var r=L(t,n);return!r||!o(D,n)||o(t,T)&&t[T][n]||(r.enumerable=!0),r}},$=function(t){for(var n,r=F(_(t)),e=[],i=0;r.length>i;)o(D,n=r[i++])||n==T||n==a||e.push(n);return e},Z=function(t){for(var n,r=t===U,e=F(r?W:_(t)),i=[],u=0;e.length>u;)!o(D,n=e[u++])||r&&!o(U,n)||i.push(D[n]);return i};G||(c((j=function(){if(this instanceof j)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function n(r){this===U&&n.call(W,r),o(this,T)&&o(this[T],t)&&(this[T][t]=!1),q(this,t,x(1,r))};return i&&B&&q(U,t,{configurable:!0,set:n}),z(t)}).prototype,"toString",(function(){return this._k})),O.f=X,A.f=K,t(77).f=E.f=$,t(82).f=J,t(78).f=Z,i&&!t(60)&&c(U,"propertyIsEnumerable",J,!0),v.f=function(t){return z(p(t))}),u(u.G+u.W+u.F*!G,{Symbol:j});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)p(Q[tt++]);for(var nt=M(p.store),rt=0;nt.length>rt;)d(nt[rt++]);u(u.S+u.F*!G,"Symbol",{for:function(t){return o(C,t+="")?C[t]:C[t]=j(t)},keyFor:function(t){if(H(t))return y(C,t);throw TypeError(t+" is not a symbol!")},useSetter:function(){B=!0},useSimple:function(){B=!1}}),u(u.S+u.F*!G,"Object",{create:function(t,n){return void 0===n?w(t):Y(w(t),n)},defineProperty:K,defineProperties:Y,getOwnPropertyDescriptor:X,getOwnPropertyNames:$,getOwnPropertySymbols:Z}),N&&u(u.S+u.F*(!G||f((function(){var t=j();return"[null]"!=k([t])||"{}"!=k({a:t})||"{}"!=k(Object(t))}))),"JSON",{stringify:function(t){if(void 0!==t&&!H(t)){for(var n,r,e=[t],o=1;arguments.length>o;)e.push(arguments[o++]);return"function"==typeof(n=e[1])&&(r=n),!r&&m(n)||(n=function(t,n){if(r&&(n=r.call(this,t,n)),!H(n))return n}),e[1]=n,k.apply(N,e)}}}),j.prototype[I]||t(42)(j.prototype,I,j.prototype.valueOf),l(j,"Symbol"),l(Math,"Math",!0),l(e.JSON,"JSON",!0)},{101:101,103:103,117:117,120:120,124:124,126:126,127:127,128:128,29:29,32:32,33:33,35:35,40:40,41:41,42:42,49:49,59:59,60:60,66:66,7:7,71:71,72:72,75:75,76:76,77:77,78:78,81:81,82:82,92:92,94:94}],255:[function(t,n,r){var e=t(33),o=t(123),i=t(122),u=t(7),c=t(114),a=t(118),f=t(51),s=t(40).ArrayBuffer,l=t(104),h=i.ArrayBuffer,p=i.DataView,v=o.ABV&&s.isView,d=h.prototype.slice,y=o.VIEW;e(e.G+e.W+e.F*(s!==h),{ArrayBuffer:h}),e(e.S+e.F*!o.CONSTR,"ArrayBuffer",{isView:function(t){return v&&v(t)||f(t)&&y in t}}),e(e.P+e.U+e.F*t(35)((function(){return!new h(2).slice(1,void 0).byteLength})),"ArrayBuffer",{slice:function(t,n){if(void 0!==d&&void 0===n)return d.call(u(this),t);for(var r=u(this).byteLength,e=c(t,r),o=c(void 0===n?r:n,r),i=new(l(this,h))(a(o-e)),f=new p(this),s=new p(i),v=0;e<o;)s.setUint8(v++,f.getUint8(e++));return i}}),t(100)("ArrayBuffer")},{100:100,104:104,114:114,118:118,122:122,123:123,33:33,35:35,40:40,51:51,7:7}],256:[function(t,n,r){var e=t(33);e(e.G+e.W+e.F*!t(123).ABV,{DataView:t(122).DataView})},{122:122,123:123,33:33}],257:[function(t,n,r){t(121)("Float32",4,(function(t){return function(n,r,e){return t(this,n,r,e)}}))},{121:121}],258:[function(t,n,r){t(121)("Float64",8,(function(t){return function(n,r,e){return t(this,n,r,e)}}))},{121:121}],259:[function(t,n,r){t(121)("Int16",2,(function(t){return function(n,r,e){return t(this,n,r,e)}}))},{121:121}],260:[function(t,n,r){t(121)("Int32",4,(function(t){return function(n,r,e){return t(this,n,r,e)}}))},{121:121}],261:[function(t,n,r){t(121)("Int8",1,(function(t){return function(n,r,e){return t(this,n,r,e)}}))},{121:121}],262:[function(t,n,r){t(121)("Uint16",2,(function(t){return function(n,r,e){return t(this,n,r,e)}}))},{121:121}],263:[function(t,n,r){t(121)("Uint32",4,(function(t){return function(n,r,e){return t(this,n,r,e)}}))},{121:121}],264:[function(t,n,r){t(121)("Uint8",1,(function(t){return function(n,r,e){return t(this,n,r,e)}}))},{121:121}],265:[function(t,n,r){t(121)("Uint8",1,(function(t){return function(n,r,e){return t(this,n,r,e)}}),!0)},{121:121}],266:[function(t,n,r){var e,o=t(12)(0),i=t(94),u=t(66),c=t(70),a=t(21),f=t(51),s=t(35),l=t(125),h=u.getWeak,p=Object.isExtensible,v=a.ufstore,d={},y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},g={get:function(t){if(f(t)){var n=h(t);return!0===n?v(l(this,"WeakMap")).get(t):n?n[this._i]:void 0}},set:function(t,n){return a.def(l(this,"WeakMap"),t,n)}},m=n.exports=t(22)("WeakMap",y,g,a,!0,!0);s((function(){return 7!=(new m).set((Object.freeze||Object)(d),7).get(d)}))&&(c((e=a.getConstructor(y,"WeakMap")).prototype,g),u.NEED=!0,o(["delete","has","get","set"],(function(t){var n=m.prototype,r=n[t];i(n,t,(function(n,o){if(f(n)&&!p(n)){this._f||(this._f=new e);var i=this._f[t](n,o);return"set"==t?this:i}return r.call(this,n,o)}))})))},{12:12,125:125,21:21,22:22,35:35,51:51,66:66,70:70,94:94}],267:[function(t,n,r){var e=t(21),o=t(125);t(22)("WeakSet",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return e.def(o(this,"WeakSet"),t,!0)}},e,!1,!0)},{125:125,21:21,22:22}],268:[function(t,n,r){var e=t(33),o=t(38),i=t(119),u=t(118),c=t(3),a=t(15);e(e.P,"Array",{flatMap:function(t){var n,r,e=i(this);return c(t),n=u(e.length),r=a(e,0),o(r,e,e,n,0,1,t,arguments[1]),r}}),t(5)("flatMap")},{118:118,119:119,15:15,3:3,33:33,38:38,5:5}],269:[function(t,n,r){var e=t(33),o=t(38),i=t(119),u=t(118),c=t(116),a=t(15);e(e.P,"Array",{flatten:function(){var t=arguments[0],n=i(this),r=u(n.length),e=a(n,0);return o(e,n,n,r,0,void 0===t?1:c(t)),e}}),t(5)("flatten")},{116:116,118:118,119:119,15:15,33:33,38:38,5:5}],270:[function(t,n,r){var e=t(33),o=t(11)(!0);e(e.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),t(5)("includes")},{11:11,33:33,5:5}],271:[function(t,n,r){var e=t(33),o=t(68)(),i=t(40).process,u="process"==t(18)(i);e(e.G,{asap:function(t){var n=u&&i.domain;o(n?n.bind(t):t)}})},{18:18,33:33,40:40,68:68}],272:[function(t,n,r){var e=t(33),o=t(18);e(e.S,"Error",{isError:function(t){return"Error"===o(t)}})},{18:18,33:33}],273:[function(t,n,r){var e=t(33);e(e.G,{global:t(40)})},{33:33,40:40}],274:[function(t,n,r){t(97)("Map")},{97:97}],275:[function(t,n,r){t(98)("Map")},{98:98}],276:[function(t,n,r){var e=t(33);e(e.P+e.R,"Map",{toJSON:t(20)("Map")})},{20:20,33:33}],277:[function(t,n,r){var e=t(33);e(e.S,"Math",{clamp:function(t,n,r){return Math.min(r,Math.max(n,t))}})},{33:33}],278:[function(t,n,r){var e=t(33);e(e.S,"Math",{DEG_PER_RAD:Math.PI/180})},{33:33}],279:[function(t,n,r){var e=t(33),o=180/Math.PI;e(e.S,"Math",{degrees:function(t){return t*o}})},{33:33}],280:[function(t,n,r){var e=t(33),o=t(64),i=t(62);e(e.S,"Math",{fscale:function(t,n,r,e,u){return i(o(t,n,r,e,u))}})},{33:33,62:62,64:64}],281:[function(t,n,r){var e=t(33);e(e.S,"Math",{iaddh:function(t,n,r,e){var o=t>>>0,i=r>>>0;return(n>>>0)+(e>>>0)+((o&i|(o|i)&~(o+i>>>0))>>>31)|0}})},{33:33}],282:[function(t,n,r){var e=t(33);e(e.S,"Math",{imulh:function(t,n){var r=+t,e=+n,o=65535&r,i=65535&e,u=r>>16,c=e>>16,a=(u*i>>>0)+(o*i>>>16);return u*c+(a>>16)+((o*c>>>0)+(65535&a)>>16)}})},{33:33}],283:[function(t,n,r){var e=t(33);e(e.S,"Math",{isubh:function(t,n,r,e){var o=t>>>0,i=r>>>0;return(n>>>0)-(e>>>0)-((~o&i|~(o^i)&o-i>>>0)>>>31)|0}})},{33:33}],284:[function(t,n,r){var e=t(33);e(e.S,"Math",{RAD_PER_DEG:180/Math.PI})},{33:33}],285:[function(t,n,r){var e=t(33),o=Math.PI/180;e(e.S,"Math",{radians:function(t){return t*o}})},{33:33}],286:[function(t,n,r){var e=t(33);e(e.S,"Math",{scale:t(64)})},{33:33,64:64}],287:[function(t,n,r){var e=t(33);e(e.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},{33:33}],288:[function(t,n,r){var e=t(33);e(e.S,"Math",{umulh:function(t,n){var r=+t,e=+n,o=65535&r,i=65535&e,u=r>>>16,c=e>>>16,a=(u*i>>>0)+(o*i>>>16);return u*c+(a>>>16)+((o*c>>>0)+(65535&a)>>>16)}})},{33:33}],289:[function(t,n,r){var e=t(33),o=t(119),i=t(3),u=t(72);t(29)&&e(e.P+t(74),"Object",{__defineGetter__:function(t,n){u.f(o(this),t,{get:i(n),enumerable:!0,configurable:!0})}})},{119:119,29:29,3:3,33:33,72:72,74:74}],290:[function(t,n,r){var e=t(33),o=t(119),i=t(3),u=t(72);t(29)&&e(e.P+t(74),"Object",{__defineSetter__:function(t,n){u.f(o(this),t,{set:i(n),enumerable:!0,configurable:!0})}})},{119:119,29:29,3:3,33:33,72:72,74:74}],291:[function(t,n,r){var e=t(33),o=t(84)(!0);e(e.S,"Object",{entries:function(t){return o(t)}})},{33:33,84:84}],292:[function(t,n,r){var e=t(33),o=t(85),i=t(117),u=t(75),c=t(24);e(e.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,r,e=i(t),a=u.f,f=o(e),s={},l=0;f.length>l;)void 0!==(r=a(e,n=f[l++]))&&c(s,n,r);return s}})},{117:117,24:24,33:33,75:75,85:85}],293:[function(t,n,r){var e=t(33),o=t(119),i=t(120),u=t(79),c=t(75).f;t(29)&&e(e.P+t(74),"Object",{__lookupGetter__:function(t){var n,r=o(this),e=i(t,!0);do{if(n=c(r,e))return n.get}while(r=u(r))}})},{119:119,120:120,29:29,33:33,74:74,75:75,79:79}],294:[function(t,n,r){var e=t(33),o=t(119),i=t(120),u=t(79),c=t(75).f;t(29)&&e(e.P+t(74),"Object",{__lookupSetter__:function(t){var n,r=o(this),e=i(t,!0);do{if(n=c(r,e))return n.set}while(r=u(r))}})},{119:119,120:120,29:29,33:33,74:74,75:75,79:79}],295:[function(t,n,r){var e=t(33),o=t(84)(!1);e(e.S,"Object",{values:function(t){return o(t)}})},{33:33,84:84}],296:[function(t,n,r){var e=t(33),o=t(40),i=t(23),u=t(68)(),c=t(128)("observable"),a=t(3),f=t(7),s=t(6),l=t(93),h=t(42),p=t(39),v=p.RETURN,d=function(t){return null==t?void 0:a(t)},y=function(t){var n=t._c;n&&(t._c=void 0,n())},g=function(t){return void 0===t._o},m=function(t){g(t)||(t._o=void 0,y(t))},b=function(t,n){f(t),this._c=void 0,this._o=t,t=new _(this);try{var r=n(t),e=r;null!=r&&("function"==typeof r.unsubscribe?r=function(){e.unsubscribe()}:a(r),this._c=r)}catch(n){return void t.error(n)}g(this)&&y(this)};b.prototype=l({},{unsubscribe:function(){m(this)}});var _=function(t){this._s=t};_.prototype=l({},{next:function(t){var n=this._s;if(!g(n)){var r=n._o;try{var e=d(r.next);if(e)return e.call(r,t)}catch(t){try{m(n)}finally{throw t}}}},error:function(t){var n=this._s;if(g(n))throw t;var r=n._o;n._o=void 0;try{var e=d(r.error);if(!e)throw t;t=e.call(r,t)}catch(t){try{y(n)}finally{throw t}}return y(n),t},complete:function(t){var n=this._s;if(!g(n)){var r=n._o;n._o=void 0;try{var e=d(r.complete);t=e?e.call(r,t):void 0}catch(t){try{y(n)}finally{throw t}}return y(n),t}}});var S=function t(n){s(this,t,"Observable","_f")._f=a(n)};l(S.prototype,{subscribe:function(t){return new b(t,this._f)},forEach:function(t){var n=this;return new(i.Promise||o.Promise)((function(r,e){a(t);var o=n.subscribe({next:function(n){try{return t(n)}catch(t){e(t),o.unsubscribe()}},error:e,complete:r})}))}}),l(S,{from:function(t){var n="function"==typeof this?this:S,r=d(f(t)[c]);if(r){var e=f(r.call(t));return e.constructor===n?e:new n((function(t){return e.subscribe(t)}))}return new n((function(n){var r=!1;return u((function(){if(!r){try{if(p(t,!1,(function(t){if(n.next(t),r)return v}))===v)return}catch(t){if(r)throw t;return void n.error(t)}n.complete()}})),function(){r=!0}}))},of:function(){for(var t=0,n=arguments.length,r=Array(n);t<n;)r[t]=arguments[t++];return new("function"==typeof this?this:S)((function(t){var n=!1;return u((function(){if(!n){for(var e=0;e<r.length;++e)if(t.next(r[e]),n)return;t.complete()}})),function(){n=!0}}))}}),h(S.prototype,c,(function(){return this})),e(e.G,{Observable:S}),t(100)("Observable")},{100:100,128:128,23:23,3:3,33:33,39:39,40:40,42:42,6:6,68:68,7:7,93:93}],297:[function(t,n,r){var e=t(33),o=t(23),i=t(40),u=t(104),c=t(91);e(e.P+e.R,"Promise",{finally:function(t){var n=u(this,o.Promise||i.Promise),r="function"==typeof t;return this.then(r?function(r){return c(n,t()).then((function(){return r}))}:t,r?function(r){return c(n,t()).then((function(){throw r}))}:t)}})},{104:104,23:23,33:33,40:40,91:91}],298:[function(t,n,r){var e=t(33),o=t(69),i=t(90);e(e.S,"Promise",{try:function(t){var n=o.f(this),r=i(t);return(r.e?n.reject:n.resolve)(r.v),n.promise}})},{33:33,69:69,90:90}],299:[function(t,n,r){var e=t(67),o=t(7),i=e.key,u=e.set;e.exp({defineMetadata:function(t,n,r,e){u(t,n,o(r),i(e))}})},{67:67,7:7}],300:[function(t,n,r){var e=t(67),o=t(7),i=e.key,u=e.map,c=e.store;e.exp({deleteMetadata:function(t,n){var r=arguments.length<3?void 0:i(arguments[2]),e=u(o(n),r,!1);if(void 0===e||!e.delete(t))return!1;if(e.size)return!0;var a=c.get(n);return a.delete(r),!!a.size||c.delete(n)}})},{67:67,7:7}],301:[function(t,n,r){var e=t(231),o=t(10),i=t(67),u=t(7),c=t(79),a=i.keys,f=i.key,s=function t(n,r){var i=a(n,r),u=c(n);if(null===u)return i;var f=t(u,r);return f.length?i.length?o(new e(i.concat(f))):f:i};i.exp({getMetadataKeys:function(t){return s(u(t),arguments.length<2?void 0:f(arguments[1]))}})},{10:10,231:231,67:67,7:7,79:79}],302:[function(t,n,r){var e=t(67),o=t(7),i=t(79),u=e.has,c=e.get,a=e.key,f=function t(n,r,e){if(u(n,r,e))return c(n,r,e);var o=i(r);return null!==o?t(n,o,e):void 0};e.exp({getMetadata:function(t,n){return f(t,o(n),arguments.length<3?void 0:a(arguments[2]))}})},{67:67,7:7,79:79}],303:[function(t,n,r){var e=t(67),o=t(7),i=e.keys,u=e.key;e.exp({getOwnMetadataKeys:function(t){return i(o(t),arguments.length<2?void 0:u(arguments[1]))}})},{67:67,7:7}],304:[function(t,n,r){var e=t(67),o=t(7),i=e.get,u=e.key;e.exp({getOwnMetadata:function(t,n){return i(t,o(n),arguments.length<3?void 0:u(arguments[2]))}})},{67:67,7:7}],305:[function(t,n,r){var e=t(67),o=t(7),i=t(79),u=e.has,c=e.key,a=function t(n,r,e){if(u(n,r,e))return!0;var o=i(r);return null!==o&&t(n,o,e)};e.exp({hasMetadata:function(t,n){return a(t,o(n),arguments.length<3?void 0:c(arguments[2]))}})},{67:67,7:7,79:79}],306:[function(t,n,r){var e=t(67),o=t(7),i=e.has,u=e.key;e.exp({hasOwnMetadata:function(t,n){return i(t,o(n),arguments.length<3?void 0:u(arguments[2]))}})},{67:67,7:7}],307:[function(t,n,r){var e=t(67),o=t(7),i=t(3),u=e.key,c=e.set;e.exp({metadata:function(t,n){return function(r,e){c(t,n,(void 0!==e?o:i)(r),u(e))}}})},{3:3,67:67,7:7}],308:[function(t,n,r){t(97)("Set")},{97:97}],309:[function(t,n,r){t(98)("Set")},{98:98}],310:[function(t,n,r){var e=t(33);e(e.P+e.R,"Set",{toJSON:t(20)("Set")})},{20:20,33:33}],311:[function(t,n,r){var e=t(33),o=t(106)(!0);e(e.P,"String",{at:function(t){return o(this,t)}})},{106:106,33:33}],312:[function(t,n,r){var e=t(33),o=t(28),i=t(118),u=t(52),c=t(37),a=RegExp.prototype,f=function(t,n){this._r=t,this._s=n};t(54)(f,"RegExp String",(function(){var t=this._r.exec(this._s);return{value:t,done:null===t}})),e(e.P,"String",{matchAll:function(t){if(o(this),!u(t))throw TypeError(t+" is not a regexp!");var n=String(this),r="flags"in a?String(t.flags):c.call(t),e=new RegExp(t.source,~r.indexOf("g")?r:"g"+r);return e.lastIndex=i(t.lastIndex),new f(e,n)}})},{118:118,28:28,33:33,37:37,52:52,54:54}],313:[function(t,n,r){var e=t(33),o=t(109);e(e.P,"String",{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},{109:109,33:33}],314:[function(t,n,r){var e=t(33),o=t(109);e(e.P,"String",{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},{109:109,33:33}],315:[function(t,n,r){t(111)("trimLeft",(function(t){return function(){return t(this,1)}}),"trimStart")},{111:111}],316:[function(t,n,r){t(111)("trimRight",(function(t){return function(){return t(this,2)}}),"trimEnd")},{111:111}],317:[function(t,n,r){t(126)("asyncIterator")},{126:126}],318:[function(t,n,r){t(126)("observable")},{126:126}],319:[function(t,n,r){var e=t(33);e(e.S,"System",{global:t(40)})},{33:33,40:40}],320:[function(t,n,r){t(97)("WeakMap")},{97:97}],321:[function(t,n,r){t(98)("WeakMap")},{98:98}],322:[function(t,n,r){t(97)("WeakSet")},{97:97}],323:[function(t,n,r){t(98)("WeakSet")},{98:98}],324:[function(t,n,r){for(var e=t(141),o=t(81),i=t(94),u=t(40),c=t(42),a=t(58),f=t(128),s=f("iterator"),l=f("toStringTag"),h=a.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},v=o(p),d=0;d<v.length;d++){var y,g=v[d],m=p[g],b=u[g],_=b&&b.prototype;if(_&&(_[s]||c(_,s,h),_[l]||c(_,l,g),a[g]=h,m))for(y in e)_[y]||i(_,y,e[y],!0)}},{128:128,141:141,40:40,42:42,58:58,81:81,94:94}],325:[function(t,n,r){var e=t(33),o=t(113);e(e.G+e.B,{setImmediate:o.set,clearImmediate:o.clear})},{113:113,33:33}],326:[function(t,n,r){var e=t(40),o=t(33),i=t(46),u=t(88),c=e.navigator,a=!!c&&/MSIE .\./.test(c.userAgent),f=function(t){return a?function(n,r){return t(i(u,[].slice.call(arguments,2),"function"==typeof n?n:Function(n)),r)}:t};o(o.G+o.B+o.F*a,{setTimeout:f(e.setTimeout),setInterval:f(e.setInterval)})},{33:33,40:40,46:46,88:88}],327:[function(t,n,r){t(254),t(191),t(193),t(192),t(195),t(197),t(202),t(196),t(194),t(204),t(203),t(199),t(200),t(198),t(190),t(201),t(205),t(206),t(157),t(159),t(158),t(208),t(207),t(178),t(188),t(189),t(179),t(180),t(181),t(182),t(183),t(184),t(185),t(186),t(187),t(161),t(162),t(163),t(164),t(165),t(166),t(167),t(168),t(169),t(170),t(171),t(172),t(173),t(174),t(175),t(176),t(177),t(241),t(246),t(253),t(244),t(236),t(237),t(242),t(247),t(249),t(232),t(233),t(234),t(235),t(238),t(239),t(240),t(243),t(245),t(248),t(250),t(251),t(252),t(152),t(154),t(153),t(156),t(155),t(140),t(138),t(145),t(142),t(148),t(150),t(137),t(144),t(134),t(149),t(132),t(147),t(146),t(139),t(143),t(131),t(133),t(136),t(135),t(151),t(141),t(224),t(230),t(225),t(226),t(227),t(228),t(229),t(209),t(160),t(231),t(266),t(267),t(255),t(256),t(261),t(264),t(265),t(259),t(262),t(260),t(263),t(257),t(258),t(210),t(211),t(212),t(213),t(214),t(217),t(215),t(216),t(218),t(219),t(220),t(221),t(223),t(222),t(270),t(268),t(269),t(311),t(314),t(313),t(315),t(316),t(312),t(317),t(318),t(292),t(295),t(291),t(289),t(290),t(293),t(294),t(276),t(310),t(275),t(309),t(321),t(323),t(274),t(308),t(320),t(322),t(273),t(319),t(272),t(277),t(278),t(279),t(280),t(281),t(283),t(282),t(284),t(285),t(286),t(288),t(287),t(297),t(298),t(299),t(300),t(302),t(301),t(304),t(303),t(305),t(306),t(307),t(271),t(296),t(326),t(325),t(324),n.exports=t(23)},{131:131,132:132,133:133,134:134,135:135,136:136,137:137,138:138,139:139,140:140,141:141,142:142,143:143,144:144,145:145,146:146,147:147,148:148,149:149,150:150,151:151,152:152,153:153,154:154,155:155,156:156,157:157,158:158,159:159,160:160,161:161,162:162,163:163,164:164,165:165,166:166,167:167,168:168,169:169,170:170,171:171,172:172,173:173,174:174,175:175,176:176,177:177,178:178,179:179,180:180,181:181,182:182,183:183,184:184,185:185,186:186,187:187,188:188,189:189,190:190,191:191,192:192,193:193,194:194,195:195,196:196,197:197,198:198,199:199,200:200,201:201,202:202,203:203,204:204,205:205,206:206,207:207,208:208,209:209,210:210,211:211,212:212,213:213,214:214,215:215,216:216,217:217,218:218,219:219,220:220,221:221,222:222,223:223,224:224,225:225,226:226,227:227,228:228,229:229,23:23,230:230,231:231,232:232,233:233,234:234,235:235,236:236,237:237,238:238,239:239,240:240,241:241,242:242,243:243,244:244,245:245,246:246,247:247,248:248,249:249,250:250,251:251,252:252,253:253,254:254,255:255,256:256,257:257,258:258,259:259,260:260,261:261,262:262,263:263,264:264,265:265,266:266,267:267,268:268,269:269,270:270,271:271,272:272,273:273,274:274,275:275,276:276,277:277,278:278,279:279,280:280,281:281,282:282,283:283,284:284,285:285,286:286,287:287,288:288,289:289,290:290,291:291,292:292,293:293,294:294,295:295,296:296,297:297,298:298,299:299,300:300,301:301,302:302,303:303,304:304,305:305,306:306,307:307,308:308,309:309,310:310,311:311,312:312,313:313,314:314,315:315,316:316,317:317,318:318,319:319,320:320,321:321,322:322,323:323,324:324,325:325,326:326}],328:[function(t,n,r){(function(t){!function(t){var r=Object.prototype,e=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",u=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag",a="object"==_typeof(n),f=t.regeneratorRuntime;if(f)a&&(n.exports=f);else{(f=t.regeneratorRuntime=a?n.exports:{}).wrap=d;var s={},l={};l[i]=function(){return this};var h=Object.getPrototypeOf,p=h&&h(h(A([])));p&&p!==r&&e.call(p,i)&&(l=p);var v=b.prototype=g.prototype=Object.create(l);m.prototype=v.constructor=b,b.constructor=m,b[c]=m.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===m||"GeneratorFunction"===(n.displayName||n.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(v),t},f.awrap=function(t){return{__await:t}},_(S.prototype),S.prototype[u]=function(){return this},f.AsyncIterator=S,f.async=function(t,n,r,e){var o=new S(d(t,n,r,e));return f.isGeneratorFunction(n)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},_(v),v[c]="Generator",v[i]=function(){return this},v.toString=function(){return"[object Generator]"},f.keys=function(t){var n=[];for(var r in t)n.push(r);return n.reverse(),function r(){for(;n.length;){var e=n.pop();if(e in t)return r.value=e,r.done=!1,r}return r.done=!0,r}},f.values=A,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!t)for(var n in this)"t"===n.charAt(0)&&e.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(r,e){return u.type="throw",u.arg=t,n.next=r,e&&(n.method="next",n.arg=void 0),!!e}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],u=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=e.call(i,"catchLoc"),a=e.call(i,"finallyLoc");if(c&&a){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=t,u.arg=n,i?(this.method="next",this.next=i.finallyLoc,s):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),s},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),E(r),s}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc===t){var e=r.completion;if("throw"===e.type){var o=e.arg;E(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:A(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=void 0),s}}}function d(t,n,r,e){var o=n&&n.prototype instanceof g?n:g,i=Object.create(o.prototype),u=new O(e||[]);return i._invoke=function(t,n,r){var e="suspendedStart";return function(o,i){if("executing"===e)throw new Error("Generator is already running");if("completed"===e){if("throw"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var u=r.delegate;if(u){var c=x(u,r);if(c){if(c===s)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===e)throw e="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);e="executing";var a=y(t,n,r);if("normal"===a.type){if(e=r.done?"completed":"suspendedYield",a.arg===s)continue;return{value:a.arg,done:r.done}}"throw"===a.type&&(e="completed",r.method="throw",r.arg=a.arg)}}}(t,r,u),i}function y(t,n,r){try{return{type:"normal",arg:t.call(n,r)}}catch(t){return{type:"throw",arg:t}}}function g(){}function m(){}function b(){}function _(t){["next","throw","return"].forEach((function(n){t[n]=function(t){return this._invoke(n,t)}}))}function S(n){function r(t,o,i,u){var c=y(n[t],n,o);if("throw"!==c.type){var a=c.arg,f=a.value;return f&&"object"==_typeof(f)&&e.call(f,"__await")?Promise.resolve(f.__await).then((function(t){r("next",t,i,u)}),(function(t){r("throw",t,i,u)})):Promise.resolve(f).then((function(t){a.value=t,i(a)}),u)}u(c.arg)}var o;"object"==_typeof(t.process)&&t.process.domain&&(r=t.process.domain.bind(r)),this._invoke=function(t,n){function e(){return new Promise((function(e,o){r(t,n,e,o)}))}return o=o?o.then(e,e):e()}}function x(t,n){var r=t.iterator[n.method];if(void 0===r){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=void 0,x(t,n),"throw"===n.method))return s;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return s}var e=y(r,t.iterator,n.arg);if("throw"===e.type)return n.method="throw",n.arg=e.arg,n.delegate=null,s;var o=e.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,s):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,s)}function w(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function E(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(w,this),this.reset(!0)}function A(t){if(t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function n(){for(;++r<t.length;)if(e.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:M}}function M(){return{value:void 0,done:!0}}}("object"==_typeof(t)?t:"object"==("undefined"==typeof window?"undefined":_typeof(window))?window:"object"==("undefined"==typeof self?"undefined":_typeof(self))?self:this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1]),document.addEventListener("DOMContentLoaded",(function(){var t=function(){return!!window.MSInputMethodContext&&!!document.documentMode},n=function(){return document.body.offsetWidth<768};if(t()){var r=document.createElement("script");r.type="text/javascript",r.src="js/libs.min.js",document.getElementsByTagName("head")[0].appendChild(r),r.onload=function(){!function(){var t=function(t){var n=document.createElement("img");return n.className=t.className,n.setAttribute("src",t.src),n.setAttribute("width",t.width),n.setAttribute("height",t.height),n.setAttribute("alt",t.alt||""),n.setAttribute("data-polyclip",t.polyclip),t.container.appendChild(n),n},r=function(t){var n=document.createElement("div");return n.className=t.className,t.container.appendChild(n),n},e=document.querySelector(".range__scale");e.innerHTML="",e.classList.add("polyfill");var o=document.createElement("div");o.className="polyfill__upper";var i=document.createElement("div");i.className="polyfill__bottom",e.appendChild(o),e.appendChild(i),t({src:"images/gradient.png",width:"768",height:"11",alt:"",polyclip:"100%, 0, 100%, 100%, 0%, 100%",className:"plyfill__img",container:o}),t({src:"images/gray.png",width:"768",height:"11",alt:"",polyclip:"100%, 0, 100%, 100%, 0%, 100%",className:"polyfill__img",container:i}),r({className:"polyfill__upper-bottom",container:o}),r({className:"polyfill__bottom-bottom",container:i});var u=document.querySelector(".range__control");setTimeout((function(){return o.style.maxWidth=document.querySelector("[data-range]").dataset.rangeStart+"%"}),1e3),window.setValues=function(t,n,r){o.style.maxWidth=n+"px","up"===t?(u.style.left=n+"px",n+=r):"down"===t&&(u.style.left=n+"px",n-=r)},console.log(n())}()}}_toConsumableArray(document.querySelectorAll("[data-placeholder]")).forEach((function(t){return function(t){var n=t.dataset.placeholder;if(void 0!==n){var r=document.createElement("label");r.for=t.name,r.textContent=n,r.classList.add("floating-placeholder"),t.parentElement.insertBefore(r,t.parentElement.childNodes[0]),t.placeholderEl=r,""!==t.value&&(r.classList.add("focus"),t.classList.add("has-value")),t.addEventListener("focus",(function(t){r.classList.add("focus")})),t.addEventListener("blur",(function(n){void 0===t.value||""===t.value?(r.classList.remove("focus"),t.classList.remove("has-value")):t.classList.add("has-value")}))}}(t)})),function(){var t=document.querySelector("[data-select-year]");t.classList.add("birthyear-select");var n=document.createElement("img");n.src="images/svg/expand-list.svg",n.alt="expand-birthyear-list",n.classList.add("birthyear-select__icon"),t.insertBefore(n,t.childNodes[0]);var r=t.querySelector("input");r.classList.add("birthyear-select__input"),r.readOnly="readonly";var e=document.createElement("ul");e.classList.add("birthyear-select__list");for(var o=t.dataset.yearStart||1970,i=function(t){var n=document.createElement("li");n.classList.add("birthyear-select__list-item"),n.textContent=t,n.onclick=function(n){r.value=t,r.classList.add("has-value"),r.placeholderEl.classList.add("focus")},e.appendChild(n)},u=t.dataset.yearEnd||2003;u>=o;u--)i(u);t.insertBefore(e,t.childNodes[0]);var c=function(t){t.preventDefault(),n.classList.add("birthyear-select__icon-rotated"),e.classList.add("shown")},a=function(t){n.classList.remove("birthyear-select__icon-rotated"),e.classList.remove("shown")};r.addEventListener("focus",(function(t){return c(t)})),n.addEventListener("focus",(function(t){return c(t)})),n.addEventListener("blur",(function(t){return a()})),r.addEventListener("blur",(function(t){return a()}))}(),_toConsumableArray(document.querySelectorAll("[data-custom-checkbox]")).forEach((function(t){return function(t){var n=t.parentElement;t.hidden="hidden";var r=t.id||function(){var n=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:7;return Math.random().toString(36).substring(t)}();return t.setAttribute("id",n),n}(),e=document.createElement("span");e.classList.add("custom-checkbox"),e.setAttribute("tabIndex","0");var o=document.createElement("img");o.src="images/svg/checked.svg",o.alt="",o.classList.add("custom-checkbox__indicator"),e.checked=!1,e.appendChild(o);var i=document.createElement("label");i.setAttribute("for",r),i.className="custom-checkbox__label",i.textContent=t.dataset.label,!0===t.checked&&(e.classList.add("custom-checkbox--checked"),o.classList.add("custom-checkbox__indicator--visible")),e.addEventListener("click",(function(){var n=e.checked;n?(e.classList.remove("custom-checkbox--checked"),o.classList.remove("custom-checkbox__indicator--visible"),t.setAttribute("checked",!1)):(e.classList.add("custom-checkbox--checked"),o.classList.add("custom-checkbox__indicator--visible"),t.setAttribute("checked",!0)),e.checked=!n})),n.appendChild(e),n.appendChild(i)}(t)})),function(){var r=function(t,n){return n/100*t},e=function(t,n){var r,e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:50,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;if(null!==i)r=i;else{var c=n.getBoundingClientRect();r=t.pageX-c.left}var a=r,f=u.style.left.replace("px",""),s=a>f?"up":"down",h=setTimeout((function t(){window.setValues?window.setValues(s,r,e):l(s,r,e);var n=r;n===a?(clearTimeout(h),d.current=n,y.current=n):h=setTimeout(t,o)}),o)},o=new Map([[0,{dashes:7,markerHeight:0,ie11Top:21}],[24,{dashes:6,markerHeight:6,ie11Top:7}],[50,{dashes:5,markerHeight:9,ie11Top:5}],[75,{dashes:4,markerHeight:11,ie11Top:5}],[100,{dashes:3,markerHeight:14,ie11Top:23}]]),i=document.querySelector("[data-range]"),u=i.querySelector(".range__control"),c=i.querySelector(".range__control-container"),a=(document.querySelectorAll(".range__gradient"),document.querySelectorAll(".range__gradient-fill")),f=i.dataset.rangeStart,s=i.querySelector(".range__scale-top").offsetWidth;!function(e){var o=i.querySelector(".range__points");t()&&(o.style["align-items"]="flex-start"),_toConsumableArray(i.querySelectorAll("[data-point]")).forEach((function(o){var i="",u="",c="",a=r(o.dataset.point,s);a===s?(o.classList.add("range__point--right"),n()&&setTimeout((function(){o.style.right="0",o.style.left=a+2+"px",o.style.top="44px",o.querySelector(".range__point-text ").style.cssText="position: absolute; left: -152px; ;width:180px;"+(t()?"top:-20px":"top:0px")})),i="range__point-orientation--right",u="range__point-text--right",c="range__point-marker--right"):o.style.left=a+"px";var f=document.createElement("div");f.className="range__point-orientation "+i;var l=function(t,n){t=Number(t);var r=n.get(t);return r&&n.set(t,_objectSpread(_objectSpread({},r),{},{isUsed:!0})),r}(o.dataset.point,e),h=l.dashes,p=l.markerHeight,v=l.ie11Top;t()&&(o.style.top=v+"px");var d=document.createElement("div");d.className="range__point-dashes",d.style.height=2*h+"px";for(var y=0;y<h;y++){var g=document.createElement("span");g.className="range__point-dash",d.appendChild(g)}f.appendChild(d);var m=document.createElement("div");m.className="range__point-marker "+c,m.style.height=p+"px",f.appendChild(m);var b=document.createElement("p");b.className="range__point-text "+u,b.textContent=o.dataset.text,o.appendChild(b),o.appendChild(f)}))}(o);var l=function(t,n,r){console.log(n),_toConsumableArray(a).forEach((function(t){t.style.width=s-n+"px"})),"up"===t?(u.style.left=n+"px",n+=r):"down"===t&&(u.style.left=n+"px",n-=r)},h=function(t,n,r){var o,i=[];r.reduce((function(t,r){var e=r-n;return i.push({value:e,absValue:Math.abs(e),point:r}),r}),r[0]),[].concat(i).forEach((function(t){(void 0===o||t.absValue<o.absValue)&&(o=t)})),setTimeout((function(){return e(null,null,1,400,o.point)}),200)},p=function(t,n){return _toConsumableArray(t).map((function(t){return r(t,n)}))},v=function(t){var n,r=_createForOfIteratorHelper(t);try{for(r.s();!(n=r.n()).done;){var e=n.value;void 0===e[1].isUsed&&t.delete(e[0])}}catch(t){r.e(t)}finally{r.f()}return t},d=function t(n){var r=function(t){e(t,c)};i.addEventListener("mouseout",(function(t){setTimeout((function(){t.target===i&&c.removeEventListener("mousemove",r)}))})),c.addEventListener("mousemove",r),c.addEventListener("mouseup",(function n(e){c.removeEventListener("mousemove",r),setTimeout((function(){c.removeEventListener("mouseup",n),h(0,t.current,p(v(o).keys(),s))}))}))},y=function(t){var n=t.changedTouches[0].pageX+i.scrollLeft;e(null,null,1,50,n)};u.addEventListener("mousedown",d),i.addEventListener("touchmove",y),i.addEventListener("touchstart",y),i.addEventListener("touchend",(function(t){h(0,y.current,p(v(o).keys(),s))})),function(){var t=r(f,s);u.style.setProperty("left",t+"px"),_toConsumableArray(a).forEach((function(n){return n.style.setProperty("width",t+"px")}))}()}(),function(){var t=document.querySelector(".menu-hamburger"),n=t.firstElementChild,r=n.nextElementSibling,e=document.querySelector(".menu__list"),o=document.querySelectorAll(".menu__item"),i=e.querySelectorAll(".menu__link"),u=function(){t.classList.add("x"),n.classList.add("collapse"),r.classList.add("collapse"),setTimeout((function(){n.classList.add("rotate"),r.classList.add("rotate"),n.classList.remove("collapse"),r.classList.remove("collapse")}),200),setTimeout((function(){return e.classList.add("menu__list--visible")}),200)},c=function(){t.classList.remove("x"),n.classList.add("collapse"),r.classList.add("collapse"),n.classList.remove("rotate"),r.classList.remove("rotate"),setTimeout((function(){n.classList.remove("collapse"),r.classList.remove("collapse")}),200),setTimeout((function(){return e.classList.remove("menu__list--visible")}),200)};t.addEventListener("click",(function(t){return e.classList.contains("menu__list--visible")?c():u()})),_toConsumableArray(i).forEach((function(t){t.addEventListener("click",(function(){c(),_toConsumableArray(o).forEach((function(t){return t.classList.remove("active")})),t.parentNode.classList.add("active")}))}))}()}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJvIiwiYWxsb3dBcnJheUxpa2UiLCJpdCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiQXJyYXkiLCJpc0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibGVuZ3RoIiwiaSIsIkYiLCJzIiwibiIsImRvbmUiLCJ2YWx1ZSIsImUiLCJfZTIiLCJmIiwiVHlwZUVycm9yIiwiZXJyIiwibm9ybWFsQ29tcGxldGlvbiIsImRpZEVyciIsImNhbGwiLCJzdGVwIiwibmV4dCIsIl9lMyIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJmb3JFYWNoIiwia2V5IiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiaXRlciIsImxlbiIsImFycjIiLCJfdHlwZW9mIiwidCIsInIiLCJ1IiwiYSIsInJlcXVpcmUiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsIjEiLCJfZGVyZXFfIiwibW9kdWxlIiwiZ2xvYmFsIiwiX2JhYmVsUG9seWZpbGwiLCJkZWZpbmUiLCJPIiwiU3RyaW5nIiwicGFkU3RhcnQiLCJwYWRFbmQiLCJzcGxpdCIsIkZ1bmN0aW9uIiwiYmluZCIsInRoaXMiLCJzZWxmIiwid2luZG93IiwiMiIsIjMyNyIsIjMyOCIsIlJlZ0V4cCIsImVzY2FwZSIsIjEzMCIsIjIzIiwiMyIsIjQiLCJjb2YiLCJtc2ciLCIxOCIsIjUiLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG8iLCJ1bmRlZmluZWQiLCIxMjgiLCI0MiIsIjYiLCJDb25zdHJ1Y3RvciIsImZvcmJpZGRlbkZpZWxkIiwiNyIsImlzT2JqZWN0IiwiNTEiLCI4IiwidG9PYmplY3QiLCJ0b0Fic29sdXRlSW5kZXgiLCJ0b0xlbmd0aCIsImNvcHlXaXRoaW4iLCJzdGFydCIsInRvIiwiZW5kIiwiY291bnQiLCJNYXRoIiwibWluIiwiaW5jIiwiMTE0IiwiMTE4IiwiMTE5IiwiOSIsImFMZW4iLCJpbmRleCIsImVuZFBvcyIsIjEwIiwiZm9yT2YiLCJJVEVSQVRPUiIsInJlc3VsdCIsIjM5IiwiMTEiLCJ0b0lPYmplY3QiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCIxMTciLCIxMiIsImN0eCIsIklPYmplY3QiLCJhc2MiLCJUWVBFIiwiJGNyZWF0ZSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsImNyZWF0ZSIsImNhbGxiYWNrZm4iLCJ0aGF0IiwidmFsIiwicmVzIiwiMTUiLCIyNSIsIjQ3IiwiMTMiLCJhRnVuY3Rpb24iLCJtZW1vIiwiaXNSaWdodCIsIjE0IiwiU1BFQ0lFUyIsIm9yaWdpbmFsIiwiQyIsIjQ5Iiwic3BlY2llc0NvbnN0cnVjdG9yIiwiMTYiLCJpbnZva2UiLCJhcnJheVNsaWNlIiwiZmFjdG9yaWVzIiwiY29uc3RydWN0IiwiYXJncyIsImpvaW4iLCJmbiIsInBhcnRBcmdzIiwiYm91bmQiLCJjb25jYXQiLCI0NiIsIjE3IiwiVEFHIiwiQVJHIiwiVCIsIkIiLCJjYWxsZWUiLCIxOSIsImRQIiwicmVkZWZpbmVBbGwiLCJhbkluc3RhbmNlIiwiJGl0ZXJEZWZpbmUiLCJzZXRTcGVjaWVzIiwiREVTQ1JJUFRPUlMiLCJmYXN0S2V5IiwidmFsaWRhdGUiLCJTSVpFIiwiZ2V0RW50cnkiLCJlbnRyeSIsIl9pIiwiX2YiLCJrIiwiZ2V0Q29uc3RydWN0b3IiLCJ3cmFwcGVyIiwiTkFNRSIsIkFEREVSIiwiaXRlcmFibGUiLCJfdCIsIl9sIiwiY2xlYXIiLCJkYXRhIiwicCIsImRlbGV0ZSIsInByZXYiLCJ2IiwiaGFzIiwiZ2V0IiwiZGVmIiwic2V0U3Ryb25nIiwiaXRlcmF0ZWQiLCJraW5kIiwiX2siLCIxMDAiLCIxMjUiLCIyOSIsIjU1IiwiNTciLCI2NiIsIjcxIiwiNzIiLCI5MyIsIjIwIiwiY2xhc3NvZiIsIjIxIiwiZ2V0V2VhayIsImFuT2JqZWN0IiwiY3JlYXRlQXJyYXlNZXRob2QiLCIkaGFzIiwiYXJyYXlGaW5kIiwiYXJyYXlGaW5kSW5kZXgiLCJpZCIsInVuY2F1Z2h0RnJvemVuU3RvcmUiLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZmluZFVuY2F1Z2h0RnJvemVuIiwic3RvcmUiLCJzZXQiLCJzcGxpY2UiLCJ1ZnN0b3JlIiwiNDEiLCIyMiIsIiRleHBvcnQiLCJyZWRlZmluZSIsIm1ldGEiLCJmYWlscyIsIiRpdGVyRGV0ZWN0Iiwic2V0VG9TdHJpbmdUYWciLCJpbmhlcml0SWZSZXF1aXJlZCIsIm1ldGhvZHMiLCJjb21tb24iLCJJU19XRUFLIiwiQmFzZSIsInByb3RvIiwiZml4TWV0aG9kIiwiS0VZIiwiYiIsImVudHJpZXMiLCJpbnN0YW5jZSIsIkhBU05UX0NIQUlOSU5HIiwiVEhST1dTX09OX1BSSU1JVElWRVMiLCJBQ0NFUFRfSVRFUkFCTEVTIiwiQlVHR1lfWkVSTyIsIiRpbnN0YW5jZSIsIk5FRUQiLCJHIiwiVyIsIjEwMSIsIjMzIiwiMzUiLCI0MCIsIjQ1IiwiNTYiLCI5NCIsImNvcmUiLCJ2ZXJzaW9uIiwiX19lIiwiMjQiLCIkZGVmaW5lUHJvcGVydHkiLCJjcmVhdGVEZXNjIiwiOTIiLCJjIiwiMjYiLCJnZXRUaW1lIiwiRGF0ZSIsIiR0b0lTT1N0cmluZyIsInRvSVNPU3RyaW5nIiwibHoiLCJudW0iLCJOYU4iLCJpc0Zpbml0ZSIsIlJhbmdlRXJyb3IiLCJkIiwieSIsImdldFVUQ0Z1bGxZZWFyIiwibSIsImdldFVUQ01pbGxpc2Vjb25kcyIsImFicyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCIyNyIsInRvUHJpbWl0aXZlIiwiaGludCIsIjEyMCIsIjI4IiwiMzAiLCJkb2N1bWVudCIsImlzIiwiY3JlYXRlRWxlbWVudCIsIjMxIiwiMzIiLCJnZXRLZXlzIiwiZ09QUyIsInBJRSIsImdldFN5bWJvbHMiLCJpc0VudW0iLCI3OCIsIjgxIiwiODIiLCJoaWRlIiwidHlwZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIklTX0dMT0JBTCIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJTIiwiZXhwUHJvdG8iLCJVIiwiUiIsIjM0IiwiTUFUQ0giLCJyZSIsImV4ZWMiLCIzNiIsImRlZmluZWQiLCJ3a3MiLCJTWU1CT0wiLCJmbnMiLCJzdHJmbiIsInJ4Zm4iLCJzdHJpbmciLCJhcmciLCIzNyIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJ1bmljb2RlIiwic3RpY2t5IiwiMzgiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsImZsYXR0ZW5JbnRvQXJyYXkiLCJzb3VyY2VMZW4iLCJkZXB0aCIsIm1hcHBlciIsInRoaXNBcmciLCJlbGVtZW50Iiwic3ByZWFkYWJsZSIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXBGbiIsImlzQXJyYXlJdGVyIiwiZ2V0SXRlckZuIiwiQlJFQUsiLCJSRVRVUk4iLCJpdGVyRm4iLCIxMjkiLCI0OCIsIjUzIiwiX19nIiwiaGFzT3duUHJvcGVydHkiLCI0MyIsImRvY3VtZW50RWxlbWVudCIsIjQ0Iiwic2V0UHJvdG90eXBlT2YiLCI5OSIsInVuIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJJdGVyYXRvcnMiLCI1OCIsIjUwIiwiZmxvb3IiLCI1MiIsImlzUmVnRXhwIiwicmV0IiwiNTQiLCJkZXNjcmlwdG9yIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJMSUJSQVJZIiwiJGl0ZXJDcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkRFRkFVTFQiLCJJU19TRVQiLCJGT1JDRUQiLCJnZXRNZXRob2QiLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsInZhbHVlcyIsIjYwIiwiNzkiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwic2FmZSIsIjU5IiwiNjEiLCIkZXhwbTEiLCJleHBtMSIsIngiLCI2MiIsInNpZ24iLCJwb3ciLCJFUFNJTE9OIiwiRVBTSUxPTjMyIiwiTUFYMzIiLCJNSU4zMiIsImZyb3VuZCIsIiRhYnMiLCIkc2lnbiIsIjY1IiwiNjMiLCJsb2cxcCIsImxvZyIsIjY0Iiwic2NhbGUiLCJpbkxvdyIsImluSGlnaCIsIm91dExvdyIsIm91dEhpZ2giLCJJbmZpbml0eSIsIk1FVEEiLCJzZXREZXNjIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwidyIsIm9uRnJlZXplIiwiMTI0IiwiNjciLCJNYXAiLCJzaGFyZWQiLCJnZXRPckNyZWF0ZU1ldGFkYXRhTWFwIiwidGFyZ2V0S2V5IiwidGFyZ2V0TWV0YWRhdGEiLCJrZXlNZXRhZGF0YSIsIm1hcCIsIk1ldGFkYXRhS2V5IiwibWV0YWRhdGFNYXAiLCJNZXRhZGF0YVZhbHVlIiwiXyIsIjEwMyIsIjE2MCIsIjI2NiIsIjY4IiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsInByb2Nlc3MiLCJQcm9taXNlIiwiaXNOb2RlIiwiaGVhZCIsImxhc3QiLCJub3RpZnkiLCJmbHVzaCIsInBhcmVudCIsImRvbWFpbiIsImV4aXQiLCJlbnRlciIsIm5leHRUaWNrIiwidG9nZ2xlIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJyZXNvbHZlIiwicHJvbWlzZSIsInRoZW4iLCJ0YXNrIiwiMTEzIiwiNjkiLCJQcm9taXNlQ2FwYWJpbGl0eSIsInJlamVjdCIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiNzAiLCIkYXNzaWduIiwiYXNzaWduIiwiQSIsIksiLCJqIiwiZFBzIiwiZW51bUJ1Z0tleXMiLCJJRV9QUk9UTyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJzcmMiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCIxMDIiLCI3MyIsIklFOF9ET01fREVGSU5FIiwiQXR0cmlidXRlcyIsIjc0IiwicmFuZG9tIiwiX19kZWZpbmVTZXR0ZXJfXyIsIjc1IiwiZ09QRCIsIjc2IiwiZ09QTiIsIndpbmRvd05hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIjc3IiwiJGtleXMiLCJoaWRkZW5LZXlzIiwiODAiLCJPYmplY3RQcm90byIsImFycmF5SW5kZXhPZiIsIm5hbWVzIiwiODMiLCI4NCIsImlzRW50cmllcyIsIjg1IiwiUmVmbGVjdCIsIjg2IiwiJHBhcnNlRmxvYXQiLCJwYXJzZUZsb2F0IiwiJHRyaW0iLCJ0cmltIiwic3RyIiwiY2hhckF0IiwiMTExIiwiMTEyIiwiODciLCIkcGFyc2VJbnQiLCJwYXJzZUludCIsIndzIiwiaGV4IiwicmFkaXgiLCI4OCIsInBhdGgiLCJwYXJncyIsImhvbGRlciIsIjg5IiwiOTAiLCI5MSIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJiaXRtYXAiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJpbnNwZWN0U291cmNlIiwiaXNGdW5jdGlvbiIsIjk1IiwicmVnRXhwIiwicmVwbGFjZSIsInJlcGxhY2VyIiwicGFydCIsIjk2IiwiOTciLCJDT0xMRUNUSU9OIiwibWFwcGluZyIsImNiIiwibmV4dEl0ZW0iLCI5OCIsIm9mIiwiY2hlY2siLCJidWdneSIsIl9fcHJvdG9fXyIsInRhZyIsInN0YXQiLCJ1aWQiLCIxMDQiLCJEIiwiMTA1IiwibWV0aG9kIiwiMTA2IiwidG9JbnRlZ2VyIiwiVE9fU1RSSU5HIiwicG9zIiwiY2hhckNvZGVBdCIsIjExNiIsIjEwNyIsInNlYXJjaFN0cmluZyIsIjEwOCIsInF1b3QiLCJjcmVhdGVIVE1MIiwiYXR0cmlidXRlIiwicDEiLCJ0b0xvd2VyQ2FzZSIsIjEwOSIsInJlcGVhdCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJsZWZ0Iiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsImludE1heExlbmd0aCIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJjZWlsIiwiMTEwIiwic3BhY2VzIiwic3BhY2UiLCJsdHJpbSIsInJ0cmltIiwiZXhwb3J0ZXIiLCJBTElBUyIsIkZPUkNFIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsImh0bWwiLCJjZWwiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwibGlzdGVuZXIiLCJldmVudCIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwibWF4IiwiMTE1IiwibnVtYmVyIiwiaXNOYU4iLCJ2YWx1ZU9mIiwiMTIxIiwiJHR5cGVkIiwiJGJ1ZmZlciIsInByb3BlcnR5RGVzYyIsInRvSW5kZXgiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwiQXJyYXlJdGVyYXRvcnMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlVpbnQ4QXJyYXkiLCIkQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsIiREYXRhVmlldyIsIkRhdGFWaWV3IiwiYXJyYXlGb3JFYWNoIiwiYXJyYXlGaWx0ZXIiLCJhcnJheVNvbWUiLCJhcnJheUV2ZXJ5IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5VmFsdWVzIiwiYXJyYXlLZXlzIiwiYXJyYXlFbnRyaWVzIiwiYXJyYXlMYXN0SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyYXlSZWR1Y2UiLCJyZWR1Y2UiLCJhcnJheVJlZHVjZVJpZ2h0IiwicmVkdWNlUmlnaHQiLCJhcnJheUpvaW4iLCJhcnJheVNvcnQiLCJzb3J0IiwiYXJyYXlUb1N0cmluZyIsImFycmF5VG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIlRZUEVEX0NPTlNUUlVDVE9SIiwiREVGX0NPTlNUUlVDVE9SIiwiQUxMX0NPTlNUUlVDVE9SUyIsIkNPTlNUUiIsIlRZUEVEX0FSUkFZIiwiVFlQRUQiLCJWSUVXIiwiJG1hcCIsImFsbG9jYXRlIiwiTElUVExFX0VORElBTiIsIlVpbnQxNkFycmF5IiwiYnVmZmVyIiwiRk9SQ0VEX1NFVCIsInRvT2Zmc2V0IiwiQllURVMiLCJvZmZzZXQiLCJzcGVjaWVzRnJvbUxpc3QiLCJsaXN0IiwiZnJvbUxpc3QiLCJhZGRHZXR0ZXIiLCJpbnRlcm5hbCIsIl9kIiwiJGZyb20iLCJtYXBmbiIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJldmVyeSIsImZpbGwiLCJmaW5kIiwicHJlZGljYXRlIiwiZmluZEluZGV4IiwiaW5kZXhPZiIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCIkVHlwZWRBcnJheVByb3RvdHlwZSQiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiVHlwZWRBcnJheSIsIlRBQyIsIkFCViIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJhZGRFbGVtZW50Iiwicm91bmQiLCIkb2Zmc2V0IiwiJGxlbmd0aCIsImJ5dGVMZW5ndGgiLCJrbGFzcyIsIiRsZW4iLCIkbmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsIiRpdGVyYXRvciIsIjEyMiIsIjEyMyIsIjE0MSIsIkJhc2VCdWZmZXIiLCJMTjIiLCIkQlVGRkVSIiwiJExFTkdUSCIsIiRPRkZTRVQiLCJwYWNrSUVFRTc1NCIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJ1bnBhY2tJMzIiLCJieXRlcyIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJ2aWV3IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsIl9iIiwicGFjayIsImNvbnZlcnNpb24iLCJBcnJheUJ1ZmZlclByb3RvIiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwiYnVmZmVyTGVuZ3RoIiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJUeXBlZCIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMiLCJweCIsIjEyNiIsIndrc0V4dCIsIiRTeW1ib2wiLCIxMjciLCJVU0VfU1lNQk9MIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCIkcmUiLCIxMzEiLCIxMzIiLCIkZXZlcnkiLCIxMzMiLCIxMzQiLCIkZmlsdGVyIiwiMTM1IiwiJGZpbmQiLCJmb3JjZWQiLCIxMzYiLCIxMzciLCIkZm9yRWFjaCIsIlNUUklDVCIsIjEzOCIsImNyZWF0ZVByb3BlcnR5IiwiMTM5IiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiMTQwIiwiYWRkVG9VbnNjb3BhYmxlcyIsIkFyZ3VtZW50cyIsIjE0MiIsIjE0MyIsIjE0NCIsIjE0NSIsIjE0NiIsIiRyZWR1Y2UiLCIxNDciLCIxNDgiLCJ1cFRvIiwic2l6ZSIsImNsb25lZCIsIjE0OSIsIiRzb21lIiwiMTUwIiwiJHNvcnQiLCIxNTEiLCIxNTIiLCIxNTMiLCIxNTQiLCJ0b0pTT04iLCJwdiIsIjE1NSIsIlRPX1BSSU1JVElWRSIsIjE1NiIsIkRhdGVQcm90byIsIjE1NyIsIjE1OCIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG8iLCIxNTkiLCJGUHJvdG8iLCJuYW1lUkUiLCJtYXRjaCIsInN0cm9uZyIsIjE2MSIsInNxcnQiLCIkYWNvc2giLCJhY29zaCIsIk51bWJlciIsIk1BWF9WQUxVRSIsIjE2MiIsIiRhc2luaCIsImFzaW5oIiwiMTYzIiwiJGF0YW5oIiwiYXRhbmgiLCIxNjQiLCJjYnJ0IiwiMTY1IiwiY2x6MzIiLCJMT0cyRSIsIjE2NiIsImNvc2giLCIxNjciLCIxNjgiLCIxNjkiLCJoeXBvdCIsInZhbHVlMSIsInZhbHVlMiIsImRpdiIsInN1bSIsImxhcmciLCIxNzAiLCIkaW11bCIsImltdWwiLCJ4biIsInluIiwieGwiLCJ5bCIsIjE3MSIsImxvZzEwIiwiTE9HMTBFIiwiMTcyIiwiMTczIiwibG9nMiIsIjE3NCIsIjE3NSIsInNpbmgiLCJFIiwiMTc2IiwidGFuaCIsIjE3NyIsInRydW5jIiwiMTc4IiwiJE51bWJlciIsIkJST0tFTl9DT0YiLCJUUklNIiwidG9OdW1iZXIiLCJhcmd1bWVudCIsInRoaXJkIiwibWF4Q29kZSIsImZpcnN0IiwiZGlnaXRzIiwiMTc5IiwiMTgwIiwiX2lzRmluaXRlIiwiMTgxIiwiaXNJbnRlZ2VyIiwiMTgyIiwiMTgzIiwiaXNTYWZlSW50ZWdlciIsIjE4NCIsIk1BWF9TQUZFX0lOVEVHRVIiLCIxODUiLCJNSU5fU0FGRV9JTlRFR0VSIiwiMTg2IiwiMTg3IiwiMTg4IiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiRVJST1IiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJhY2MiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCJ4MiIsIjE4OSIsIiRmYWlscyIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiMTkwIiwiMTkxIiwiMTkyIiwiMTkzIiwiMTk0IiwiJGZyZWV6ZSIsIjE5NSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIxOTYiLCIxOTciLCIkZ2V0UHJvdG90eXBlT2YiLCIxOTgiLCIkaXNFeHRlbnNpYmxlIiwiMTk5IiwiJGlzRnJvemVuIiwiMjAwIiwiJGlzU2VhbGVkIiwiMjAxIiwiMjAyIiwiMjAzIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiMjA0IiwiJHNlYWwiLCIyMDUiLCIyMDYiLCIyMDciLCIyMDgiLCIyMDkiLCJJbnRlcm5hbCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiV3JhcHBlciIsIm1pY3JvdGFzayIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsInByb21pc2VSZXNvbHZlIiwiJFByb21pc2UiLCJlbXB0eSIsIlVTRV9OQVRJVkUiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsInNhbWVDb25zdHJ1Y3RvciIsImlzVGhlbmFibGUiLCJpc1JlamVjdCIsIl9uIiwiY2hhaW4iLCJfYyIsIl92Iiwib2siLCJfcyIsInJlYWN0aW9uIiwiaGFuZGxlciIsImZhaWwiLCJfaCIsIm9uSGFuZGxlVW5oYW5kbGVkIiwib25VbmhhbmRsZWQiLCJjb25zb2xlIiwidW5oYW5kbGVkIiwiaXNVbmhhbmRsZWQiLCJlbWl0Iiwib251bmhhbmRsZWRyZWplY3Rpb24iLCJyZWFzb24iLCJlcnJvciIsIl9hIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl93IiwiJHJlc29sdmUiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhdGNoIiwiY2FwYWJpbGl0eSIsImFsbCIsInJlbWFpbmluZyIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiMjEwIiwickFwcGx5IiwiZkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIkwiLCIyMTEiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwiMjEyIiwicHJvcGVydHlLZXkiLCJhdHRyaWJ1dGVzIiwiMjEzIiwiZGVsZXRlUHJvcGVydHkiLCIyMTQiLCJFbnVtZXJhdGUiLCJlbnVtZXJhdGUiLCIyMTUiLCIyMTYiLCJnZXRQcm90byIsIjIxNyIsInJlY2VpdmVyIiwiMjE4IiwiMjE5IiwiMjIwIiwiMjIxIiwiMjIyIiwic2V0UHJvdG8iLCIyMjMiLCJWIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzYyIsIjIyNCIsIiRmbGFncyIsIiRSZWdFeHAiLCJyZTEiLCJyZTIiLCJDT1JSRUNUX05FVyIsInRpUkUiLCJwaVJFIiwiZmlVIiwicHJveHkiLCIyMjUiLCJmbGFncyIsIjIyNiIsIiRtYXRjaCIsInJlZ2V4cCIsIjIyNyIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiMjI4IiwiU0VBUkNIIiwiJHNlYXJjaCIsIjIyOSIsIlNQTElUIiwiJHNwbGl0IiwiX3NwbGl0IiwiJHB1c2giLCJMRU5HVEgiLCJOUENHIiwibGltaXQiLCJzZXBhcmF0b3IyIiwibGFzdEluZGV4IiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsIjIzMCIsIjIzMSIsImFkZCIsIjIzMiIsIjIzMyIsIjIzNCIsIjIzNSIsIjIzNiIsIiRhdCIsImNvZGVQb2ludEF0IiwiMjM3IiwiY29udGV4dCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJzZWFyY2giLCIyMzgiLCIyMzkiLCJjb2xvciIsIjI0MCIsIjI0MSIsImZyb21DaGFyQ29kZSIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsIjI0MiIsIjI0MyIsIjI0NCIsInBvaW50IiwiMjQ1IiwidXJsIiwiMjQ2IiwicmF3IiwiY2FsbFNpdGUiLCJ0cGwiLCIyNDciLCIyNDgiLCIyNDkiLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCIyNTAiLCIyNTEiLCIyNTIiLCIyNTMiLCIyNTQiLCJ3a3NEZWZpbmUiLCJrZXlPZiIsImVudW1LZXlzIiwiX2NyZWF0ZSIsImdPUE5FeHQiLCIkSlNPTiIsIkpTT04iLCJfc3RyaW5naWZ5Iiwic3RyaW5naWZ5IiwiSElEREVOIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiUU9iamVjdCIsInNldHRlciIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJ3cmFwIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJmb3IiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCIkcmVwbGFjZXIiLCIyNTUiLCIkaXNWaWV3IiwiaXNWaWV3IiwiZmluYWwiLCJ2aWV3UyIsInZpZXdUIiwiMjU2IiwiMjU3IiwiaW5pdCIsIjI1OCIsIjI1OSIsIjI2MCIsIjI2MSIsIjI2MiIsIjI2MyIsIjI2NCIsIjI2NSIsIkludGVybmFsTWFwIiwiZWFjaCIsIndlYWsiLCJ0bXAiLCIkV2Vha01hcCIsImZyZWV6ZSIsIjI2NyIsIjI2OCIsImFycmF5U3BlY2llc0NyZWF0ZSIsImZsYXRNYXAiLCIyNjkiLCJmbGF0dGVuIiwiZGVwdGhBcmciLCIyNzAiLCIkaW5jbHVkZXMiLCIyNzEiLCJhc2FwIiwiMjcyIiwiaXNFcnJvciIsIjI3MyIsIjI3NCIsIjI3NSIsIjI3NiIsIjI3NyIsImNsYW1wIiwibG93ZXIiLCJ1cHBlciIsIjI3OCIsIkRFR19QRVJfUkFEIiwiUEkiLCIyNzkiLCJSQURfUEVSX0RFRyIsImRlZ3JlZXMiLCJyYWRpYW5zIiwiMjgwIiwiZnNjYWxlIiwiMjgxIiwiaWFkZGgiLCJ4MCIsIngxIiwieTAiLCJ5MSIsIiR4MCIsIiR5MCIsIjI4MiIsImltdWxoIiwiJHUiLCIkdiIsInUwIiwidjAiLCJ1MSIsInYxIiwiMjgzIiwiaXN1YmgiLCIyODQiLCIyODUiLCIyODYiLCIyODciLCJzaWduYml0IiwiMjg4IiwidW11bGgiLCIyODkiLCJfX2RlZmluZUdldHRlcl9fIiwiZ2V0dGVyIiwiMjkwIiwiMjkxIiwiMjkyIiwiZ2V0RGVzYyIsIjI5MyIsIl9fbG9va3VwR2V0dGVyX18iLCIyOTQiLCJfX2xvb2t1cFNldHRlcl9fIiwiMjk1IiwiJHZhbHVlcyIsIjI5NiIsIk9CU0VSVkFCTEUiLCJjbGVhbnVwU3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9uIiwiY2xlYW51cCIsInN1YnNjcmlwdGlvbkNsb3NlZCIsIl9vIiwiY2xvc2VTdWJzY3JpcHRpb24iLCJTdWJzY3JpcHRpb24iLCJvYnNlcnZlciIsInN1YnNjcmliZXIiLCJTdWJzY3JpcHRpb25PYnNlcnZlciIsInVuc3Vic2NyaWJlIiwiY29tcGxldGUiLCIkT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIm9ic2VydmFibGUiLCJpdGVtcyIsIk9ic2VydmFibGUiLCIyOTciLCJmaW5hbGx5Iiwib25GaW5hbGx5IiwiMjk4IiwidHJ5IiwiMjk5IiwibWV0YWRhdGEiLCJ0b01ldGFLZXkiLCJvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhIiwiZGVmaW5lTWV0YWRhdGEiLCJtZXRhZGF0YUtleSIsIm1ldGFkYXRhVmFsdWUiLCIzMDAiLCJkZWxldGVNZXRhZGF0YSIsIjMwMSIsIlNldCIsIm9yZGluYXJ5T3duTWV0YWRhdGFLZXlzIiwib3JkaW5hcnlNZXRhZGF0YUtleXMiLCJvS2V5cyIsInBLZXlzIiwiZ2V0TWV0YWRhdGFLZXlzIiwiMzAyIiwib3JkaW5hcnlIYXNPd25NZXRhZGF0YSIsIm9yZGluYXJ5R2V0T3duTWV0YWRhdGEiLCJvcmRpbmFyeUdldE1ldGFkYXRhIiwiZ2V0TWV0YWRhdGEiLCIzMDMiLCJnZXRPd25NZXRhZGF0YUtleXMiLCIzMDQiLCJnZXRPd25NZXRhZGF0YSIsIjMwNSIsIm9yZGluYXJ5SGFzTWV0YWRhdGEiLCJoYXNNZXRhZGF0YSIsIjMwNiIsImhhc093bk1ldGFkYXRhIiwiMzA3IiwiJG1ldGFkYXRhIiwiMzA4IiwiMzA5IiwiMzEwIiwiMzExIiwiYXQiLCIzMTIiLCJnZXRGbGFncyIsIlJlZ0V4cFByb3RvIiwiJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yIiwiX3IiLCJtYXRjaEFsbCIsInJ4IiwiMzEzIiwiJHBhZCIsIjMxNCIsIjMxNSIsIjMxNiIsIjMxNyIsIjMxOCIsIjMxOSIsIjMyMCIsIjMyMSIsIjMyMiIsIjMyMyIsIjMyNCIsIlRPX1NUUklOR19UQUciLCJBcnJheVZhbHVlcyIsIkRPTUl0ZXJhYmxlcyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY29sbGVjdGlvbnMiLCJleHBsaWNpdCIsIkNvbGxlY3Rpb24iLCIzMjUiLCIkdGFzayIsIjMyNiIsInBhcnRpYWwiLCJuYXZpZ2F0b3IiLCJNU0lFIiwidXNlckFnZW50IiwidGltZSIsInNldEludGVydmFsIiwiT3AiLCJoYXNPd24iLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImluTW9kdWxlIiwicnVudGltZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsIkNvbnRpbnVlU2VudGluZWwiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJHZW5lcmF0b3IiLCJHZW5lcmF0b3JGdW5jdGlvbiIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJfX2F3YWl0IiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsImFzeW5jIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInBvcCIsIkNvbnRleHQiLCJyZXNldCIsInNraXBUZW1wUmVzZXQiLCJzZW50IiwiX3NlbnQiLCJkZWxlZ2F0ZSIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJjb21wbGV0aW9uIiwicnZhbCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwicmVjb3JkIiwidHJ5TG9jIiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWJydXB0IiwiZmluYWxseUVudHJ5IiwiYWZ0ZXJMb2MiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwcm90b0dlbmVyYXRvciIsImdlbmVyYXRvciIsIl9pbnZva2UiLCJzdGF0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInRyeUNhdGNoIiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbmZvIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsIml0ZXJhdG9yTWV0aG9kIiwiZG9uZVJlc3VsdCIsImlzSUUxMSIsIk1TSW5wdXRNZXRob2RDb250ZXh0IiwiZG9jdW1lbnRNb2RlIiwiaXNNb2JpbGUiLCJib2R5Iiwib2Zmc2V0V2lkdGgiLCJzY3JpcHQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIm9ubG9hZCIsImNyZWF0ZUZpbGxQb2x5ZmlsbCIsIm9wdGlvbnMiLCJyZXBsYWNlclRvcCIsImNsYXNzTmFtZSIsInNldEF0dHJpYnV0ZSIsIndpZHRoIiwiaGVpZ2h0IiwiYWx0IiwicG9seWNsaXAiLCJjb250YWluZXIiLCJjcmVhdGVCb3R0b21QYXJ0IiwiYm90dG9tIiwicmFuZ2UiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJIVE1MIiwiY2xhc3NMaXN0IiwicmFuZ2VUb3AiLCJyYW5nZUJvdHRvbSIsInJhbmdlQ29udHJvbCIsIm1heFdpZHRoIiwiZGF0YXNldCIsInJhbmdlU3RhcnQiLCJzZXRWYWx1ZXMiLCJkaXJlY3Rpb24iLCJxdWVyeVNlbGVjdG9yQWxsIiwidGV4dCIsInBsYWNlaG9sZGVyIiwidGV4dENvbnRlbnQiLCJwYXJlbnRFbGVtZW50IiwiaW5zZXJ0QmVmb3JlIiwiY2hpbGROb2RlcyIsInBsYWNlaG9sZGVyRWwiLCJyZW1vdmUiLCJjcmVhdGVGbG9hdGluZ1BsYWNlaG9sZGVyIiwiYmlydGhZZWFyU2VsZWN0IiwiZXhwYW5kSWNvbiIsImlucHV0IiwicmVhZE9ubHkiLCJ1bCIsInllYXJTdGFydCIsIl9sb29wIiwibGkiLCJvbmNsaWNrIiwieWVhckVuZCIsIm9wZW5TZWxlY3Rpb24iLCJwcmV2ZW50RGVmYXVsdCIsImNsb3NlU2VsZWN0aW9uIiwiaXRlbSIsImhpZGRlbiIsIm5ld0lkIiwic3Vic3RyaW5nIiwiY2hlY2tib3giLCJpbmRpY2F0b3IiLCJjaGVja2VkIiwibGFiZWwiLCJjcmVhdGVDdXN0b21DaGVja0JveCIsImdldEZyb21QZXJjZW50YWdlcyIsInBlcmNlbnRhZ2VzIiwic2V0UmFuZ2VQb3NpdGlvbiIsIm1zIiwiYWJzb2x1dGVWYWx1ZSIsImNvb3JkcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhZ2VYIiwiZ29hbCIsImluaXRpYWwiLCJjdXJyZW50IiwiY2xlYXJUaW1lb3V0IiwibW91c2VEb3duSGFuZGxlciIsInRvdWNoU3RhcnRIYW5kbGVyIiwicG9pbnRzIiwiZGFzaGVzIiwibWFya2VySGVpZ2h0IiwiaWUxMVRvcCIsInJhbmdlQ29udHJvbENvbnRhaW5lciIsInJhbmdlR3JhZGllbnRzRmlsbHMiLCJpbml0aWFsVmFsdWVQZXJjZW50YWdlcyIsInJhbmdlV2lkdGgiLCJwb2ludHNEYXRhIiwicG9pbnRzQ29udGFpbmVyIiwib3JpZW50YXRpb25BZGRpdGlvbkNsYXNzIiwidGV4dEFkZGl0aW9uQ2xhc3MiLCJtYXJrZXJBZGRpdGlvbmFsQ2xhc3MiLCJvZmZzZXRMZWZ0IiwicmlnaHQiLCJ0b3AiLCJjc3NUZXh0Iiwib3JpZW50YXRpb24iLCJfcmVmIiwiaXNVc2VkIiwiZGFzaGVzQW1vdW50IiwiZGFzaCIsIm1hcmtlciIsIm1vdmVUb05lYXJlc3RQb2ludCIsImN1cnIiLCJkaWZmQXJyYXkiLCJwcmV2aW91cyIsImN1cnJlbnREaWZmZXJlbmNlIiwiYWJzVmFsdWUiLCJhc3NpZ25WYWx1ZXNBY2NvcmRpbmdUb1BlcmNlbnRhZ2VzIiwicmVtb3ZlVW51c2VkRWxlbWVudHMiLCJfaXRlcmF0b3IiLCJfc3RlcCIsIm1vdXNlTW92ZUhhbmRsZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibW91c2VVcEhhbmRsZXIiLCJjaGFuZ2VkVG91Y2hlcyIsInNjcm9sbExlZnQiLCJpbml0aWFsUG9zaXRpb24iLCJzZXRQcm9wZXJ0eSIsImhhbWJ1cmdlciIsImhfdG9wIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJoX2JvdHRvbSIsIm5leHRFbGVtZW50U2libGluZyIsIm1lbnUiLCJtZW51SXRlbXMiLCJtZW51TGlua3MiLCJzaG93TWVudSIsImhpZGVNZW51IiwiY29udGFpbnMiLCJsaW5rIiwicGFyZW50Tm9kZSJdLCJtYXBwaW5ncyI6IkFBQUEsYUFFQSxTQUFTQSwyQkFBMkJDLEVBQUdDLEdBQWtCLElBQUlDLEVBQXVCLG9CQUFYQyxRQUEwQkgsRUFBRUcsT0FBT0MsV0FBYUosRUFBRSxjQUFlLElBQUtFLEVBQUksQ0FBRSxHQUFJRyxNQUFNQyxRQUFRTixLQUFPRSxFQUFLSyw0QkFBNEJQLEtBQU9DLEdBQWtCRCxHQUF5QixpQkFBYkEsRUFBRVEsT0FBcUIsQ0FBTU4sSUFBSUYsRUFBSUUsR0FBSSxJQUFJTyxFQUFJLEVBQU9DLEVBQUksYUFBaUIsTUFBTyxDQUFFQyxFQUFHRCxFQUFHRSxFQUFHLFdBQWUsT0FBSUgsR0FBS1QsRUFB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QUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQyxFQUFPSCxRQUFVRSxFQUFRLEtBRXZCLENBQUMrdkIsSUFBTSxJQUFJQyxJQUFNLElBQUlFLElBQU0sSUFBSUMsSUFBTSxJQUFJRSxJQUFNLElBQUlHLElBQU0sSUFBSUMsSUFBTSxJQUFJRyxJQUFNLElBQUlFLElBQU0sSUFBSUcsSUFBTSxJQUFJM0UsSUFBTSxJQUFJOEUsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlFLElBQU0sSUFBSUMsSUFBTSxJQUFJSSxJQUFNLElBQUlFLElBQU0sSUFBSUUsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJRyxJQUFNLElBQUlFLElBQU0sSUFBSUUsSUFBTSxJQUFJQyxJQUFNLElBQUlHLElBQU0sSUFBSS9aLElBQU0sSUFBSW9hLElBQU0sSUFBSU0sSUFBTSxJQUFJRyxJQUFNLElBQUlHLElBQU0sSUFBSUUsSUFBTSxJQUFJRyxJQUFNLElBQUlFLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlPLElBQU0sSUFBSU8sSUFBTSxJQUFJRyxJQUFNLElBQUlDLElBQU0sSUFBSUUsSUFBTSxJQUFJQyxJQUFNLElBQUlHLElBQU0sSUFBSUUsSUFBTSxJQUFJRSxJQUFNLElBQUlVLElBQU0sSUFBSUMsSUFBTSxJQUFJRSxJQUFNLElBQUlFLElBQU0sSUFBSUMsSUFBTSxJQUFJRSxJQUFNLElBQUlFLElBQU0sSUFBSUUsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSWEsSUFBTSxJQUFJSyxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUUsSUFBTSxJQUFJRSxJQUFNLElBQUlDLElBQU0sSUFBSUUsSUFBTSxJQUFJRSxJQUFNLElBQUlFLElBQU0sSUFBSUUsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUUsSUFBTSxJQUFJRSxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSW1ELElBQU0sSUFBSU0sSUFBTSxJQUFJTyxJQUFNLElBQUlHLElBQU0sSUFBSUUsSUFBTSxJQUFJRyxJQUFNLElBQUlDLElBQU0sSUFBSUUsSUFBTSxJQUFJRSxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUUsSUFBTSxJQUFJSSxJQUFNLElBQUlVLElBQU0sSUFBSUUsSUFBTSxJQUFJRyxJQUFNLElBQUlLLElBQU0sSUFBSUcsSUFBTSxJQUFJcmdDLEdBQUssR0FBR29oQyxJQUFNLElBQUlDLElBQU0sSUFBSUUsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlHLElBQU0sSUFBSU0sSUFBTSxJQUFJQyxJQUFNLElBQUlFLElBQU0sSUFBSUMsSUFBTSxJQUFJSSxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJRSxJQUFNLElBQUlFLElBQU0sSUFBSUksSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUcsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlpQyxJQUFNLElBQUlNLElBQU0sSUFBSUMsSUFBTSxJQUFJRSxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSWx2QixJQUFNLElBQUl5dkIsSUFBTSxJQUFJQyxJQUFNLElBQUlHLElBQU0sSUFBSUcsSUFBTSxJQUFJRSxJQUFNLElBQUlFLElBQU0sSUFBSUUsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlJLElBQU0sSUFBSUcsSUFBTSxJQUFJSSxJQUFNLElBQUlFLElBQU0sSUFBSVEsSUFBTSxJQUFJUSxJQUFNLElBQUlFLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUUsSUFBTSxJQUFJRSxJQUFNLElBQUlHLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlFLElBQU0sSUFBSUUsSUFBTSxJQUFJRSxJQUFNLElBQUlFLElBQU0sSUFBSW1CLElBQU0sSUFBSUcsSUFBTSxJQUFJRSxJQUFNLElBQUlPLElBQU0sSUFBSUUsSUFBTSxJQUFJTyxJQUFNLElBQUlLLElBQU0sSUFBSUUsSUFBTSxJQUFJRSxJQUFNLElB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VWlCLE9BQU8sWUFDdkJpRixFQUFTbEcsVUFBVWlCLE9BQU8sY0FDeEIsS0F1QkhqM0IsWUFBVyxXQUFBLE9BQU1vOEIsRUFBS3BHLFVBQVVpQixPQUFPLHlCQUF3QixNQUVoRThFLEVBQVVuOEIsaUJBQWlCLFNBQVNocEIsU0FBQUEsR0FBQUEsT0FDOUJ3bEQsRUFBS3BHLFVBQVV5RyxTQUFTLHVCQUd0QkQsSUFGQ0QsT0FLVHRqRCxtQkFBSXFqRCxHQUFXOWpELFNBQVFra0QsU0FBQUEsR0FDdEJBLEVBQUs5OEIsaUJBQWlCLFNBQVMsV0FDOUI0OEIsSUFDQXZqRCxtQkFBSW9qRCxHQUFXN2pELFNBQVF3L0MsU0FBQUEsR0FBQUEsT0FBUUEsRUFBS2hDLFVBQVVpQixPQUFPLGFBQ3JEeUYsRUFBS0MsV0FBVzNHLFVBQVV4WSxJQUFJLGdCQXREUiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbl9kZXJlcV8oMzI3KTtcblxuX2RlcmVxXygzMjgpO1xuXG5fZGVyZXFfKDIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7XG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcbn0se1wiMlwiOjIsXCIzMjdcIjozMjcsXCIzMjhcIjozMjh9XSwyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbl9kZXJlcV8oMTMwKTtcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXygyMykuUmVnRXhwLmVzY2FwZTtcblxufSx7XCIxMzBcIjoxMzAsXCIyM1wiOjIzfV0sMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG5cbn0se31dLDQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGNvZiA9IF9kZXJlcV8oMTgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xuICBpZiAodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpIHRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcblxufSx7XCIxOFwiOjE4fV0sNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSBfZGVyZXFfKDEyOCkoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIF9kZXJlcV8oNDIpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuXG59LHtcIjEyOFwiOjEyOCxcIjQyXCI6NDJ9XSw2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuXG59LHt9XSw3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxufSx7XCI1MVwiOjUxfV0sODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSBfZGVyZXFfKDExNCk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG5cbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCAvKiA9IDAgKi8sIHN0YXJ0IC8qID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgdG8gPSB0b0Fic29sdXRlSW5kZXgodGFyZ2V0LCBsZW4pO1xuICB2YXIgZnJvbSA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgdmFyIGluYyA9IDE7XG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcbiAgICBpbmMgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG5cbn0se1wiMTE0XCI6MTE0LFwiMTE4XCI6MTE4LFwiMTE5XCI6MTE5fV0sOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSBfZGVyZXFfKDExNCk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcblxufSx7XCIxMTRcIjoxMTQsXCIxMThcIjoxMTgsXCIxMTlcIjoxMTl9XSwxMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZm9yT2YgPSBfZGVyZXFfKDM5KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlciwgSVRFUkFUT1IpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3JPZihpdGVyLCBmYWxzZSwgcmVzdWx0LnB1c2gsIHJlc3VsdCwgSVRFUkFUT1IpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxufSx7XCIzOVwiOjM5fV0sMTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSBfZGVyZXFfKDExNyk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gX2RlcmVxXygxMTQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbn0se1wiMTE0XCI6MTE0LFwiMTE3XCI6MTE3LFwiMTE4XCI6MTE4fV0sMTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IF9kZXJlcV8oMjUpO1xudmFyIElPYmplY3QgPSBfZGVyZXFfKDQ3KTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBhc2MgPSBfZGVyZXFfKDE1KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcblxufSx7XCIxMThcIjoxMTgsXCIxMTlcIjoxMTksXCIxNVwiOjE1LFwiMjVcIjoyNSxcIjQ3XCI6NDd9XSwxMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciBJT2JqZWN0ID0gX2RlcmVxXyg0Nyk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMDtcbiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHtcbiAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmIChpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yICg7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTtcblxufSx7XCIxMThcIjoxMTgsXCIxMTlcIjoxMTksXCIzXCI6MyxcIjQ3XCI6NDd9XSwxNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcbnZhciBpc0FycmF5ID0gX2RlcmVxXyg0OSk7XG52YXIgU1BFQ0lFUyA9IF9kZXJlcV8oMTI4KSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuXG59LHtcIjEyOFwiOjEyOCxcIjQ5XCI6NDksXCI1MVwiOjUxfV0sMTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9kZXJlcV8oMTQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuXG59LHtcIjE0XCI6MTR9XSwxNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGludm9rZSA9IF9kZXJlcV8oNDYpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcblxufSx7XCIzXCI6MyxcIjQ2XCI6NDYsXCI1MVwiOjUxfV0sMTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSBfZGVyZXFfKDE4KTtcbnZhciBUQUcgPSBfZGVyZXFfKDEyOCkoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcblxufSx7XCIxMjhcIjoxMjgsXCIxOFwiOjE4fV0sMTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuXG59LHt9XSwxOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgZFAgPSBfZGVyZXFfKDcyKS5mO1xudmFyIGNyZWF0ZSA9IF9kZXJlcV8oNzEpO1xudmFyIHJlZGVmaW5lQWxsID0gX2RlcmVxXyg5Myk7XG52YXIgY3R4ID0gX2RlcmVxXygyNSk7XG52YXIgYW5JbnN0YW5jZSA9IF9kZXJlcV8oNik7XG52YXIgZm9yT2YgPSBfZGVyZXFfKDM5KTtcbnZhciAkaXRlckRlZmluZSA9IF9kZXJlcV8oNTUpO1xudmFyIHN0ZXAgPSBfZGVyZXFfKDU3KTtcbnZhciBzZXRTcGVjaWVzID0gX2RlcmVxXygxMDApO1xudmFyIERFU0NSSVBUT1JTID0gX2RlcmVxXygyOSk7XG52YXIgZmFzdEtleSA9IF9kZXJlcV8oNjYpLmZhc3RLZXk7XG52YXIgdmFsaWRhdGUgPSBfZGVyZXFfKDEyNSk7XG52YXIgU0laRSA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICB2YXIgZW50cnk7XG4gIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IgKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgIGlmIChlbnRyeS5rID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIGZvciAodmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKSwgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wKSBlbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubjtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYgKHRoYXQuX2YgPT0gZW50cnkpIHRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmICh0aGF0Ll9sID09IGVudHJ5KSB0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKSB7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHRoaXMsIE5BTUUpW1NJWkVdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICB2YXIgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZiAoIXRoYXQuX2YpIHRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDLCBOQU1FLCBJU19NQVApIHtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgICB0aGlzLl90ID0gdmFsaWRhdGUoaXRlcmF0ZWQsIE5BTUUpOyAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGtpbmQgPSB0aGF0Ll9rO1xuICAgICAgdmFyIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZiAoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSkge1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTtcblxufSx7XCIxMDBcIjoxMDAsXCIxMjVcIjoxMjUsXCIyNVwiOjI1LFwiMjlcIjoyOSxcIjM5XCI6MzksXCI1NVwiOjU1LFwiNTdcIjo1NyxcIjZcIjo2LFwiNjZcIjo2NixcIjcxXCI6NzEsXCI3MlwiOjcyLFwiOTNcIjo5M31dLDIwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciBjbGFzc29mID0gX2RlcmVxXygxNyk7XG52YXIgZnJvbSA9IF9kZXJlcV8oMTApO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIGlmIChjbGFzc29mKHRoaXMpICE9IE5BTUUpIHRocm93IFR5cGVFcnJvcihOQU1FICsgXCIjdG9KU09OIGlzbid0IGdlbmVyaWNcIik7XG4gICAgcmV0dXJuIGZyb20odGhpcyk7XG4gIH07XG59O1xuXG59LHtcIjEwXCI6MTAsXCIxN1wiOjE3fV0sMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gX2RlcmVxXyg5Myk7XG52YXIgZ2V0V2VhayA9IF9kZXJlcV8oNjYpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgYW5JbnN0YW5jZSA9IF9kZXJlcV8oNik7XG52YXIgZm9yT2YgPSBfZGVyZXFfKDM5KTtcbnZhciBjcmVhdGVBcnJheU1ldGhvZCA9IF9kZXJlcV8oMTIpO1xudmFyICRoYXMgPSBfZGVyZXFfKDQxKTtcbnZhciB2YWxpZGF0ZSA9IF9kZXJlcV8oMTI1KTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG5cbn0se1wiMTJcIjoxMixcIjEyNVwiOjEyNSxcIjM5XCI6MzksXCI0MVwiOjQxLFwiNTFcIjo1MSxcIjZcIjo2LFwiNjZcIjo2NixcIjdcIjo3LFwiOTNcIjo5M31dLDIyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgcmVkZWZpbmUgPSBfZGVyZXFfKDk0KTtcbnZhciByZWRlZmluZUFsbCA9IF9kZXJlcV8oOTMpO1xudmFyIG1ldGEgPSBfZGVyZXFfKDY2KTtcbnZhciBmb3JPZiA9IF9kZXJlcV8oMzkpO1xudmFyIGFuSW5zdGFuY2UgPSBfZGVyZXFfKDYpO1xudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgZmFpbHMgPSBfZGVyZXFfKDM1KTtcbnZhciAkaXRlckRldGVjdCA9IF9kZXJlcV8oNTYpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gX2RlcmVxXygxMDEpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gX2RlcmVxXyg0NSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuXG59LHtcIjEwMVwiOjEwMSxcIjMzXCI6MzMsXCIzNVwiOjM1LFwiMzlcIjozOSxcIjQwXCI6NDAsXCI0NVwiOjQ1LFwiNTFcIjo1MSxcIjU2XCI6NTYsXCI2XCI6NixcIjY2XCI6NjYsXCI5M1wiOjkzLFwiOTRcIjo5NH1dLDIzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjUuMCcgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbn0se31dLDI0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSBfZGVyZXFfKDcyKTtcbnZhciBjcmVhdGVEZXNjID0gX2RlcmVxXyg5Mik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuXG59LHtcIjcyXCI6NzIsXCI5MlwiOjkyfV0sMjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcblxufSx7XCIzXCI6M31dLDI2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSBfZGVyZXFfKDM1KTtcbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGx6ID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXM7XG4gIHZhciB5ID0gZC5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufSA6ICR0b0lTT1N0cmluZztcblxufSx7XCIzNVwiOjM1fV0sMjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTtcbnZhciBOVU1CRVIgPSAnbnVtYmVyJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07XG5cbn0se1wiMTIwXCI6MTIwLFwiN1wiOjd9XSwyODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG59LHt9XSwyOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG5cbn0se1wiMzVcIjozNX1dLDMwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGRvY3VtZW50ID0gX2RlcmVxXyg0MCkuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuXG59LHtcIjQwXCI6NDAsXCI1MVwiOjUxfV0sMzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG5cbn0se31dLDMyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IF9kZXJlcV8oODEpO1xudmFyIGdPUFMgPSBfZGVyZXFfKDc4KTtcbnZhciBwSUUgPSBfZGVyZXFfKDgyKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG59LHtcIjc4XCI6NzgsXCI4MVwiOjgxLFwiODJcIjo4Mn1dLDMzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBjb3JlID0gX2RlcmVxXygyMyk7XG52YXIgaGlkZSA9IF9kZXJlcV8oNDIpO1xudmFyIHJlZGVmaW5lID0gX2RlcmVxXyg5NCk7XG52YXIgY3R4ID0gX2RlcmVxXygyNSk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuXG59LHtcIjIzXCI6MjMsXCIyNVwiOjI1LFwiNDBcIjo0MCxcIjQyXCI6NDIsXCI5NFwiOjk0fV0sMzQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIE1BVENIID0gX2RlcmVxXygxMjgpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuXG59LHtcIjEyOFwiOjEyOH1dLDM1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxufSx7fV0sMzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIGhpZGUgPSBfZGVyZXFfKDQyKTtcbnZhciByZWRlZmluZSA9IF9kZXJlcV8oOTQpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgZGVmaW5lZCA9IF9kZXJlcV8oMjgpO1xudmFyIHdrcyA9IF9kZXJlcV8oMTI4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuICB2YXIgZm5zID0gZXhlYyhkZWZpbmVkLCBTWU1CT0wsICcnW0tFWV0pO1xuICB2YXIgc3RyZm4gPSBmbnNbMF07XG4gIHZhciByeGZuID0gZm5zWzFdO1xuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KSkge1xuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuXG59LHtcIjEyOFwiOjEyOCxcIjI4XCI6MjgsXCIzNVwiOjM1LFwiNDJcIjo0MixcIjk0XCI6OTR9XSwzNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG59LHtcIjdcIjo3fV0sMzg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSBfZGVyZXFfKDQ5KTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIHRvTGVuZ3RoID0gX2RlcmVxXygxMTgpO1xudmFyIGN0eCA9IF9kZXJlcV8oMjUpO1xudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gX2RlcmVxXygxMjgpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG5cbn0se1wiMTE4XCI6MTE4LFwiMTI4XCI6MTI4LFwiMjVcIjoyNSxcIjQ5XCI6NDksXCI1MVwiOjUxfV0sMzk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGN0eCA9IF9kZXJlcV8oMjUpO1xudmFyIGNhbGwgPSBfZGVyZXFfKDUzKTtcbnZhciBpc0FycmF5SXRlciA9IF9kZXJlcV8oNDgpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBnZXRJdGVyRm4gPSBfZGVyZXFfKDEyOSk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG5cbn0se1wiMTE4XCI6MTE4LFwiMTI5XCI6MTI5LFwiMjVcIjoyNSxcIjQ4XCI6NDgsXCI1M1wiOjUzLFwiN1wiOjd9XSw0MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbn0se31dLDQxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG5cbn0se31dLDQyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBkUCA9IF9kZXJlcV8oNzIpO1xudmFyIGNyZWF0ZURlc2MgPSBfZGVyZXFfKDkyKTtcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXygyOSkgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcblxufSx7XCIyOVwiOjI5LFwiNzJcIjo3MixcIjkyXCI6OTJ9XSw0MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZG9jdW1lbnQgPSBfZGVyZXFfKDQwKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG59LHtcIjQwXCI6NDB9XSw0NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9ICFfZGVyZXFfKDI5KSAmJiAhX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KF9kZXJlcV8oMzApKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcblxufSx7XCIyOVwiOjI5LFwiMzBcIjozMCxcIjM1XCI6MzV9XSw0NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oOTkpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuXG59LHtcIjUxXCI6NTEsXCI5OVwiOjk5fV0sNDY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuXG59LHt9XSw0NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IF9kZXJlcV8oMTgpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuXG59LHtcIjE4XCI6MTh9XSw0ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gX2RlcmVxXyg1OCk7XG52YXIgSVRFUkFUT1IgPSBfZGVyZXFfKDEyOCkoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG5cbn0se1wiMTI4XCI6MTI4LFwiNThcIjo1OH1dLDQ5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gX2RlcmVxXygxOCk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuXG59LHtcIjE4XCI6MTh9XSw1MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcblxufSx7XCI1MVwiOjUxfV0sNTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbn0se31dLDUyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgY29mID0gX2RlcmVxXygxOCk7XG52YXIgTUFUQ0ggPSBfZGVyZXFfKDEyOCkoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG5cbn0se1wiMTI4XCI6MTI4LFwiMThcIjoxOCxcIjUxXCI6NTF9XSw1MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuXG59LHtcIjdcIjo3fV0sNTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IF9kZXJlcV8oNzEpO1xudmFyIGRlc2NyaXB0b3IgPSBfZGVyZXFfKDkyKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IF9kZXJlcV8oMTAxKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuX2RlcmVxXyg0MikoSXRlcmF0b3JQcm90b3R5cGUsIF9kZXJlcV8oMTI4KSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG5cbn0se1wiMTAxXCI6MTAxLFwiMTI4XCI6MTI4LFwiNDJcIjo0MixcIjcxXCI6NzEsXCI5MlwiOjkyfV0sNTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSBfZGVyZXFfKDYwKTtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgcmVkZWZpbmUgPSBfZGVyZXFfKDk0KTtcbnZhciBoaWRlID0gX2RlcmVxXyg0Mik7XG52YXIgaGFzID0gX2RlcmVxXyg0MSk7XG52YXIgSXRlcmF0b3JzID0gX2RlcmVxXyg1OCk7XG52YXIgJGl0ZXJDcmVhdGUgPSBfZGVyZXFfKDU0KTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IF9kZXJlcV8oMTAxKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oNzkpO1xudmFyIElURVJBVE9SID0gX2RlcmVxXygxMjgpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG59LHtcIjEwMVwiOjEwMSxcIjEyOFwiOjEyOCxcIjMzXCI6MzMsXCI0MVwiOjQxLFwiNDJcIjo0MixcIjU0XCI6NTQsXCI1OFwiOjU4LFwiNjBcIjo2MCxcIjc5XCI6NzksXCI5NFwiOjk0fV0sNTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIElURVJBVE9SID0gX2RlcmVxXygxMjgpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG5cbn0se1wiMTI4XCI6MTI4fV0sNTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG5cbn0se31dLDU4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0ge307XG5cbn0se31dLDU5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBnZXRLZXlzID0gX2RlcmVxXyg4MSk7XG52YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBlbCkge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBpZiAoT1trZXkgPSBrZXlzW2luZGV4KytdXSA9PT0gZWwpIHJldHVybiBrZXk7XG59O1xuXG59LHtcIjExN1wiOjExNyxcIjgxXCI6ODF9XSw2MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuXG59LHt9XSw2MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcblxufSx7fV0sNjI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgc2lnbiA9IF9kZXJlcV8oNjUpO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIEVQU0lMT04gPSBwb3coMiwgLTUyKTtcbnZhciBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKTtcbnZhciBNQVgzMiA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpO1xudmFyIE1JTjMyID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xuICB2YXIgJGFicyA9IE1hdGguYWJzKHgpO1xuICB2YXIgJHNpZ24gPSBzaWduKHgpO1xuICB2YXIgYSwgcmVzdWx0O1xuICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcblxufSx7XCI2NVwiOjY1fV0sNjM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG5cbn0se31dLDY0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zY2FsZSB8fCBmdW5jdGlvbiBzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgaWYgKFxuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDBcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IHggIT0geFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5Mb3cgIT0gaW5Mb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluSGlnaCAhPSBpbkhpZ2hcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dExvdyAhPSBvdXRMb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dEhpZ2ggIT0gb3V0SGlnaFxuICApIHJldHVybiBOYU47XG4gIGlmICh4ID09PSBJbmZpbml0eSB8fCB4ID09PSAtSW5maW5pdHkpIHJldHVybiB4O1xuICByZXR1cm4gKHggLSBpbkxvdykgKiAob3V0SGlnaCAtIG91dExvdykgLyAoaW5IaWdoIC0gaW5Mb3cpICsgb3V0TG93O1xufTtcblxufSx7fV0sNjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcblxufSx7fV0sNjY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIE1FVEEgPSBfZGVyZXFfKDEyNCkoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGhhcyA9IF9kZXJlcV8oNDEpO1xudmFyIHNldERlc2MgPSBfZGVyZXFfKDcyKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG5cbn0se1wiMTI0XCI6MTI0LFwiMzVcIjozNSxcIjQxXCI6NDEsXCI1MVwiOjUxLFwiNzJcIjo3Mn1dLDY3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBNYXAgPSBfZGVyZXFfKDE2MCk7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHNoYXJlZCA9IF9kZXJlcV8oMTAzKSgnbWV0YWRhdGEnKTtcbnZhciBzdG9yZSA9IHNoYXJlZC5zdG9yZSB8fCAoc2hhcmVkLnN0b3JlID0gbmV3IChfZGVyZXFfKDI2NikpKCkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKSB7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZiAoIXRhcmdldE1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZiAoIWtleU1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgaWYgKG1ldGFkYXRhTWFwKSBtZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24gKE8pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07XG5cbn0se1wiMTAzXCI6MTAzLFwiMTYwXCI6MTYwLFwiMjY2XCI6MjY2LFwiMzNcIjozM31dLDY4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBtYWNyb3Rhc2sgPSBfZGVyZXFfKDExMykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSBfZGVyZXFfKDE4KShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyXG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG5cbn0se1wiMTEzXCI6MTEzLFwiMThcIjoxOCxcIjQwXCI6NDB9XSw2OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IF9kZXJlcV8oMyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuXG59LHtcIjNcIjozfV0sNzA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgPSBfZGVyZXFfKDgxKTtcbnZhciBnT1BTID0gX2RlcmVxXyg3OCk7XG52YXIgcElFID0gX2RlcmVxXyg4Mik7XG52YXIgdG9PYmplY3QgPSBfZGVyZXFfKDExOSk7XG52YXIgSU9iamVjdCA9IF9kZXJlcV8oNDcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIGlmIChpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKSBUW2tleV0gPSBTW2tleV07XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcblxufSx7XCIxMTlcIjoxMTksXCIzNVwiOjM1LFwiNDdcIjo0NyxcIjc4XCI6NzgsXCI4MVwiOjgxLFwiODJcIjo4Mn1dLDcxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBkUHMgPSBfZGVyZXFfKDczKTtcbnZhciBlbnVtQnVnS2V5cyA9IF9kZXJlcV8oMzEpO1xudmFyIElFX1BST1RPID0gX2RlcmVxXygxMDIpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IF9kZXJlcV8oMzApKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBfZGVyZXFfKDQzKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG5cbn0se1wiMTAyXCI6MTAyLFwiMzBcIjozMCxcIjMxXCI6MzEsXCI0M1wiOjQzLFwiN1wiOjcsXCI3M1wiOjczfV0sNzI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBJRThfRE9NX0RFRklORSA9IF9kZXJlcV8oNDQpO1xudmFyIHRvUHJpbWl0aXZlID0gX2RlcmVxXygxMjApO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSBfZGVyZXFfKDI5KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuXG59LHtcIjEyMFwiOjEyMCxcIjI5XCI6MjksXCI0NFwiOjQ0LFwiN1wiOjd9XSw3MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZFAgPSBfZGVyZXFfKDcyKTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgZ2V0S2V5cyA9IF9kZXJlcV8oODEpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oMjkpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuXG59LHtcIjI5XCI6MjksXCI3XCI6NyxcIjcyXCI6NzIsXCI4MVwiOjgxfV0sNzQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSBfZGVyZXFfKDYwKSB8fCAhX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICBkZWxldGUgX2RlcmVxXyg0MClbS107XG59KTtcblxufSx7XCIzNVwiOjM1LFwiNDBcIjo0MCxcIjYwXCI6NjB9XSw3NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgcElFID0gX2RlcmVxXyg4Mik7XG52YXIgY3JlYXRlRGVzYyA9IF9kZXJlcV8oOTIpO1xudmFyIHRvSU9iamVjdCA9IF9kZXJlcV8oMTE3KTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTtcbnZhciBoYXMgPSBfZGVyZXFfKDQxKTtcbnZhciBJRThfRE9NX0RFRklORSA9IF9kZXJlcV8oNDQpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSBfZGVyZXFfKDI5KSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG5cbn0se1wiMTE3XCI6MTE3LFwiMTIwXCI6MTIwLFwiMjlcIjoyOSxcIjQxXCI6NDEsXCI0NFwiOjQ0LFwiODJcIjo4MixcIjkyXCI6OTJ9XSw3NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpO1xudmFyIGdPUE4gPSBfZGVyZXFfKDc3KS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG5cbn0se1wiMTE3XCI6MTE3LFwiNzdcIjo3N31dLDc3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IF9kZXJlcV8oODApO1xudmFyIGhpZGRlbktleXMgPSBfZGVyZXFfKDMxKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG5cbn0se1wiMzFcIjozMSxcIjgwXCI6ODB9XSw3ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG59LHt9XSw3OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IF9kZXJlcV8oNDEpO1xudmFyIHRvT2JqZWN0ID0gX2RlcmVxXygxMTkpO1xudmFyIElFX1BST1RPID0gX2RlcmVxXygxMDIpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG5cbn0se1wiMTAyXCI6MTAyLFwiMTE5XCI6MTE5LFwiNDFcIjo0MX1dLDgwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBoYXMgPSBfZGVyZXFfKDQxKTtcbnZhciB0b0lPYmplY3QgPSBfZGVyZXFfKDExNyk7XG52YXIgYXJyYXlJbmRleE9mID0gX2RlcmVxXygxMSkoZmFsc2UpO1xudmFyIElFX1BST1RPID0gX2RlcmVxXygxMDIpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxufSx7XCIxMDJcIjoxMDIsXCIxMVwiOjExLFwiMTE3XCI6MTE3LFwiNDFcIjo0MX1dLDgxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gX2RlcmVxXyg4MCk7XG52YXIgZW51bUJ1Z0tleXMgPSBfZGVyZXFfKDMxKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG5cbn0se1wiMzFcIjozMSxcIjgwXCI6ODB9XSw4MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5leHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxufSx7fV0sODM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGNvcmUgPSBfZGVyZXFfKDIzKTtcbnZhciBmYWlscyA9IF9kZXJlcV8oMzUpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG5cbn0se1wiMjNcIjoyMyxcIjMzXCI6MzMsXCIzNVwiOjM1fV0sODQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGdldEtleXMgPSBfZGVyZXFfKDgxKTtcbnZhciB0b0lPYmplY3QgPSBfZGVyZXFfKDExNyk7XG52YXIgaXNFbnVtID0gX2RlcmVxXyg4MikuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlzRW50cmllcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gZ2V0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoTywga2V5ID0ga2V5c1tpKytdKSkge1xuICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxufSx7XCIxMTdcIjoxMTcsXCI4MVwiOjgxLFwiODJcIjo4Mn1dLDg1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOID0gX2RlcmVxXyg3Nyk7XG52YXIgZ09QUyA9IF9kZXJlcV8oNzgpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBSZWZsZWN0ID0gX2RlcmVxXyg0MCkuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcblxufSx7XCI0MFwiOjQwLFwiN1wiOjcsXCI3N1wiOjc3LFwiNzhcIjo3OH1dLDg2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkcGFyc2VGbG9hdCA9IF9kZXJlcV8oNDApLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSBfZGVyZXFfKDExMSkudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQoX2RlcmVxXygxMTIpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG5cbn0se1wiMTExXCI6MTExLFwiMTEyXCI6MTEyLFwiNDBcIjo0MH1dLDg3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkcGFyc2VJbnQgPSBfZGVyZXFfKDQwKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IF9kZXJlcV8oMTExKS50cmltO1xudmFyIHdzID0gX2RlcmVxXygxMTIpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcblxufSx7XCIxMTFcIjoxMTEsXCIxMTJcIjoxMTIsXCI0MFwiOjQwfV0sODg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIHBhdGggPSBfZGVyZXFfKDg5KTtcbnZhciBpbnZva2UgPSBfZGVyZXFfKDQ2KTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoLyogLi4ucGFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIHBhcmdzID0gQXJyYXkobGVuZ3RoKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgXyA9IHBhdGguXztcbiAgdmFyIGhvbGRlciA9IGZhbHNlO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgaWYgKChwYXJnc1tpXSA9IGFyZ3VtZW50c1tpKytdKSA9PT0gXykgaG9sZGVyID0gdHJ1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGsgPSAwO1xuICAgIHZhciBhcmdzO1xuICAgIGlmICghaG9sZGVyICYmICFhTGVuKSByZXR1cm4gaW52b2tlKGZuLCBwYXJncywgdGhhdCk7XG4gICAgYXJncyA9IHBhcmdzLnNsaWNlKCk7XG4gICAgaWYgKGhvbGRlcikgZm9yICg7bGVuZ3RoID4gajsgaisrKSBpZiAoYXJnc1tqXSA9PT0gXykgYXJnc1tqXSA9IGFyZ3VtZW50c1trKytdO1xuICAgIHdoaWxlIChhTGVuID4gaykgYXJncy5wdXNoKGFyZ3VtZW50c1trKytdKTtcbiAgICByZXR1cm4gaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbn07XG5cbn0se1wiM1wiOjMsXCI0NlwiOjQ2LFwiODlcIjo4OX1dLDg5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXyg0MCk7XG5cbn0se1wiNDBcIjo0MH1dLDkwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG5cbn0se31dLDkxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IF9kZXJlcV8oNjkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuXG59LHtcIjY5XCI6Njl9XSw5MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuXG59LHt9XSw5MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgcmVkZWZpbmUgPSBfZGVyZXFfKDk0KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG59LHtcIjk0XCI6OTR9XSw5NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7XG52YXIgaGlkZSA9IF9kZXJlcV8oNDIpO1xudmFyIGhhcyA9IF9kZXJlcV8oNDEpO1xudmFyIFNSQyA9IF9kZXJlcV8oMTI0KSgnc3JjJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxuX2RlcmVxXygyMykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcblxufSx7XCIxMjRcIjoxMjQsXCIyM1wiOjIzLFwiNDBcIjo0MCxcIjQxXCI6NDEsXCI0MlwiOjQyfV0sOTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocmVnRXhwLCByZXBsYWNlKSB7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XG4gIH0gOiByZXBsYWNlO1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIFN0cmluZyhpdCkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2VyKTtcbiAgfTtcbn07XG5cbn0se31dLDk2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcblxufSx7fV0sOTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyIGN0eCA9IF9kZXJlcV8oMjUpO1xudmFyIGZvck9mID0gX2RlcmVxXygzOSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgZnJvbTogZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBGbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXBGbiA9IGFyZ3VtZW50c1sxXTtcbiAgICB2YXIgbWFwcGluZywgQSwgbiwgY2I7XG4gICAgYUZ1bmN0aW9uKHRoaXMpO1xuICAgIG1hcHBpbmcgPSBtYXBGbiAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChtYXBwaW5nKSBhRnVuY3Rpb24obWFwRm4pO1xuICAgIGlmIChzb3VyY2UgPT0gdW5kZWZpbmVkKSByZXR1cm4gbmV3IHRoaXMoKTtcbiAgICBBID0gW107XG4gICAgaWYgKG1hcHBpbmcpIHtcbiAgICAgIG4gPSAwO1xuICAgICAgY2IgPSBjdHgobWFwRm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBmdW5jdGlvbiAobmV4dEl0ZW0pIHtcbiAgICAgICAgQS5wdXNoKGNiKG5leHRJdGVtLCBuKyspKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBBLnB1c2gsIEEpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuXG59LHtcIjI1XCI6MjUsXCIzXCI6MyxcIjMzXCI6MzMsXCIzOVwiOjM5fV0sOTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIEEgPSBBcnJheShsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkgQVtsZW5ndGhdID0gYXJndW1lbnRzW2xlbmd0aF07XG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICB9IH0pO1xufTtcblxufSx7XCIzM1wiOjMzfV0sOTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IF9kZXJlcV8oMjUpKEZ1bmN0aW9uLmNhbGwsIF9kZXJlcV8oNzUpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuXG59LHtcIjI1XCI6MjUsXCI1MVwiOjUxLFwiN1wiOjcsXCI3NVwiOjc1fV0sMTAwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBkUCA9IF9kZXJlcV8oNzIpO1xudmFyIERFU0NSSVBUT1JTID0gX2RlcmVxXygyOSk7XG52YXIgU1BFQ0lFUyA9IF9kZXJlcV8oMTI4KSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuXG59LHtcIjEyOFwiOjEyOCxcIjI5XCI6MjksXCI0MFwiOjQwLFwiNzJcIjo3Mn1dLDEwMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZGVmID0gX2RlcmVxXyg3MikuZjtcbnZhciBoYXMgPSBfZGVyZXFfKDQxKTtcbnZhciBUQUcgPSBfZGVyZXFfKDEyOCkoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG5cbn0se1wiMTI4XCI6MTI4LFwiNDFcIjo0MSxcIjcyXCI6NzJ9XSwxMDI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIHNoYXJlZCA9IF9kZXJlcV8oMTAzKSgna2V5cycpO1xudmFyIHVpZCA9IF9kZXJlcV8oMTI0KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcblxufSx7XCIxMDNcIjoxMDMsXCIxMjRcIjoxMjR9XSwxMDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTtcblxufSx7XCI0MFwiOjQwfV0sMTA0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyIFNQRUNJRVMgPSBfZGVyZXFfKDEyOCkoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG5cbn0se1wiMTI4XCI6MTI4LFwiM1wiOjMsXCI3XCI6N31dLDEwNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSBfZGVyZXFfKDM1KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG5cbn0se1wiMzVcIjozNX1dLDEwNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xudmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbn0se1wiMTE2XCI6MTE2LFwiMjhcIjoyOH1dLDEwNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gX2RlcmVxXyg1Mik7XG52YXIgZGVmaW5lZCA9IF9kZXJlcV8oMjgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcblxufSx7XCIyOFwiOjI4LFwiNTJcIjo1Mn1dLDEwODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgZGVmaW5lZCA9IF9kZXJlcV8oMjgpO1xudmFyIHF1b3QgPSAvXCIvZztcbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgdmFyIHAxID0gJzwnICsgdGFnO1xuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgZXhlYykge1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSksICdTdHJpbmcnLCBPKTtcbn07XG5cbn0se1wiMjhcIjoyOCxcIjMzXCI6MzMsXCIzNVwiOjM1fV0sMTA5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG52YXIgcmVwZWF0ID0gX2RlcmVxXygxMTApO1xudmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xuICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICB2YXIgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcbn07XG5cbn0se1wiMTEwXCI6MTEwLFwiMTE4XCI6MTE4LFwiMjhcIjoyOH1dLDExMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xudmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcblxufSx7XCIxMTZcIjoxMTYsXCIyOFwiOjI4fV0sMTExOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgZGVmaW5lZCA9IF9kZXJlcV8oMjgpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgc3BhY2VzID0gX2RlcmVxXygxMTIpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuXG59LHtcIjExMlwiOjExMixcIjI4XCI6MjgsXCIzM1wiOjMzLFwiMzVcIjozNX1dLDExMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG5cbn0se31dLDExMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgY3R4ID0gX2RlcmVxXygyNSk7XG52YXIgaW52b2tlID0gX2RlcmVxXyg0Nik7XG52YXIgaHRtbCA9IF9kZXJlcV8oNDMpO1xudmFyIGNlbCA9IF9kZXJlcV8oMzApO1xudmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChfZGVyZXFfKDE4KShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuXG59LHtcIjE4XCI6MTgsXCIyNVwiOjI1LFwiMzBcIjozMCxcIjQwXCI6NDAsXCI0M1wiOjQzLFwiNDZcIjo0Nn1dLDExNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcblxufSx7XCIxMTZcIjoxMTZ9XSwxMTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxudmFyIHRvSW50ZWdlciA9IF9kZXJlcV8oMTE2KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG5cbn0se1wiMTE2XCI6MTE2LFwiMTE4XCI6MTE4fV0sMTE2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuXG59LHt9XSwxMTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IF9kZXJlcV8oNDcpO1xudmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cbn0se1wiMjhcIjoyOCxcIjQ3XCI6NDd9XSwxMTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG5cbn0se1wiMTE2XCI6MTE2fV0sMTE5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gX2RlcmVxXygyOCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cbn0se1wiMjhcIjoyOH1dLDEyMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cbn0se1wiNTFcIjo1MX1dLDEyMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5pZiAoX2RlcmVxXygyOSkpIHtcbiAgdmFyIExJQlJBUlkgPSBfZGVyZXFfKDYwKTtcbiAgdmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xuICB2YXIgZmFpbHMgPSBfZGVyZXFfKDM1KTtcbiAgdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbiAgdmFyICR0eXBlZCA9IF9kZXJlcV8oMTIzKTtcbiAgdmFyICRidWZmZXIgPSBfZGVyZXFfKDEyMik7XG4gIHZhciBjdHggPSBfZGVyZXFfKDI1KTtcbiAgdmFyIGFuSW5zdGFuY2UgPSBfZGVyZXFfKDYpO1xuICB2YXIgcHJvcGVydHlEZXNjID0gX2RlcmVxXyg5Mik7XG4gIHZhciBoaWRlID0gX2RlcmVxXyg0Mik7XG4gIHZhciByZWRlZmluZUFsbCA9IF9kZXJlcV8oOTMpO1xuICB2YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xuICB2YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG4gIHZhciB0b0luZGV4ID0gX2RlcmVxXygxMTUpO1xuICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gX2RlcmVxXygxMTQpO1xuICB2YXIgdG9QcmltaXRpdmUgPSBfZGVyZXFfKDEyMCk7XG4gIHZhciBoYXMgPSBfZGVyZXFfKDQxKTtcbiAgdmFyIGNsYXNzb2YgPSBfZGVyZXFfKDE3KTtcbiAgdmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG4gIHZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbiAgdmFyIGlzQXJyYXlJdGVyID0gX2RlcmVxXyg0OCk7XG4gIHZhciBjcmVhdGUgPSBfZGVyZXFfKDcxKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7XG4gIHZhciBnT1BOID0gX2RlcmVxXyg3NykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IF9kZXJlcV8oMTI5KTtcbiAgdmFyIHVpZCA9IF9kZXJlcV8oMTI0KTtcbiAgdmFyIHdrcyA9IF9kZXJlcV8oMTI4KTtcbiAgdmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gX2RlcmVxXygxMik7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gX2RlcmVxXygxMSk7XG4gIHZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSBfZGVyZXFfKDEwNCk7XG4gIHZhciBBcnJheUl0ZXJhdG9ycyA9IF9kZXJlcV8oMTQxKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IF9kZXJlcV8oNTgpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSBfZGVyZXFfKDU2KTtcbiAgdmFyIHNldFNwZWNpZXMgPSBfZGVyZXFfKDEwMCk7XG4gIHZhciBhcnJheUZpbGwgPSBfZGVyZXFfKDkpO1xuICB2YXIgYXJyYXlDb3B5V2l0aGluID0gX2RlcmVxXyg4KTtcbiAgdmFyICREUCA9IF9kZXJlcV8oNzIpO1xuICB2YXIgJEdPUEQgPSBfZGVyZXFfKDc1KTtcbiAgdmFyIGRQID0gJERQLmY7XG4gIHZhciBnT1BEID0gJEdPUEQuZjtcbiAgdmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbiAgdmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG4gIHZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG4gIHZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuICB2YXIgU0hBUkVEX0JVRkZFUiA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSO1xuICB2YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xuICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXlbUFJPVE9UWVBFXTtcbiAgdmFyICRBcnJheUJ1ZmZlciA9ICRidWZmZXIuQXJyYXlCdWZmZXI7XG4gIHZhciAkRGF0YVZpZXcgPSAkYnVmZmVyLkRhdGFWaWV3O1xuICB2YXIgYXJyYXlGb3JFYWNoID0gY3JlYXRlQXJyYXlNZXRob2QoMCk7XG4gIHZhciBhcnJheUZpbHRlciA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpO1xuICB2YXIgYXJyYXlTb21lID0gY3JlYXRlQXJyYXlNZXRob2QoMyk7XG4gIHZhciBhcnJheUV2ZXJ5ID0gY3JlYXRlQXJyYXlNZXRob2QoNCk7XG4gIHZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbiAgdmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG4gIHZhciBhcnJheUluY2x1ZGVzID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKTtcbiAgdmFyIGFycmF5SW5kZXhPZiA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpO1xuICB2YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XG4gIHZhciBhcnJheUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzO1xuICB2YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcbiAgdmFyIGFycmF5TGFzdEluZGV4T2YgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mO1xuICB2YXIgYXJyYXlSZWR1Y2UgPSBBcnJheVByb3RvLnJlZHVjZTtcbiAgdmFyIGFycmF5UmVkdWNlUmlnaHQgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0O1xuICB2YXIgYXJyYXlKb2luID0gQXJyYXlQcm90by5qb2luO1xuICB2YXIgYXJyYXlTb3J0ID0gQXJyYXlQcm90by5zb3J0O1xuICB2YXIgYXJyYXlTbGljZSA9IEFycmF5UHJvdG8uc2xpY2U7XG4gIHZhciBhcnJheVRvU3RyaW5nID0gQXJyYXlQcm90by50b1N0cmluZztcbiAgdmFyIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nO1xuICB2YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG4gIHZhciBUQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG4gIHZhciBUWVBFRF9DT05TVFJVQ1RPUiA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKTtcbiAgdmFyIERFRl9DT05TVFJVQ1RPUiA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBBTExfQ09OU1RSVUNUT1JTID0gJHR5cGVkLkNPTlNUUjtcbiAgdmFyIFRZUEVEX0FSUkFZID0gJHR5cGVkLlRZUEVEO1xuICB2YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xuICB2YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xuXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbiAgfSk7XG5cbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24gKGl0LCBCWVRFUykge1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KSByZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbiAoQywgbGVuZ3RoKSB7XG4gICAgaWYgKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7XG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24gKE8sIGxpc3QpIHtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSwgaW50ZXJuYWwpIHtcbiAgICBkUChpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH0gfSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspIHtcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgICB9IE8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nICYmIGFMZW4gPiAyKSBtYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aDtcbiAgICAgIHZhciBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgICAgICB2YWx1ZSA9IHRoYXRbaW5kZXhdO1xuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIE8gPSB2YWxpZGF0ZSh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgICAgIHZhciAkYmVnaW4gPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyogLCBvZmZzZXQgKi8pIHtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgdmFyIHNyYyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgaWYgKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApIHtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpO1xuICB9O1xuXG4gIGlmICghQUxMX0NPTlNUUlVDVE9SUykge1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiA9ICRzZXREZXNjO1xuICB9XG5cbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnR5OiAkc2V0RGVzY1xuICB9KTtcblxuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICRzbGljZSxcbiAgICBzZXQ6ICRzZXQsXG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgS0VZO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIEtFWTtcbiAgICB2YXIgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXTtcbiAgICB2YXIgQmFzZSA9IFR5cGVkQXJyYXkgfHwge307XG4gICAgdmFyIFRBQyA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSk7XG4gICAgdmFyIEZPUkNFRCA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWO1xuICAgIHZhciBPID0ge307XG4gICAgdmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xuICAgICAgICAgIGI6IGJ1ZmZlcixcbiAgICAgICAgICBvOiBvZmZzZXQsXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBlOiBsZW5ndGgsXG4gICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheSgxKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0pIHx8ICEkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0sIHRydWUpKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xuICAgICAgICB2YXIga2xhc3M7XG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgQmFzZSh0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheSkpIGhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYgKCFMSUJSQVJZKSBUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdO1xuICAgIHZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yXG4gICAgICAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcbiAgICB2YXIgJGl0ZXJhdG9yID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZiAoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSB7XG4gICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFU1xuICAgIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IEJhc2Uub2YuY2FsbChUeXBlZEFycmF5LCAxKTsgfSksIE5BTUUsIHtcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7IHNldDogJHNldCB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcblxuICAgIGlmICghTElCUkFSWSAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgPSBhcnJheVRvU3RyaW5nO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7IHNsaWNlOiAkc2xpY2UgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbiAgICB9KSksIE5BTUUsIHsgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZyB9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmICghTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbn0se1wiMTAwXCI6MTAwLFwiMTA0XCI6MTA0LFwiMTFcIjoxMSxcIjExNFwiOjExNCxcIjExNVwiOjExNSxcIjExNlwiOjExNixcIjExOFwiOjExOCxcIjExOVwiOjExOSxcIjEyXCI6MTIsXCIxMjBcIjoxMjAsXCIxMjJcIjoxMjIsXCIxMjNcIjoxMjMsXCIxMjRcIjoxMjQsXCIxMjhcIjoxMjgsXCIxMjlcIjoxMjksXCIxNDFcIjoxNDEsXCIxN1wiOjE3LFwiMjVcIjoyNSxcIjI5XCI6MjksXCIzM1wiOjMzLFwiMzVcIjozNSxcIjQwXCI6NDAsXCI0MVwiOjQxLFwiNDJcIjo0MixcIjQ4XCI6NDgsXCI1MVwiOjUxLFwiNTZcIjo1NixcIjU4XCI6NTgsXCI2XCI6NixcIjYwXCI6NjAsXCI3MVwiOjcxLFwiNzJcIjo3MixcIjc1XCI6NzUsXCI3N1wiOjc3LFwiNzlcIjo3OSxcIjhcIjo4LFwiOVwiOjksXCI5MlwiOjkyLFwiOTNcIjo5M31dLDEyMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7XG52YXIgREVTQ1JJUFRPUlMgPSBfZGVyZXFfKDI5KTtcbnZhciBMSUJSQVJZID0gX2RlcmVxXyg2MCk7XG52YXIgJHR5cGVkID0gX2RlcmVxXygxMjMpO1xudmFyIGhpZGUgPSBfZGVyZXFfKDQyKTtcbnZhciByZWRlZmluZUFsbCA9IF9kZXJlcV8oOTMpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgYW5JbnN0YW5jZSA9IF9kZXJlcV8oNik7XG52YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xudmFyIHRvTGVuZ3RoID0gX2RlcmVxXygxMTgpO1xudmFyIHRvSW5kZXggPSBfZGVyZXFfKDExNSk7XG52YXIgZ09QTiA9IF9kZXJlcV8oNzcpLmY7XG52YXIgZFAgPSBfZGVyZXFfKDcyKS5mO1xudmFyIGFycmF5RmlsbCA9IF9kZXJlcV8oOSk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSBfZGVyZXFfKDEwMSk7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCEnO1xudmFyICRBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xudmFyICREYXRhVmlldyA9IGdsb2JhbFtEQVRBX1ZJRVddO1xudmFyIE1hdGggPSBnbG9iYWwuTWF0aDtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXNcbnZhciBJbmZpbml0eSA9IGdsb2JhbC5JbmZpbml0eTtcbnZhciBCYXNlQnVmZmVyID0gJEFycmF5QnVmZmVyO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcbnZhciBCVUZGRVIgPSAnYnVmZmVyJztcbnZhciBCWVRFX0xFTkdUSCA9ICdieXRlTGVuZ3RoJztcbnZhciBCWVRFX09GRlNFVCA9ICdieXRlT2Zmc2V0JztcbnZhciAkQlVGRkVSID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSO1xudmFyICRMRU5HVEggPSBERVNDUklQVE9SUyA/ICdfbCcgOiBCWVRFX0xFTkdUSDtcbnZhciAkT0ZGU0VUID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7XG5cbi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG5mdW5jdGlvbiBwYWNrSUVFRTc1NCh2YWx1ZSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBidWZmZXIgPSBBcnJheShuQnl0ZXMpO1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG4gIHZhciBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xuICB2YXIgaSA9IG5CeXRlcyAtIDE7XG4gIHZhciBzID0gYnVmZmVyW2ktLV07XG4gIHZhciBlID0gcyAmIDEyNztcbiAgdmFyIG07XG4gIHMgPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59XG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59XG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pO1xufVxuXG5mdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59XG5mdW5jdGlvbiBzZXQodmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn1cblxuaWYgKCEkdHlwZWQuQUJWKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHRoaXMuX2IgPSBhcnJheUZpbGwuY2FsbChBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG5cbn0se1wiMTAxXCI6MTAxLFwiMTE1XCI6MTE1LFwiMTE2XCI6MTE2LFwiMTE4XCI6MTE4LFwiMTIzXCI6MTIzLFwiMjlcIjoyOSxcIjM1XCI6MzUsXCI0MFwiOjQwLFwiNDJcIjo0MixcIjZcIjo2LFwiNjBcIjo2MCxcIjcyXCI6NzIsXCI3N1wiOjc3LFwiOVwiOjksXCI5M1wiOjkzfV0sMTIzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBoaWRlID0gX2RlcmVxXyg0Mik7XG52YXIgdWlkID0gX2RlcmVxXygxMjQpO1xudmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpO1xudmFyIFZJRVcgPSB1aWQoJ3ZpZXcnKTtcbnZhciBBQlYgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KTtcbnZhciBDT05TVFIgPSBBQlY7XG52YXIgaSA9IDA7XG52YXIgbCA9IDk7XG52YXIgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6IEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiBUWVBFRCxcbiAgVklFVzogVklFV1xufTtcblxufSx7XCIxMjRcIjoxMjQsXCI0MFwiOjQwLFwiNDJcIjo0Mn1dLDEyNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcblxufSx7fV0sMTI1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG5cbn0se1wiNTFcIjo1MX1dLDEyNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7XG52YXIgY29yZSA9IF9kZXJlcV8oMjMpO1xudmFyIExJQlJBUlkgPSBfZGVyZXFfKDYwKTtcbnZhciB3a3NFeHQgPSBfZGVyZXFfKDEyNyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSBfZGVyZXFfKDcyKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuXG59LHtcIjEyN1wiOjEyNyxcIjIzXCI6MjMsXCI0MFwiOjQwLFwiNjBcIjo2MCxcIjcyXCI6NzJ9XSwxMjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuZXhwb3J0cy5mID0gX2RlcmVxXygxMjgpO1xuXG59LHtcIjEyOFwiOjEyOH1dLDEyODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgc3RvcmUgPSBfZGVyZXFfKDEwMykoJ3drcycpO1xudmFyIHVpZCA9IF9kZXJlcV8oMTI0KTtcbnZhciBTeW1ib2wgPSBfZGVyZXFfKDQwKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcblxufSx7XCIxMDNcIjoxMDMsXCIxMjRcIjoxMjQsXCI0MFwiOjQwfV0sMTI5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBjbGFzc29mID0gX2RlcmVxXygxNyk7XG52YXIgSVRFUkFUT1IgPSBfZGVyZXFfKDEyOCkoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gX2RlcmVxXyg1OCk7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oMjMpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG5cbn0se1wiMTI4XCI6MTI4LFwiMTdcIjoxNyxcIjIzXCI6MjMsXCI1OFwiOjU4fV0sMTMwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmdyL1JleEV4cC5lc2NhcGVcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJHJlID0gX2RlcmVxXyg5NSkoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVnRXhwJywgeyBlc2NhcGU6IGZ1bmN0aW9uIGVzY2FwZShpdCkgeyByZXR1cm4gJHJlKGl0KTsgfSB9KTtcblxufSx7XCIzM1wiOjMzLFwiOTVcIjo5NX1dLDEzMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IF9kZXJlcV8oOCkgfSk7XG5cbl9kZXJlcV8oNSkoJ2NvcHlXaXRoaW4nKTtcblxufSx7XCIzM1wiOjMzLFwiNVwiOjUsXCI4XCI6OH1dLDEzMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRldmVyeSA9IF9kZXJlcV8oMTIpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFfZGVyZXFfKDEwNSkoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjEyXCI6MTIsXCIzM1wiOjMzfV0sMTMzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgZmlsbDogX2RlcmVxXyg5KSB9KTtcblxuX2RlcmVxXyg1KSgnZmlsbCcpO1xuXG59LHtcIjMzXCI6MzMsXCI1XCI6NSxcIjlcIjo5fV0sMTM0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGZpbHRlciA9IF9kZXJlcV8oMTIpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFfZGVyZXFfKDEwNSkoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cbn0se1wiMTA1XCI6MTA1LFwiMTJcIjoxMixcIjMzXCI6MzN9XSwxMzU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRmaW5kID0gX2RlcmVxXygxMikoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbl9kZXJlcV8oNSkoS0VZKTtcblxufSx7XCIxMlwiOjEyLFwiMzNcIjozMyxcIjVcIjo1fV0sMTM2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGZpbmQgPSBfZGVyZXFfKDEyKSg1KTtcbnZhciBLRVkgPSAnZmluZCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuX2RlcmVxXyg1KShLRVkpO1xuXG59LHtcIjEyXCI6MTIsXCIzM1wiOjMzLFwiNVwiOjV9XSwxMzc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciAkZm9yRWFjaCA9IF9kZXJlcV8oMTIpKDApO1xudmFyIFNUUklDVCA9IF9kZXJlcV8oMTA1KShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjEyXCI6MTIsXCIzM1wiOjMzfV0sMTM4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSBfZGVyZXFfKDI1KTtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9PYmplY3QgPSBfZGVyZXFfKDExOSk7XG52YXIgY2FsbCA9IF9kZXJlcV8oNTMpO1xudmFyIGlzQXJyYXlJdGVyID0gX2RlcmVxXyg0OCk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSBfZGVyZXFfKDI0KTtcbnZhciBnZXRJdGVyRm4gPSBfZGVyZXFfKDEyOSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIV9kZXJlcV8oNTYpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG59LHtcIjExOFwiOjExOCxcIjExOVwiOjExOSxcIjEyOVwiOjEyOSxcIjI0XCI6MjQsXCIyNVwiOjI1LFwiMzNcIjozMyxcIjQ4XCI6NDgsXCI1M1wiOjUzLFwiNTZcIjo1Nn1dLDEzOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRpbmRleE9mID0gX2RlcmVxXygxMSkoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIV9kZXJlcV8oMTA1KSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjExXCI6MTEsXCIzM1wiOjMzfV0sMTQwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiBfZGVyZXFfKDQ5KSB9KTtcblxufSx7XCIzM1wiOjMzLFwiNDlcIjo0OX1dLDE0MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IF9kZXJlcV8oNSk7XG52YXIgc3RlcCA9IF9kZXJlcV8oNTcpO1xudmFyIEl0ZXJhdG9ycyA9IF9kZXJlcV8oNTgpO1xudmFyIHRvSU9iamVjdCA9IF9kZXJlcV8oMTE3KTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSBfZGVyZXFfKDU1KShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG59LHtcIjExN1wiOjExNyxcIjVcIjo1LFwiNTVcIjo1NSxcIjU3XCI6NTcsXCI1OFwiOjU4fV0sMTQyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHRvSU9iamVjdCA9IF9kZXJlcV8oMTE3KTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoX2RlcmVxXyg0NykgIT0gT2JqZWN0IHx8ICFfZGVyZXFfKDEwNSkoYXJyYXlKb2luKSksICdBcnJheScsIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjExN1wiOjExNyxcIjMzXCI6MzMsXCI0N1wiOjQ3fV0sMTQzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpO1xudmFyIHRvSW50ZWdlciA9IF9kZXJlcV8oMTE2KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciAkbmF0aXZlID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIV9kZXJlcV8oMTA1KSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcblxufSx7XCIxMDVcIjoxMDUsXCIxMTZcIjoxMTYsXCIxMTdcIjoxMTcsXCIxMThcIjoxMTgsXCIzM1wiOjMzfV0sMTQ0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJG1hcCA9IF9kZXJlcV8oMTIpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFfZGVyZXFfKDEwNSkoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjEyXCI6MTIsXCIzM1wiOjMzfV0sMTQ1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSBfZGVyZXFfKDI0KTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZSAoYUxlbiA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG59LHtcIjI0XCI6MjQsXCIzM1wiOjMzLFwiMzVcIjozNX1dLDE0NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRyZWR1Y2UgPSBfZGVyZXFfKDEzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXygxMDUpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTtcblxufSx7XCIxMDVcIjoxMDUsXCIxM1wiOjEzLFwiMzNcIjozM31dLDE0NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRyZWR1Y2UgPSBfZGVyZXFfKDEzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXygxMDUpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjEzXCI6MTMsXCIzM1wiOjMzfV0sMTQ4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgaHRtbCA9IF9kZXJlcV8oNDMpO1xudmFyIGNvZiA9IF9kZXJlcV8oMTgpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IF9kZXJlcV8oMTE0KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gQXJyYXkoc2l6ZSk7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgc2l6ZTsgaSsrKSBjbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xuICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59KTtcblxufSx7XCIxMTRcIjoxMTQsXCIxMThcIjoxMTgsXCIxOFwiOjE4LFwiMzNcIjozMyxcIjM1XCI6MzUsXCI0M1wiOjQzfV0sMTQ5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJHNvbWUgPSBfZGVyZXFfKDEyKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXygxMDUpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjEyXCI6MTIsXCIzM1wiOjMzfV0sMTUwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciBmYWlscyA9IF9kZXJlcV8oMzUpO1xudmFyICRzb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhX2RlcmVxXygxMDUpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcblxufSx7XCIxMDVcIjoxMDUsXCIxMTlcIjoxMTksXCIzXCI6MyxcIjMzXCI6MzMsXCIzNVwiOjM1fV0sMTUxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbl9kZXJlcV8oMTAwKSgnQXJyYXknKTtcblxufSx7XCIxMDBcIjoxMDB9XSwxNTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XG5cbn0se1wiMzNcIjozM31dLDE1MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciB0b0lTT1N0cmluZyA9IF9kZXJlcV8oMjYpO1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuXG59LHtcIjI2XCI6MjYsXCIzM1wiOjMzfV0sMTU0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9PYmplY3QgPSBfZGVyZXFfKDExOSk7XG52YXIgdG9QcmltaXRpdmUgPSBfZGVyZXFfKDEyMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuXG59LHtcIjExOVwiOjExOSxcIjEyMFwiOjEyMCxcIjMzXCI6MzMsXCIzNVwiOjM1fV0sMTU1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBUT19QUklNSVRJVkUgPSBfZGVyZXFfKDEyOCkoJ3RvUHJpbWl0aXZlJyk7XG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcblxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSkgX2RlcmVxXyg0MikocHJvdG8sIFRPX1BSSU1JVElWRSwgX2RlcmVxXygyNykpO1xuXG59LHtcIjEyOFwiOjEyOCxcIjI3XCI6MjcsXCI0MlwiOjQyfV0sMTU2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIF9kZXJlcV8oOTQpKERhdGVQcm90bywgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG5cbn0se1wiOTRcIjo5NH1dLDE1NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiBfZGVyZXFfKDE2KSB9KTtcblxufSx7XCIxNlwiOjE2LFwiMzNcIjozM31dLDE1ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oNzkpO1xudmFyIEhBU19JTlNUQU5DRSA9IF9kZXJlcV8oMTI4KSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIF9kZXJlcV8oNzIpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcblxufSx7XCIxMjhcIjoxMjgsXCI1MVwiOjUxLFwiNzJcIjo3MixcIjc5XCI6Nzl9XSwxNTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGRQID0gX2RlcmVxXyg3MikuZjtcbnZhciBGUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IF9kZXJlcV8oMjkpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcblxufSx7XCIyOVwiOjI5LFwiNzJcIjo3Mn1dLDE2MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gX2RlcmVxXygxOSk7XG52YXIgdmFsaWRhdGUgPSBfZGVyZXFfKDEyNSk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXygyMikoTUFQLCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuXG59LHtcIjEyNVwiOjEyNSxcIjE5XCI6MTksXCIyMlwiOjIyfV0sMTYxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgbG9nMXAgPSBfZGVyZXFfKDYzKTtcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiNjNcIjo2M31dLDE2MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xuXG59LHtcIjMzXCI6MzN9XSwxNjM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDE2NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgc2lnbiA9IF9kZXJlcV8oNjUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiNjVcIjo2NX1dLDE2NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDE2NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwxNjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGV4cG0xID0gX2RlcmVxXyg2MSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7IGV4cG0xOiAkZXhwbTEgfSk7XG5cbn0se1wiMzNcIjozMyxcIjYxXCI6NjF9XSwxNjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogX2RlcmVxXyg2MikgfSk7XG5cbn0se1wiMzNcIjozMyxcIjYyXCI6NjJ9XSwxNjk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDE3MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRpbXVsID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiMzVcIjozNX1dLDE3MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzfV0sMTcyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiBfZGVyZXFfKDYzKSB9KTtcblxufSx7XCIzM1wiOjMzLFwiNjNcIjo2M31dLDE3MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4yO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzfV0sMTc0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbjogX2RlcmVxXyg2NSkgfSk7XG5cbn0se1wiMzNcIjozMyxcIjY1XCI6NjV9XSwxNzU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBleHBtMSA9IF9kZXJlcV8oNjEpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiMzVcIjozNSxcIjYxXCI6NjF9XSwxNzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBleHBtMSA9IF9kZXJlcV8oNjEpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiNjFcIjo2MX1dLDE3NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDE3ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7XG52YXIgaGFzID0gX2RlcmVxXyg0MSk7XG52YXIgY29mID0gX2RlcmVxXygxOCk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSBfZGVyZXFfKDQ1KTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTtcbnZhciBmYWlscyA9IF9kZXJlcV8oMzUpO1xudmFyIGdPUE4gPSBfZGVyZXFfKDc3KS5mO1xudmFyIGdPUEQgPSBfZGVyZXFfKDc1KS5mO1xudmFyIGRQID0gX2RlcmVxXyg3MikuZjtcbnZhciAkdHJpbSA9IF9kZXJlcV8oMTExKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihfZGVyZXFfKDcxKShwcm90bykpID09IE5VTUJFUjtcbnZhciBUUklNID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYgKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSkge1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBfZGVyZXFfKDI5KSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICBfZGVyZXFfKDk0KShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG5cbn0se1wiMTExXCI6MTExLFwiMTIwXCI6MTIwLFwiMThcIjoxOCxcIjI5XCI6MjksXCIzNVwiOjM1LFwiNDBcIjo0MCxcIjQxXCI6NDEsXCI0NVwiOjQ1LFwiNzFcIjo3MSxcIjcyXCI6NzIsXCI3NVwiOjc1LFwiNzdcIjo3NyxcIjk0XCI6OTR9XSwxNzk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pO1xuXG59LHtcIjMzXCI6MzN9XSwxODA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgX2lzRmluaXRlID0gX2RlcmVxXyg0MCkuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzMsXCI0MFwiOjQwfV0sMTgxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogX2RlcmVxXyg1MCkgfSk7XG5cbn0se1wiMzNcIjozMyxcIjUwXCI6NTB9XSwxODI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzfV0sMTgzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgaXNJbnRlZ2VyID0gX2RlcmVxXyg1MCk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiNTBcIjo1MH1dLDE4NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG5cbn0se1wiMzNcIjozM31dLDE4NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcblxufSx7XCIzM1wiOjMzfV0sMTg2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJHBhcnNlRmxvYXQgPSBfZGVyZXFfKDg2KTtcbi8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuXG59LHtcIjMzXCI6MzMsXCI4NlwiOjg2fV0sMTg3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJHBhcnNlSW50ID0gX2RlcmVxXyg4Nyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcblxufSx7XCIzM1wiOjMzLFwiODdcIjo4N31dLDE4ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHRvSW50ZWdlciA9IF9kZXJlcV8oMTE2KTtcbnZhciBhTnVtYmVyVmFsdWUgPSBfZGVyZXFfKDQpO1xudmFyIHJlcGVhdCA9IF9kZXJlcV8oMTEwKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBtID0gWkVSTztcbiAgICB2YXIgZSwgeiwgaiwgaztcbiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xuICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZiA+IDApIHtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcblxufSx7XCIxMTBcIjoxMTAsXCIxMTZcIjoxMTYsXCIzM1wiOjMzLFwiMzVcIjozNSxcIjRcIjo0fV0sMTg5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgYU51bWJlclZhbHVlID0gX2RlcmVxXyg0KTtcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzMsXCIzNVwiOjM1LFwiNFwiOjR9XSwxOTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IF9kZXJlcV8oNzApIH0pO1xuXG59LHtcIjMzXCI6MzMsXCI3MFwiOjcwfV0sMTkxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IF9kZXJlcV8oNzEpIH0pO1xuXG59LHtcIjMzXCI6MzMsXCI3MVwiOjcxfV0sMTkyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG4vLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFfZGVyZXFfKDI5KSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydGllczogX2RlcmVxXyg3MykgfSk7XG5cbn0se1wiMjlcIjoyOSxcIjMzXCI6MzMsXCI3M1wiOjczfV0sMTkzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXygyOSksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiBfZGVyZXFfKDcyKS5mIH0pO1xuXG59LHtcIjI5XCI6MjksXCIzM1wiOjMzLFwiNzJcIjo3Mn1dLDE5NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcbnZhciBtZXRhID0gX2RlcmVxXyg2Nikub25GcmVlemU7XG5cbl9kZXJlcV8oODMpKCdmcmVlemUnLCBmdW5jdGlvbiAoJGZyZWV6ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuXG59LHtcIjUxXCI6NTEsXCI2NlwiOjY2LFwiODNcIjo4M31dLDE5NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBfZGVyZXFfKDc1KS5mO1xuXG5fZGVyZXFfKDgzKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG5cbn0se1wiMTE3XCI6MTE3LFwiNzVcIjo3NSxcIjgzXCI6ODN9XSwxOTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbl9kZXJlcV8oODMpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2RlcmVxXyg3NikuZjtcbn0pO1xuXG59LHtcIjc2XCI6NzYsXCI4M1wiOjgzfV0sMTk3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gX2RlcmVxXygxMTkpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oNzkpO1xuXG5fZGVyZXFfKDgzKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG59LHtcIjExOVwiOjExOSxcIjc5XCI6NzksXCI4M1wiOjgzfV0sMTk4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcblxuX2RlcmVxXyg4MykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uICgkaXNFeHRlbnNpYmxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG5cbn0se1wiNTFcIjo1MSxcIjgzXCI6ODN9XSwxOTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG5cbl9kZXJlcV8oODMpKCdpc0Zyb3plbicsIGZ1bmN0aW9uICgkaXNGcm96ZW4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcblxufSx7XCI1MVwiOjUxLFwiODNcIjo4M31dLDIwMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcblxuX2RlcmVxXyg4MykoJ2lzU2VhbGVkJywgZnVuY3Rpb24gKCRpc1NlYWxlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuXG59LHtcIjUxXCI6NTEsXCI4M1wiOjgzfV0sMjAxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiBfZGVyZXFfKDk2KSB9KTtcblxufSx7XCIzM1wiOjMzLFwiOTZcIjo5Nn1dLDIwMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciAka2V5cyA9IF9kZXJlcV8oODEpO1xuXG5fZGVyZXFfKDgzKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG59LHtcIjExOVwiOjExOSxcIjgxXCI6ODEsXCI4M1wiOjgzfV0sMjAzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIG1ldGEgPSBfZGVyZXFfKDY2KS5vbkZyZWV6ZTtcblxuX2RlcmVxXyg4MykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuXG59LHtcIjUxXCI6NTEsXCI2NlwiOjY2LFwiODNcIjo4M31dLDIwNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIG1ldGEgPSBfZGVyZXFfKDY2KS5vbkZyZWV6ZTtcblxuX2RlcmVxXyg4MykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcblxufSx7XCI1MVwiOjUxLFwiNjZcIjo2NixcIjgzXCI6ODN9XSwyMDU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IF9kZXJlcV8oOTkpLnNldCB9KTtcblxufSx7XCIzM1wiOjMzLFwiOTlcIjo5OX1dLDIwNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gX2RlcmVxXygxNyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtfZGVyZXFfKDEyOCkoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgX2RlcmVxXyg5NCkoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cblxufSx7XCIxMjhcIjoxMjgsXCIxN1wiOjE3LFwiOTRcIjo5NH1dLDIwNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRwYXJzZUZsb2F0ID0gX2RlcmVxXyg4Nik7XG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcblxufSx7XCIzM1wiOjMzLFwiODZcIjo4Nn1dLDIwODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRwYXJzZUludCA9IF9kZXJlcV8oODcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG5cbn0se1wiMzNcIjozMyxcIjg3XCI6ODd9XSwyMDk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSBfZGVyZXFfKDYwKTtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBjdHggPSBfZGVyZXFfKDI1KTtcbnZhciBjbGFzc29mID0gX2RlcmVxXygxNyk7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbnZhciBhbkluc3RhbmNlID0gX2RlcmVxXyg2KTtcbnZhciBmb3JPZiA9IF9kZXJlcV8oMzkpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9kZXJlcV8oMTA0KTtcbnZhciB0YXNrID0gX2RlcmVxXygxMTMpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSBfZGVyZXFfKDY4KSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gX2RlcmVxXyg2OSk7XG52YXIgcGVyZm9ybSA9IF9kZXJlcV8oOTApO1xudmFyIHByb21pc2VSZXNvbHZlID0gX2RlcmVxXyg5MSk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW19kZXJlcV8oMTI4KSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKSAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2U7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgc2FtZUNvbnN0cnVjdG9yID0gTElCUkFSWSA/IGZ1bmN0aW9uIChhLCBiKSB7XG4gIC8vIHdpdGggbGlicmFyeSB3cmFwcGVyIHNwZWNpYWwgY2FzZVxuICByZXR1cm4gYSA9PT0gYiB8fCBhID09PSAkUHJvbWlzZSAmJiBiID09PSBXcmFwcGVyO1xufSA6IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgaWYgKHByb21pc2UuX2ggPT0gMSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9hIHx8IHByb21pc2UuX2M7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlYWN0aW9uO1xuICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkge1xuICAgIHJlYWN0aW9uID0gY2hhaW5baSsrXTtcbiAgICBpZiAocmVhY3Rpb24uZmFpbCB8fCAhaXNVbmhhbmRsZWQocmVhY3Rpb24ucHJvbWlzZSkpIHJldHVybiBmYWxzZTtcbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gX2RlcmVxXyg5MykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBzYW1lQ29uc3RydWN0b3IoJFByb21pc2UsIEMpXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5fZGVyZXFfKDEwMSkoJFByb21pc2UsIFBST01JU0UpO1xuX2RlcmVxXygxMDApKFBST01JU0UpO1xuV3JhcHBlciA9IF9kZXJlcV8oMjMpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIC8vIGluc3RhbmNlb2YgaW5zdGVhZCBvZiBpbnRlcm5hbCBzbG90IGNoZWNrIGJlY2F1c2Ugd2Ugc2hvdWxkIGZpeCBpdCB3aXRob3V0IHJlcGxhY2VtZW50IG5hdGl2ZSBQcm9taXNlIGNvcmVcbiAgICBpZiAoeCBpbnN0YW5jZW9mICRQcm9taXNlICYmIHNhbWVDb25zdHJ1Y3Rvcih4LmNvbnN0cnVjdG9yLCB0aGlzKSkgcmV0dXJuIHg7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIF9kZXJlcV8oNTYpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxufSx7XCIxMDBcIjoxMDAsXCIxMDFcIjoxMDEsXCIxMDRcIjoxMDQsXCIxMTNcIjoxMTMsXCIxMjhcIjoxMjgsXCIxN1wiOjE3LFwiMjNcIjoyMyxcIjI1XCI6MjUsXCIzXCI6MyxcIjMzXCI6MzMsXCIzOVwiOjM5LFwiNDBcIjo0MCxcIjUxXCI6NTEsXCI1NlwiOjU2LFwiNlwiOjYsXCI2MFwiOjYwLFwiNjhcIjo2OCxcIjY5XCI6NjksXCI5MFwiOjkwLFwiOTFcIjo5MSxcIjkzXCI6OTN9XSwyMTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGFGdW5jdGlvbiA9IF9kZXJlcV8oMyk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIHJBcHBseSA9IChfZGVyZXFfKDQwKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcbnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuXG59LHtcIjNcIjozLFwiMzNcIjozMyxcIjM1XCI6MzUsXCI0MFwiOjQwLFwiN1wiOjd9XSwyMTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBjcmVhdGUgPSBfZGVyZXFfKDcxKTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgYmluZCA9IF9kZXJlcV8oMTYpO1xudmFyIHJDb25zdHJ1Y3QgPSAoX2RlcmVxXyg0MCkuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG5cbn0se1wiMTZcIjoxNixcIjNcIjozLFwiMzNcIjozMyxcIjM1XCI6MzUsXCI0MFwiOjQwLFwiNTFcIjo1MSxcIjdcIjo3LFwiNzFcIjo3MX1dLDIxMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQID0gX2RlcmVxXyg3Mik7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuXG59LHtcIjEyMFwiOjEyMCxcIjMzXCI6MzMsXCIzNVwiOjM1LFwiN1wiOjcsXCI3MlwiOjcyfV0sMjEzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGdPUEQgPSBfZGVyZXFfKDc1KS5mO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozMyxcIjdcIjo3LFwiNzVcIjo3NX1dLDIxNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbl9kZXJlcV8oNTQpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzMsXCI1NFwiOjU0LFwiN1wiOjd9XSwyMTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgZ09QRCA9IF9kZXJlcV8oNzUpO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiN1wiOjcsXCI3NVwiOjc1fV0sMjE2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgZ2V0UHJvdG8gPSBfZGVyZXFfKDc5KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozMyxcIjdcIjo3LFwiNzlcIjo3OX1dLDIxNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IF9kZXJlcV8oNzUpO1xudmFyIGdldFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7XG52YXIgaGFzID0gX2RlcmVxXyg0MSk7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzYywgcHJvdG87XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmIChkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgZ2V0OiBnZXQgfSk7XG5cbn0se1wiMzNcIjozMyxcIjQxXCI6NDEsXCI1MVwiOjUxLFwiN1wiOjcsXCI3NVwiOjc1LFwiNzlcIjo3OX1dLDIxODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwyMTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozMyxcIjdcIjo3fV0sMjIwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogX2RlcmVxXyg4NSkgfSk7XG5cbn0se1wiMzNcIjozMyxcIjg1XCI6ODV9XSwyMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiN1wiOjd9XSwyMjI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHNldFByb3RvID0gX2RlcmVxXyg5OSk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiOTlcIjo5OX1dLDIyMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQID0gX2RlcmVxXyg3Mik7XG52YXIgZ09QRCA9IF9kZXJlcV8oNzUpO1xudmFyIGdldFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7XG52YXIgaGFzID0gX2RlcmVxXyg0MSk7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGNyZWF0ZURlc2MgPSBfZGVyZXFfKDkyKTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcblxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2MgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB2YXIgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bztcbiAgaWYgKCFvd25EZXNjKSB7XG4gICAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2MgPSBjcmVhdGVEZXNjKDApO1xuICB9XG4gIGlmIChoYXMob3duRGVzYywgJ3ZhbHVlJykpIHtcbiAgICBpZiAob3duRGVzYy53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSkgcmV0dXJuIGZhbHNlO1xuICAgIGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpIHx8IGNyZWF0ZURlc2MoMCk7XG4gICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBzZXQ6IHNldCB9KTtcblxufSx7XCIzM1wiOjMzLFwiNDFcIjo0MSxcIjUxXCI6NTEsXCI3XCI6NyxcIjcyXCI6NzIsXCI3NVwiOjc1LFwiNzlcIjo3OSxcIjkyXCI6OTJ9XSwyMjQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gX2RlcmVxXyg0NSk7XG52YXIgZFAgPSBfZGVyZXFfKDcyKS5mO1xudmFyIGdPUE4gPSBfZGVyZXFfKDc3KS5mO1xudmFyIGlzUmVnRXhwID0gX2RlcmVxXyg1Mik7XG52YXIgJGZsYWdzID0gX2RlcmVxXygzNyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKF9kZXJlcV8oMjkpICYmICghQ09SUkVDVF9ORVcgfHwgX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICByZTJbX2RlcmVxXygxMjgpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICBfZGVyZXFfKDk0KShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxuX2RlcmVxXygxMDApKCdSZWdFeHAnKTtcblxufSx7XCIxMDBcIjoxMDAsXCIxMjhcIjoxMjgsXCIyOVwiOjI5LFwiMzVcIjozNSxcIjM3XCI6MzcsXCI0MFwiOjQwLFwiNDVcIjo0NSxcIjUyXCI6NTIsXCI3MlwiOjcyLFwiNzdcIjo3NyxcIjk0XCI6OTR9XSwyMjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKF9kZXJlcV8oMjkpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSBfZGVyZXFfKDcyKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IF9kZXJlcV8oMzcpXG59KTtcblxufSx7XCIyOVwiOjI5LFwiMzdcIjozNyxcIjcyXCI6NzJ9XSwyMjY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gQEBtYXRjaCBsb2dpY1xuX2RlcmVxXygzNikoJ21hdGNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIE1BVENILCAkbWF0Y2gpIHtcbiAgLy8gMjEuMS4zLjExIFN0cmluZy5wcm90b3R5cGUubWF0Y2gocmVnZXhwKVxuICByZXR1cm4gW2Z1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRtYXRjaF07XG59KTtcblxufSx7XCIzNlwiOjM2fV0sMjI3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIEBAcmVwbGFjZSBsb2dpY1xuX2RlcmVxXygzNikoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UpIHtcbiAgLy8gMjEuMS4zLjE0IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKVxuICByZXR1cm4gW2Z1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gIH0sICRyZXBsYWNlXTtcbn0pO1xuXG59LHtcIjM2XCI6MzZ9XSwyMjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gQEBzZWFyY2ggbG9naWNcbl9kZXJlcV8oMzYpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoKSB7XG4gIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJHNlYXJjaF07XG59KTtcblxufSx7XCIzNlwiOjM2fV0sMjI5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIEBAc3BsaXQgbG9naWNcbl9kZXJlcV8oMzYpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGlzUmVnRXhwID0gX2RlcmVxXyg1Mik7XG4gIHZhciBfc3BsaXQgPSAkc3BsaXQ7XG4gIHZhciAkcHVzaCA9IFtdLnB1c2g7XG4gIHZhciAkU1BMSVQgPSAnc3BsaXQnO1xuICB2YXIgTEVOR1RIID0gJ2xlbmd0aCc7XG4gIHZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgdmFyIE5QQ0cgPSAvKCk/Py8uZXhlYygnJylbMV0gPT09IHVuZGVmaW5lZDsgLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICAkc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuIF9zcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gNDI5NDk2NzI5NSA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgc2VwYXJhdG9yMiwgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aCwgaTtcbiAgICAgIC8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydFxuICAgICAgaWYgKCFOUENHKSBzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cCgnXicgKyBzZXBhcmF0b3JDb3B5LnNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgICAgd2hpbGUgKG1hdGNoID0gc2VwYXJhdG9yQ29weS5leGVjKHN0cmluZykpIHtcbiAgICAgICAgLy8gYHNlcGFyYXRvckNvcHkubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlclxuICAgICAgICBsYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGAgZm9yIE5QQ0dcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICAgICAgaWYgKCFOUENHICYmIG1hdGNoW0xFTkdUSF0gPiAxKSBtYXRjaFswXS5yZXBsYWNlKHNlcGFyYXRvcjIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHNbTEVOR1RIXSAtIDI7IGkrKykgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICAkc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBfc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9XG4gIC8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpXG4gIHJldHVybiBbZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdCkgOiAkc3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICB9LCAkc3BsaXRdO1xufSk7XG5cbn0se1wiMzZcIjozNixcIjUyXCI6NTJ9XSwyMzA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuX2RlcmVxXygyMjUpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciAkZmxhZ3MgPSBfZGVyZXFfKDM3KTtcbnZhciBERVNDUklQVE9SUyA9IF9kZXJlcV8oMjkpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgX2RlcmVxXyg5NCkoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAoX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuXG59LHtcIjIyNVwiOjIyNSxcIjI5XCI6MjksXCIzNVwiOjM1LFwiMzdcIjozNyxcIjdcIjo3LFwiOTRcIjo5NH1dLDIzMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gX2RlcmVxXygxOSk7XG52YXIgdmFsaWRhdGUgPSBfZGVyZXFfKDEyNSk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXygyMikoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG5cbn0se1wiMTI1XCI6MTI1LFwiMTlcIjoxOSxcIjIyXCI6MjJ9XSwyMzI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxuX2RlcmVxXygxMDgpKCdhbmNob3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyMzM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5fZGVyZXFfKDEwOCkoJ2JpZycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyMzQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbl9kZXJlcV8oMTA4KSgnYmxpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEwOFwiOjEwOH1dLDIzNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5fZGVyZXFfKDEwOCkoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyMzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciAkYXQgPSBfZGVyZXFfKDEwNikoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcblxufSx7XCIxMDZcIjoxMDYsXCIzM1wiOjMzfV0sMjM3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG52YXIgY29udGV4dCA9IF9kZXJlcV8oMTA3KTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX2RlcmVxXygzNCkoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuXG59LHtcIjEwN1wiOjEwNyxcIjExOFwiOjExOCxcIjMzXCI6MzMsXCIzNFwiOjM0fV0sMjM4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpXG5fZGVyZXFfKDEwOCkoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyMzk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcilcbl9kZXJlcV8oMTA4KSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9O1xufSk7XG5cbn0se1wiMTA4XCI6MTA4fV0sMjQwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxuX2RlcmVxXygxMDgpKCdmb250c2l6ZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9O1xufSk7XG5cbn0se1wiMTA4XCI6MTA4fV0sMjQxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gX2RlcmVxXygxMTQpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGFMZW4gPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuXG59LHtcIjExNFwiOjExNCxcIjMzXCI6MzN9XSwyNDI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgY29udGV4dCA9IF9kZXJlcV8oMTA3KTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX2RlcmVxXygzNCkoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxufSx7XCIxMDdcIjoxMDcsXCIzM1wiOjMzLFwiMzRcIjozNH1dLDI0MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpXG5fZGVyZXFfKDEwOCkoJ2l0YWxpY3MnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyNDQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IF9kZXJlcV8oMTA2KSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxuX2RlcmVxXyg1NSkoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcblxufSx7XCIxMDZcIjoxMDYsXCI1NVwiOjU1fV0sMjQ1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5fZGVyZXFfKDEwOCkoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEwOFwiOjEwOH1dLDI0NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHRvSU9iamVjdCA9IF9kZXJlcV8oMTE3KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKSB7XG4gICAgdmFyIHRwbCA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0cGwubGVuZ3RoKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAobGVuID4gaSkge1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZiAoaSA8IGFMZW4pIHJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuXG59LHtcIjExN1wiOjExNyxcIjExOFwiOjExOCxcIjMzXCI6MzN9XSwyNDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdChjb3VudClcbiAgcmVwZWF0OiBfZGVyZXFfKDExMClcbn0pO1xuXG59LHtcIjExMFwiOjExMCxcIjMzXCI6MzN9XSwyNDg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5fZGVyZXFfKDEwOCkoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyNDk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG52YXIgY29udGV4dCA9IF9kZXJlcV8oMTA3KTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBfZGVyZXFfKDM0KShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuXG59LHtcIjEwN1wiOjEwNyxcIjExOFwiOjExOCxcIjMzXCI6MzMsXCIzNFwiOjM0fV0sMjUwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbl9kZXJlcV8oMTA4KSgnc3RyaWtlJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEwOFwiOjEwOH1dLDI1MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5fZGVyZXFfKDEwOCkoJ3N1YicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyNTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxuX2RlcmVxXygxMDgpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG5cbn0se1wiMTA4XCI6MTA4fV0sMjUzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxuX2RlcmVxXygxMTEpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuXG59LHtcIjExMVwiOjExMX1dLDI1NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7XG52YXIgaGFzID0gX2RlcmVxXyg0MSk7XG52YXIgREVTQ1JJUFRPUlMgPSBfZGVyZXFfKDI5KTtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgcmVkZWZpbmUgPSBfZGVyZXFfKDk0KTtcbnZhciBNRVRBID0gX2RlcmVxXyg2NikuS0VZO1xudmFyICRmYWlscyA9IF9kZXJlcV8oMzUpO1xudmFyIHNoYXJlZCA9IF9kZXJlcV8oMTAzKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IF9kZXJlcV8oMTAxKTtcbnZhciB1aWQgPSBfZGVyZXFfKDEyNCk7XG52YXIgd2tzID0gX2RlcmVxXygxMjgpO1xudmFyIHdrc0V4dCA9IF9kZXJlcV8oMTI3KTtcbnZhciB3a3NEZWZpbmUgPSBfZGVyZXFfKDEyNik7XG52YXIga2V5T2YgPSBfZGVyZXFfKDU5KTtcbnZhciBlbnVtS2V5cyA9IF9kZXJlcV8oMzIpO1xudmFyIGlzQXJyYXkgPSBfZGVyZXFfKDQ5KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpO1xudmFyIHRvUHJpbWl0aXZlID0gX2RlcmVxXygxMjApO1xudmFyIGNyZWF0ZURlc2MgPSBfZGVyZXFfKDkyKTtcbnZhciBfY3JlYXRlID0gX2RlcmVxXyg3MSk7XG52YXIgZ09QTkV4dCA9IF9kZXJlcV8oNzYpO1xudmFyICRHT1BEID0gX2RlcmVxXyg3NSk7XG52YXIgJERQID0gX2RlcmVxXyg3Mik7XG52YXIgJGtleXMgPSBfZGVyZXFfKDgxKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICBfZGVyZXFfKDc3KS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIF9kZXJlcV8oODIpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIF9kZXJlcV8oNzgpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhX2RlcmVxXyg2MCkpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihrZXkpIHtcbiAgICBpZiAoaXNTeW1ib2woa2V5KSkgcmV0dXJuIGtleU9mKFN5bWJvbFJlZ2lzdHJ5LCBrZXkpO1xuICAgIHRocm93IFR5cGVFcnJvcihrZXkgKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICBpZiAoaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09ICdmdW5jdGlvbicpICRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgIGlmICgkcmVwbGFjZXIgfHwgIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoJHJlcGxhY2VyKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCBfZGVyZXFfKDQyKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcblxufSx7XCIxMDFcIjoxMDEsXCIxMDNcIjoxMDMsXCIxMTdcIjoxMTcsXCIxMjBcIjoxMjAsXCIxMjRcIjoxMjQsXCIxMjZcIjoxMjYsXCIxMjdcIjoxMjcsXCIxMjhcIjoxMjgsXCIyOVwiOjI5LFwiMzJcIjozMixcIjMzXCI6MzMsXCIzNVwiOjM1LFwiNDBcIjo0MCxcIjQxXCI6NDEsXCI0MlwiOjQyLFwiNDlcIjo0OSxcIjU5XCI6NTksXCI2MFwiOjYwLFwiNjZcIjo2NixcIjdcIjo3LFwiNzFcIjo3MSxcIjcyXCI6NzIsXCI3NVwiOjc1LFwiNzZcIjo3NixcIjc3XCI6NzcsXCI3OFwiOjc4LFwiODFcIjo4MSxcIjgyXCI6ODIsXCI5MlwiOjkyLFwiOTRcIjo5NH1dLDI1NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICR0eXBlZCA9IF9kZXJlcV8oMTIzKTtcbnZhciBidWZmZXIgPSBfZGVyZXFfKDEyMik7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IF9kZXJlcV8oMTE0KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIEFycmF5QnVmZmVyID0gX2RlcmVxXyg0MCkuQXJyYXlCdWZmZXI7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gX2RlcmVxXygxMDQpO1xudmFyICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbnZhciAkRGF0YVZpZXcgPSBidWZmZXIuRGF0YVZpZXc7XG52YXIgJGlzVmlldyA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3O1xudmFyICRzbGljZSA9ICRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG52YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEFycmF5QnVmZmVyICE9PSAkQXJyYXlCdWZmZXIpLCB7IEFycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXIgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xuICAgIHJldHVybiAkaXNWaWV3ICYmICRpc1ZpZXcoaXQpIHx8IGlzT2JqZWN0KGl0KSAmJiBWSUVXIGluIGl0O1xuICB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlUgKyAkZXhwb3J0LkYgKiBfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluYWwgPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQsIGxlbik7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbmFsIC0gZmlyc3QpKTtcbiAgICB2YXIgdmlld1MgPSBuZXcgJERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VCA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbmFsKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxuX2RlcmVxXygxMDApKEFSUkFZX0JVRkZFUik7XG5cbn0se1wiMTAwXCI6MTAwLFwiMTA0XCI6MTA0LFwiMTE0XCI6MTE0LFwiMTE4XCI6MTE4LFwiMTIyXCI6MTIyLFwiMTIzXCI6MTIzLFwiMzNcIjozMyxcIjM1XCI6MzUsXCI0MFwiOjQwLFwiNTFcIjo1MSxcIjdcIjo3fV0sMjU2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFfZGVyZXFfKDEyMykuQUJWLCB7XG4gIERhdGFWaWV3OiBfZGVyZXFfKDEyMikuRGF0YVZpZXdcbn0pO1xuXG59LHtcIjEyMlwiOjEyMixcIjEyM1wiOjEyMyxcIjMzXCI6MzN9XSwyNTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuX2RlcmVxXygxMjEpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cbn0se1wiMTIxXCI6MTIxfV0sMjU4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbl9kZXJlcV8oMTIxKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEyMVwiOjEyMX1dLDI1OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDEyMSkoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEyMVwiOjEyMX1dLDI2MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDEyMSkoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEyMVwiOjEyMX1dLDI2MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDEyMSkoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxufSx7XCIxMjFcIjoxMjF9XSwyNjI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuX2RlcmVxXygxMjEpKCdVaW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEyMVwiOjEyMX1dLDI2MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDEyMSkoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cbn0se1wiMTIxXCI6MTIxfV0sMjY0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbl9kZXJlcV8oMTIxKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cbn0se1wiMTIxXCI6MTIxfV0sMjY1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbl9kZXJlcV8oMTIxKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpO1xuXG59LHtcIjEyMVwiOjEyMX1dLDI2NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgZWFjaCA9IF9kZXJlcV8oMTIpKDApO1xudmFyIHJlZGVmaW5lID0gX2RlcmVxXyg5NCk7XG52YXIgbWV0YSA9IF9kZXJlcV8oNjYpO1xudmFyIGFzc2lnbiA9IF9kZXJlcV8oNzApO1xudmFyIHdlYWsgPSBfZGVyZXFfKDIxKTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgdmFsaWRhdGUgPSBfZGVyZXFfKDEyNSk7XG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XG52YXIgZ2V0V2VhayA9IG1ldGEuZ2V0V2VhaztcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XG52YXIgdG1wID0ge307XG52YXIgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oMjIpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyAkV2Vha01hcCgpLnNldCgoT2JqZWN0LmZyZWV6ZSB8fCBPYmplY3QpKHRtcCksIDcpLmdldCh0bXApICE9IDc7IH0pKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbn0se1wiMTJcIjoxMixcIjEyNVwiOjEyNSxcIjIxXCI6MjEsXCIyMlwiOjIyLFwiMzVcIjozNSxcIjUxXCI6NTEsXCI2NlwiOjY2LFwiNzBcIjo3MCxcIjk0XCI6OTR9XSwyNjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIHdlYWsgPSBfZGVyZXFfKDIxKTtcbnZhciB2YWxpZGF0ZSA9IF9kZXJlcV8oMTI1KTtcbnZhciBXRUFLX1NFVCA9ICdXZWFrU2V0JztcblxuLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcbl9kZXJlcV8oMjIpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuXG59LHtcIjEyNVwiOjEyNSxcIjIxXCI6MjEsXCIyMlwiOjIyfV0sMjY4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0TWFwXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSBfZGVyZXFfKDM4KTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IF9kZXJlcV8oMTUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbl9kZXJlcV8oNSkoJ2ZsYXRNYXAnKTtcblxufSx7XCIxMThcIjoxMTgsXCIxMTlcIjoxMTksXCIxNVwiOjE1LFwiM1wiOjMsXCIzM1wiOjMzLFwiMzhcIjozOCxcIjVcIjo1fV0sMjY5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0dGVuXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSBfZGVyZXFfKDM4KTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciB0b0ludGVnZXIgPSBfZGVyZXFfKDExNik7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gX2RlcmVxXygxNSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXR0ZW46IGZ1bmN0aW9uIGZsYXR0ZW4oLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbl9kZXJlcV8oNSkoJ2ZsYXR0ZW4nKTtcblxufSx7XCIxMTZcIjoxMTYsXCIxMThcIjoxMTgsXCIxMTlcIjoxMTksXCIxNVwiOjE1LFwiMzNcIjozMyxcIjM4XCI6MzgsXCI1XCI6NX1dLDI3MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGluY2x1ZGVzID0gX2RlcmVxXygxMSkodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5fZGVyZXFfKDUpKCdpbmNsdWRlcycpO1xuXG59LHtcIjExXCI6MTEsXCIzM1wiOjMzLFwiNVwiOjV9XSwyNzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3J3YWxkcm9uL3RjMzktbm90ZXMvYmxvYi9tYXN0ZXIvZXM2LzIwMTQtMDkvc2VwdC0yNS5tZCM1MTAtZ2xvYmFsYXNhcC1mb3ItZW5xdWV1aW5nLWEtbWljcm90YXNrXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIG1pY3JvdGFzayA9IF9kZXJlcV8oNjgpKCk7XG52YXIgcHJvY2VzcyA9IF9kZXJlcV8oNDApLnByb2Nlc3M7XG52YXIgaXNOb2RlID0gX2RlcmVxXygxOCkocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG4kZXhwb3J0KCRleHBvcnQuRywge1xuICBhc2FwOiBmdW5jdGlvbiBhc2FwKGZuKSB7XG4gICAgdmFyIGRvbWFpbiA9IGlzTm9kZSAmJiBwcm9jZXNzLmRvbWFpbjtcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xuICB9XG59KTtcblxufSx7XCIxOFwiOjE4LFwiMzNcIjozMyxcIjQwXCI6NDAsXCI2OFwiOjY4fV0sMjcyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtaXMtZXJyb3JcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgY29mID0gX2RlcmVxXygxOCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRXJyb3InLCB7XG4gIGlzRXJyb3I6IGZ1bmN0aW9uIGlzRXJyb3IoaXQpIHtcbiAgICByZXR1cm4gY29mKGl0KSA9PT0gJ0Vycm9yJztcbiAgfVxufSk7XG5cbn0se1wiMThcIjoxOCxcIjMzXCI6MzN9XSwyNzM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IF9kZXJlcV8oNDApIH0pO1xuXG59LHtcIjMzXCI6MzMsXCI0MFwiOjQwfV0sMjc0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5mcm9tXG5fZGVyZXFfKDk3KSgnTWFwJyk7XG5cbn0se1wiOTdcIjo5N31dLDI3NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAub2Zcbl9kZXJlcV8oOTgpKCdNYXAnKTtcblxufSx7XCI5OFwiOjk4fV0sMjc2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnTWFwJywgeyB0b0pTT046IF9kZXJlcV8oMjApKCdNYXAnKSB9KTtcblxufSx7XCIyMFwiOjIwLFwiMzNcIjozM31dLDI3NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsYW1wOiBmdW5jdGlvbiBjbGFtcCh4LCBsb3dlciwgdXBwZXIpIHtcbiAgICByZXR1cm4gTWF0aC5taW4odXBwZXIsIE1hdGgubWF4KGxvd2VyLCB4KSk7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwyNzg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBERUdfUEVSX1JBRDogTWF0aC5QSSAvIDE4MCB9KTtcblxufSx7XCIzM1wiOjMzfV0sMjc5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgUkFEX1BFUl9ERUcgPSAxODAgLyBNYXRoLlBJO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGRlZ3JlZXM6IGZ1bmN0aW9uIGRlZ3JlZXMocmFkaWFucykge1xuICAgIHJldHVybiByYWRpYW5zICogUkFEX1BFUl9ERUc7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwyODA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBzY2FsZSA9IF9kZXJlcV8oNjQpO1xudmFyIGZyb3VuZCA9IF9kZXJlcV8oNjIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGZzY2FsZTogZnVuY3Rpb24gZnNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICAgIHJldHVybiBmcm91bmQoc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSk7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzMsXCI2MlwiOjYyLFwiNjRcIjo2NH1dLDI4MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzfV0sMjgyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+PiAxNjtcbiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDI4MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwyODQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBSQURfUEVSX0RFRzogMTgwIC8gTWF0aC5QSSB9KTtcblxufSx7XCIzM1wiOjMzfV0sMjg1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgREVHX1BFUl9SQUQgPSBNYXRoLlBJIC8gMTgwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHJhZGlhbnM6IGZ1bmN0aW9uIHJhZGlhbnMoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogREVHX1BFUl9SQUQ7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwyODY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzY2FsZTogX2RlcmVxXyg2NCkgfSk7XG5cbn0se1wiMzNcIjozMyxcIjY0XCI6NjR9XSwyODc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cDovL2pmYmFzdGllbi5naXRodWIuaW8vcGFwZXJzL01hdGguc2lnbmJpdC5odG1sXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ25iaXQ6IGZ1bmN0aW9uIHNpZ25iaXQoeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSAhPSB4ID8geCA6IHggPT0gMCA/IDEgLyB4ID09IEluZmluaXR5IDogeCA+IDA7XG59IH0pO1xuXG59LHtcIjMzXCI6MzN9XSwyODg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+Pj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDI4OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHRvT2JqZWN0ID0gX2RlcmVxXygxMTkpO1xudmFyIGFGdW5jdGlvbiA9IF9kZXJlcV8oMyk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gX2RlcmVxXyg3Mik7XG5cbi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcilcbl9kZXJlcV8oMjkpICYmICRleHBvcnQoJGV4cG9ydC5QICsgX2RlcmVxXyg3NCksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKSB7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgZ2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59KTtcblxufSx7XCIxMTlcIjoxMTksXCIyOVwiOjI5LFwiM1wiOjMsXCIzM1wiOjMzLFwiNzJcIjo3MixcIjc0XCI6NzR9XSwyOTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IF9kZXJlcV8oNzIpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5fZGVyZXFfKDI5KSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIF9kZXJlcV8oNzQpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IHNldDogYUZ1bmN0aW9uKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG5cbn0se1wiMTE5XCI6MTE5LFwiMjlcIjoyOSxcIjNcIjozLFwiMzNcIjozMyxcIjcyXCI6NzIsXCI3NFwiOjc0fV0sMjkxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciAkZW50cmllcyA9IF9kZXJlcV8oODQpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzMsXCI4NFwiOjg0fV0sMjkyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIG93bktleXMgPSBfZGVyZXFfKDg1KTtcbnZhciB0b0lPYmplY3QgPSBfZGVyZXFfKDExNyk7XG52YXIgZ09QRCA9IF9kZXJlcV8oNzUpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gX2RlcmVxXygyNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldERlc2MgPSBnT1BELmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleSwgZGVzYztcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpKSB7XG4gICAgICBkZXNjID0gZ2V0RGVzYyhPLCBrZXkgPSBrZXlzW2krK10pO1xuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxufSx7XCIxMTdcIjoxMTcsXCIyNFwiOjI0LFwiMzNcIjozMyxcIjc1XCI6NzUsXCI4NVwiOjg1fV0sMjkzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9PYmplY3QgPSBfZGVyZXFfKDExOSk7XG52YXIgdG9QcmltaXRpdmUgPSBfZGVyZXFfKDEyMCk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBfZGVyZXFfKDc5KTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBfZGVyZXFfKDc1KS5mO1xuXG4vLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKVxuX2RlcmVxXygyOSkgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyBfZGVyZXFfKDc0KSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG5cbn0se1wiMTE5XCI6MTE5LFwiMTIwXCI6MTIwLFwiMjlcIjoyOSxcIjMzXCI6MzMsXCI3NFwiOjc0LFwiNzVcIjo3NSxcIjc5XCI6Nzl9XSwyOTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oNzkpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IF9kZXJlcV8oNzUpLmY7XG5cbi8vIEIuMi4yLjUgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fKFApXG5fZGVyZXFfKDI5KSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIF9kZXJlcV8oNzQpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cFNldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cFNldHRlcl9fKFApIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gICAgdmFyIEQ7XG4gICAgZG8ge1xuICAgICAgaWYgKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpIHJldHVybiBELnNldDtcbiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcblxufSx7XCIxMTlcIjoxMTksXCIxMjBcIjoxMjAsXCIyOVwiOjI5LFwiMzNcIjozMyxcIjc0XCI6NzQsXCI3NVwiOjc1LFwiNzlcIjo3OX1dLDI5NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJHZhbHVlcyA9IF9kZXJlcV8oODQpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiODRcIjo4NH1dLDI5NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemVucGFyc2luZy9lcy1vYnNlcnZhYmxlXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xudmFyIGNvcmUgPSBfZGVyZXFfKDIzKTtcbnZhciBtaWNyb3Rhc2sgPSBfZGVyZXFfKDY4KSgpO1xudmFyIE9CU0VSVkFCTEUgPSBfZGVyZXFfKDEyOCkoJ29ic2VydmFibGUnKTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBhbkluc3RhbmNlID0gX2RlcmVxXyg2KTtcbnZhciByZWRlZmluZUFsbCA9IF9kZXJlcV8oOTMpO1xudmFyIGhpZGUgPSBfZGVyZXFfKDQyKTtcbnZhciBmb3JPZiA9IF9kZXJlcV8oMzkpO1xudmFyIFJFVFVSTiA9IGZvck9mLlJFVFVSTjtcblxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFGdW5jdGlvbihmbik7XG59O1xuXG52YXIgY2xlYW51cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgdmFyIGNsZWFudXAgPSBzdWJzY3JpcHRpb24uX2M7XG4gIGlmIChjbGVhbnVwKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9jID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXAoKTtcbiAgfVxufTtcblxudmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbi5fbyA9PT0gdW5kZWZpbmVkO1xufTtcblxudmFyIGNsb3NlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfVxufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc3Vic2NyaWJlcikge1xuICBhbk9iamVjdChvYnNlcnZlcik7XG4gIHRoaXMuX2MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX28gPSBvYnNlcnZlcjtcbiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKTtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZiAoY2xlYW51cCAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIGNsZWFudXAgPSBmdW5jdGlvbiAoKSB7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7XG4gICAgICB0aGlzLl9jID0gY2xlYW51cDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXR1cm47XG4gIH0gaWYgKHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSkgY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTtcbn07XG5cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpOyB9XG59KTtcblxudmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpO1xuICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB0aHJvdyB2YWx1ZTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7XG4gICAgICBpZiAoIW0pIHRocm93IHZhbHVlO1xuICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpO1xuICAgICAgICB2YWx1ZSA9IG0gPyBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJywgJ19mJykuX2YgPSBhRnVuY3Rpb24oc3Vic2NyaWJlcik7XG59O1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7XG4gIH0sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyAoY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBhRnVuY3Rpb24oZm4pO1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbih2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZSwge1xuICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpIHtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlO1xuICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pO1xuICAgIGlmIChtZXRob2QpIHtcbiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpO1xuICAgICAgcmV0dXJuIG9ic2VydmFibGUuY29uc3RydWN0b3IgPT09IEMgPyBvYnNlcnZhYmxlIDogbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZm9yT2YoeCwgZmFsc2UsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTtcbiAgICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybiBSRVRVUk47XG4gICAgICAgICAgICB9KSA9PT0gUkVUVVJOKSByZXR1cm47XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHRocm93IGU7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH0sXG4gIG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gQXJyYXkobCk7IGkgPCBsOykgaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZSkoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tqXSk7XG4gICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgT2JzZXJ2YWJsZTogJE9ic2VydmFibGUgfSk7XG5cbl9kZXJlcV8oMTAwKSgnT2JzZXJ2YWJsZScpO1xuXG59LHtcIjEwMFwiOjEwMCxcIjEyOFwiOjEyOCxcIjIzXCI6MjMsXCIzXCI6MyxcIjMzXCI6MzMsXCIzOVwiOjM5LFwiNDBcIjo0MCxcIjQyXCI6NDIsXCI2XCI6NixcIjY4XCI6NjgsXCI3XCI6NyxcIjkzXCI6OTN9XSwyOTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGNvcmUgPSBfZGVyZXFfKDIzKTtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSBfZGVyZXFfKDEwNCk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSBfZGVyZXFfKDkxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG5cbn0se1wiMTA0XCI6MTA0LFwiMjNcIjoyMyxcIjMzXCI6MzMsXCI0MFwiOjQwLFwiOTFcIjo5MX1dLDI5ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLXRyeVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IF9kZXJlcV8oNjkpO1xudmFyIHBlcmZvcm0gPSBfZGVyZXFfKDkwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdQcm9taXNlJywgeyAndHJ5JzogZnVuY3Rpb24gKGNhbGxiYWNrZm4pIHtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZih0aGlzKTtcbiAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oY2FsbGJhY2tmbik7XG4gIChyZXN1bHQuZSA/IHByb21pc2VDYXBhYmlsaXR5LnJlamVjdCA6IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmUpKHJlc3VsdC52KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59IH0pO1xuXG59LHtcIjMzXCI6MzMsXCI2OVwiOjY5LFwiOTBcIjo5MH1dLDI5OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7IGRlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xufSB9KTtcblxufSx7XCI2N1wiOjY3LFwiN1wiOjd9XSwzMDA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIG1ldGFkYXRhID0gX2RlcmVxXyg2Nyk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcbnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gbWV0YWRhdGEubWFwO1xudmFyIHN0b3JlID0gbWV0YWRhdGEuc3RvcmU7XG5cbm1ldGFkYXRhLmV4cCh7IGRlbGV0ZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pO1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSwgZmFsc2UpO1xuICBpZiAobWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCB8fCAhbWV0YWRhdGFNYXBbJ2RlbGV0ZSddKG1ldGFkYXRhS2V5KSkgcmV0dXJuIGZhbHNlO1xuICBpZiAobWV0YWRhdGFNYXAuc2l6ZSkgcmV0dXJuIHRydWU7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICB0YXJnZXRNZXRhZGF0YVsnZGVsZXRlJ10odGFyZ2V0S2V5KTtcbiAgcmV0dXJuICEhdGFyZ2V0TWV0YWRhdGEuc2l6ZSB8fCBzdG9yZVsnZGVsZXRlJ10odGFyZ2V0KTtcbn0gfSk7XG5cbn0se1wiNjdcIjo2NyxcIjdcIjo3fV0sMzAxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBTZXQgPSBfZGVyZXFfKDIzMSk7XG52YXIgZnJvbSA9IF9kZXJlcV8oMTApO1xudmFyIG1ldGFkYXRhID0gX2RlcmVxXyg2Nyk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKE8sIFApIHtcbiAgdmFyIG9LZXlzID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgaWYgKHBhcmVudCA9PT0gbnVsbCkgcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcblxufSx7XCIxMFwiOjEwLFwiMjMxXCI6MjMxLFwiNjdcIjo2NyxcIjdcIjo3LFwiNzlcIjo3OX1dLDMwMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBfZGVyZXFfKDc5KTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG5cbn0se1wiNjdcIjo2NyxcIjdcIjo3LFwiNzlcIjo3OX1dLDMwMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG5cbn0se1wiNjdcIjo2NyxcIjdcIjo3fV0sMzA0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBtZXRhZGF0YSA9IF9kZXJlcV8oNjcpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGE6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcblxufSx7XCI2N1wiOjY3LFwiN1wiOjd9XSwzMDU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIG1ldGFkYXRhID0gX2RlcmVxXyg2Nyk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUhhc01ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGhhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG5cbn0se1wiNjdcIjo2NyxcIjdcIjo3LFwiNzlcIjo3OX1dLDMwNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGhhc093bk1ldGFkYXRhOiBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG5cbn0se1wiNjdcIjo2NyxcIjdcIjo3fV0sMzA3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbnZhciB0b01ldGFLZXkgPSAkbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSAkbWV0YWRhdGEuc2V0O1xuXG4kbWV0YWRhdGEuZXhwKHsgbWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKFxuICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsXG4gICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSxcbiAgICAgIHRvTWV0YUtleSh0YXJnZXRLZXkpXG4gICAgKTtcbiAgfTtcbn0gfSk7XG5cbn0se1wiM1wiOjMsXCI2N1wiOjY3LFwiN1wiOjd9XSwzMDg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0LmZyb21cbl9kZXJlcV8oOTcpKCdTZXQnKTtcblxufSx7XCI5N1wiOjk3fV0sMzA5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5vZlxuX2RlcmVxXyg5OCkoJ1NldCcpO1xuXG59LHtcIjk4XCI6OTh9XSwzMTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7IHRvSlNPTjogX2RlcmVxXygyMCkoJ1NldCcpIH0pO1xuXG59LHtcIjIwXCI6MjAsXCIzM1wiOjMzfV0sMzExOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGF0ID0gX2RlcmVxXygxMDYpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG5cbn0se1wiMTA2XCI6MTA2LFwiMzNcIjozM31dLDMxMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBpc1JlZ0V4cCA9IF9kZXJlcV8oNTIpO1xudmFyIGdldEZsYWdzID0gX2RlcmVxXygzNyk7XG52YXIgUmVnRXhwUHJvdG8gPSBSZWdFeHAucHJvdG90eXBlO1xuXG52YXIgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yID0gZnVuY3Rpb24gKHJlZ2V4cCwgc3RyaW5nKSB7XG4gIHRoaXMuX3IgPSByZWdleHA7XG4gIHRoaXMuX3MgPSBzdHJpbmc7XG59O1xuXG5fZGVyZXFfKDU0KSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpO1xuICByZXR1cm4geyB2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApIHtcbiAgICBkZWZpbmVkKHRoaXMpO1xuICAgIGlmICghaXNSZWdFeHAocmVnZXhwKSkgdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpO1xuICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgIHZhciBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKTtcbiAgICB2YXIgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cC5zb3VyY2UsIH5mbGFncy5pbmRleE9mKCdnJykgPyBmbGFncyA6ICdnJyArIGZsYWdzKTtcbiAgICByeC5sYXN0SW5kZXggPSB0b0xlbmd0aChyZWdleHAubGFzdEluZGV4KTtcbiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7XG4gIH1cbn0pO1xuXG59LHtcIjExOFwiOjExOCxcIjI4XCI6MjgsXCIzM1wiOjMzLFwiMzdcIjozNyxcIjUyXCI6NTIsXCI1NFwiOjU0fV0sMzEzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRwYWQgPSBfZGVyZXFfKDEwOSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTtcblxufSx7XCIxMDlcIjoxMDksXCIzM1wiOjMzfV0sMzE0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRwYWQgPSBfZGVyZXFfKDEwOSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcblxufSx7XCIxMDlcIjoxMDksXCIzM1wiOjMzfV0sMzE1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbl9kZXJlcV8oMTExKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcblxufSx7XCIxMTFcIjoxMTF9XSwzMTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxuX2RlcmVxXygxMTEpKCd0cmltUmlnaHQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMik7XG4gIH07XG59LCAndHJpbUVuZCcpO1xuXG59LHtcIjExMVwiOjExMX1dLDMxNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDEyNikoJ2FzeW5jSXRlcmF0b3InKTtcblxufSx7XCIxMjZcIjoxMjZ9XSwzMTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuX2RlcmVxXygxMjYpKCdvYnNlcnZhYmxlJyk7XG5cbn0se1wiMTI2XCI6MTI2fV0sMzE5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTeXN0ZW0nLCB7IGdsb2JhbDogX2RlcmVxXyg0MCkgfSk7XG5cbn0se1wiMzNcIjozMyxcIjQwXCI6NDB9XSwzMjA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5mcm9tXG5fZGVyZXFfKDk3KSgnV2Vha01hcCcpO1xuXG59LHtcIjk3XCI6OTd9XSwzMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5vZlxuX2RlcmVxXyg5OCkoJ1dlYWtNYXAnKTtcblxufSx7XCI5OFwiOjk4fV0sMzIyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQuZnJvbVxuX2RlcmVxXyg5NykoJ1dlYWtTZXQnKTtcblxufSx7XCI5N1wiOjk3fV0sMzIzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQub2Zcbl9kZXJlcV8oOTgpKCdXZWFrU2V0Jyk7XG5cbn0se1wiOThcIjo5OH1dLDMyNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgJGl0ZXJhdG9ycyA9IF9kZXJlcV8oMTQxKTtcbnZhciBnZXRLZXlzID0gX2RlcmVxXyg4MSk7XG52YXIgcmVkZWZpbmUgPSBfZGVyZXFfKDk0KTtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBoaWRlID0gX2RlcmVxXyg0Mik7XG52YXIgSXRlcmF0b3JzID0gX2RlcmVxXyg1OCk7XG52YXIgd2tzID0gX2RlcmVxXygxMjgpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG5cbn0se1wiMTI4XCI6MTI4LFwiMTQxXCI6MTQxLFwiNDBcIjo0MCxcIjQyXCI6NDIsXCI1OFwiOjU4LFwiODFcIjo4MSxcIjk0XCI6OTR9XSwzMjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciAkdGFzayA9IF9kZXJlcV8oMTEzKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuXG59LHtcIjExM1wiOjExMyxcIjMzXCI6MzN9XSwzMjY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBpbnZva2UgPSBfZGVyZXFfKDQ2KTtcbnZhciBwYXJ0aWFsID0gX2RlcmVxXyg4OCk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcbnZhciBNU0lFID0gISFuYXZpZ2F0b3IgJiYgL01TSUUgLlxcLi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBNU0lFID8gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xuICAgIHJldHVybiBzZXQoaW52b2tlKFxuICAgICAgcGFydGlhbCxcbiAgICAgIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgdHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKVxuICAgICksIHRpbWUpO1xuICB9IDogc2V0O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG5cbn0se1wiMzNcIjozMyxcIjQwXCI6NDAsXCI0NlwiOjQ2LFwiODhcIjo4OH1dLDMyNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDI1NCk7XG5fZGVyZXFfKDE5MSk7XG5fZGVyZXFfKDE5Myk7XG5fZGVyZXFfKDE5Mik7XG5fZGVyZXFfKDE5NSk7XG5fZGVyZXFfKDE5Nyk7XG5fZGVyZXFfKDIwMik7XG5fZGVyZXFfKDE5Nik7XG5fZGVyZXFfKDE5NCk7XG5fZGVyZXFfKDIwNCk7XG5fZGVyZXFfKDIwMyk7XG5fZGVyZXFfKDE5OSk7XG5fZGVyZXFfKDIwMCk7XG5fZGVyZXFfKDE5OCk7XG5fZGVyZXFfKDE5MCk7XG5fZGVyZXFfKDIwMSk7XG5fZGVyZXFfKDIwNSk7XG5fZGVyZXFfKDIwNik7XG5fZGVyZXFfKDE1Nyk7XG5fZGVyZXFfKDE1OSk7XG5fZGVyZXFfKDE1OCk7XG5fZGVyZXFfKDIwOCk7XG5fZGVyZXFfKDIwNyk7XG5fZGVyZXFfKDE3OCk7XG5fZGVyZXFfKDE4OCk7XG5fZGVyZXFfKDE4OSk7XG5fZGVyZXFfKDE3OSk7XG5fZGVyZXFfKDE4MCk7XG5fZGVyZXFfKDE4MSk7XG5fZGVyZXFfKDE4Mik7XG5fZGVyZXFfKDE4Myk7XG5fZGVyZXFfKDE4NCk7XG5fZGVyZXFfKDE4NSk7XG5fZGVyZXFfKDE4Nik7XG5fZGVyZXFfKDE4Nyk7XG5fZGVyZXFfKDE2MSk7XG5fZGVyZXFfKDE2Mik7XG5fZGVyZXFfKDE2Myk7XG5fZGVyZXFfKDE2NCk7XG5fZGVyZXFfKDE2NSk7XG5fZGVyZXFfKDE2Nik7XG5fZGVyZXFfKDE2Nyk7XG5fZGVyZXFfKDE2OCk7XG5fZGVyZXFfKDE2OSk7XG5fZGVyZXFfKDE3MCk7XG5fZGVyZXFfKDE3MSk7XG5fZGVyZXFfKDE3Mik7XG5fZGVyZXFfKDE3Myk7XG5fZGVyZXFfKDE3NCk7XG5fZGVyZXFfKDE3NSk7XG5fZGVyZXFfKDE3Nik7XG5fZGVyZXFfKDE3Nyk7XG5fZGVyZXFfKDI0MSk7XG5fZGVyZXFfKDI0Nik7XG5fZGVyZXFfKDI1Myk7XG5fZGVyZXFfKDI0NCk7XG5fZGVyZXFfKDIzNik7XG5fZGVyZXFfKDIzNyk7XG5fZGVyZXFfKDI0Mik7XG5fZGVyZXFfKDI0Nyk7XG5fZGVyZXFfKDI0OSk7XG5fZGVyZXFfKDIzMik7XG5fZGVyZXFfKDIzMyk7XG5fZGVyZXFfKDIzNCk7XG5fZGVyZXFfKDIzNSk7XG5fZGVyZXFfKDIzOCk7XG5fZGVyZXFfKDIzOSk7XG5fZGVyZXFfKDI0MCk7XG5fZGVyZXFfKDI0Myk7XG5fZGVyZXFfKDI0NSk7XG5fZGVyZXFfKDI0OCk7XG5fZGVyZXFfKDI1MCk7XG5fZGVyZXFfKDI1MSk7XG5fZGVyZXFfKDI1Mik7XG5fZGVyZXFfKDE1Mik7XG5fZGVyZXFfKDE1NCk7XG5fZGVyZXFfKDE1Myk7XG5fZGVyZXFfKDE1Nik7XG5fZGVyZXFfKDE1NSk7XG5fZGVyZXFfKDE0MCk7XG5fZGVyZXFfKDEzOCk7XG5fZGVyZXFfKDE0NSk7XG5fZGVyZXFfKDE0Mik7XG5fZGVyZXFfKDE0OCk7XG5fZGVyZXFfKDE1MCk7XG5fZGVyZXFfKDEzNyk7XG5fZGVyZXFfKDE0NCk7XG5fZGVyZXFfKDEzNCk7XG5fZGVyZXFfKDE0OSk7XG5fZGVyZXFfKDEzMik7XG5fZGVyZXFfKDE0Nyk7XG5fZGVyZXFfKDE0Nik7XG5fZGVyZXFfKDEzOSk7XG5fZGVyZXFfKDE0Myk7XG5fZGVyZXFfKDEzMSk7XG5fZGVyZXFfKDEzMyk7XG5fZGVyZXFfKDEzNik7XG5fZGVyZXFfKDEzNSk7XG5fZGVyZXFfKDE1MSk7XG5fZGVyZXFfKDE0MSk7XG5fZGVyZXFfKDIyNCk7XG5fZGVyZXFfKDIzMCk7XG5fZGVyZXFfKDIyNSk7XG5fZGVyZXFfKDIyNik7XG5fZGVyZXFfKDIyNyk7XG5fZGVyZXFfKDIyOCk7XG5fZGVyZXFfKDIyOSk7XG5fZGVyZXFfKDIwOSk7XG5fZGVyZXFfKDE2MCk7XG5fZGVyZXFfKDIzMSk7XG5fZGVyZXFfKDI2Nik7XG5fZGVyZXFfKDI2Nyk7XG5fZGVyZXFfKDI1NSk7XG5fZGVyZXFfKDI1Nik7XG5fZGVyZXFfKDI2MSk7XG5fZGVyZXFfKDI2NCk7XG5fZGVyZXFfKDI2NSk7XG5fZGVyZXFfKDI1OSk7XG5fZGVyZXFfKDI2Mik7XG5fZGVyZXFfKDI2MCk7XG5fZGVyZXFfKDI2Myk7XG5fZGVyZXFfKDI1Nyk7XG5fZGVyZXFfKDI1OCk7XG5fZGVyZXFfKDIxMCk7XG5fZGVyZXFfKDIxMSk7XG5fZGVyZXFfKDIxMik7XG5fZGVyZXFfKDIxMyk7XG5fZGVyZXFfKDIxNCk7XG5fZGVyZXFfKDIxNyk7XG5fZGVyZXFfKDIxNSk7XG5fZGVyZXFfKDIxNik7XG5fZGVyZXFfKDIxOCk7XG5fZGVyZXFfKDIxOSk7XG5fZGVyZXFfKDIyMCk7XG5fZGVyZXFfKDIyMSk7XG5fZGVyZXFfKDIyMyk7XG5fZGVyZXFfKDIyMik7XG5fZGVyZXFfKDI3MCk7XG5fZGVyZXFfKDI2OCk7XG5fZGVyZXFfKDI2OSk7XG5fZGVyZXFfKDMxMSk7XG5fZGVyZXFfKDMxNCk7XG5fZGVyZXFfKDMxMyk7XG5fZGVyZXFfKDMxNSk7XG5fZGVyZXFfKDMxNik7XG5fZGVyZXFfKDMxMik7XG5fZGVyZXFfKDMxNyk7XG5fZGVyZXFfKDMxOCk7XG5fZGVyZXFfKDI5Mik7XG5fZGVyZXFfKDI5NSk7XG5fZGVyZXFfKDI5MSk7XG5fZGVyZXFfKDI4OSk7XG5fZGVyZXFfKDI5MCk7XG5fZGVyZXFfKDI5Myk7XG5fZGVyZXFfKDI5NCk7XG5fZGVyZXFfKDI3Nik7XG5fZGVyZXFfKDMxMCk7XG5fZGVyZXFfKDI3NSk7XG5fZGVyZXFfKDMwOSk7XG5fZGVyZXFfKDMyMSk7XG5fZGVyZXFfKDMyMyk7XG5fZGVyZXFfKDI3NCk7XG5fZGVyZXFfKDMwOCk7XG5fZGVyZXFfKDMyMCk7XG5fZGVyZXFfKDMyMik7XG5fZGVyZXFfKDI3Myk7XG5fZGVyZXFfKDMxOSk7XG5fZGVyZXFfKDI3Mik7XG5fZGVyZXFfKDI3Nyk7XG5fZGVyZXFfKDI3OCk7XG5fZGVyZXFfKDI3OSk7XG5fZGVyZXFfKDI4MCk7XG5fZGVyZXFfKDI4MSk7XG5fZGVyZXFfKDI4Myk7XG5fZGVyZXFfKDI4Mik7XG5fZGVyZXFfKDI4NCk7XG5fZGVyZXFfKDI4NSk7XG5fZGVyZXFfKDI4Nik7XG5fZGVyZXFfKDI4OCk7XG5fZGVyZXFfKDI4Nyk7XG5fZGVyZXFfKDI5Nyk7XG5fZGVyZXFfKDI5OCk7XG5fZGVyZXFfKDI5OSk7XG5fZGVyZXFfKDMwMCk7XG5fZGVyZXFfKDMwMik7XG5fZGVyZXFfKDMwMSk7XG5fZGVyZXFfKDMwNCk7XG5fZGVyZXFfKDMwMyk7XG5fZGVyZXFfKDMwNSk7XG5fZGVyZXFfKDMwNik7XG5fZGVyZXFfKDMwNyk7XG5fZGVyZXFfKDI3MSk7XG5fZGVyZXFfKDI5Nik7XG5fZGVyZXFfKDMyNik7XG5fZGVyZXFfKDMyNSk7XG5fZGVyZXFfKDMyNCk7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oMjMpO1xuXG59LHtcIjEzMVwiOjEzMSxcIjEzMlwiOjEzMixcIjEzM1wiOjEzMyxcIjEzNFwiOjEzNCxcIjEzNVwiOjEzNSxcIjEzNlwiOjEzNixcIjEzN1wiOjEzNyxcIjEzOFwiOjEzOCxcIjEzOVwiOjEzOSxcIjE0MFwiOjE0MCxcIjE0MVwiOjE0MSxcIjE0MlwiOjE0MixcIjE0M1wiOjE0MyxcIjE0NFwiOjE0NCxcIjE0NVwiOjE0NSxcIjE0NlwiOjE0NixcIjE0N1wiOjE0NyxcIjE0OFwiOjE0OCxcIjE0OVwiOjE0OSxcIjE1MFwiOjE1MCxcIjE1MVwiOjE1MSxcIjE1MlwiOjE1MixcIjE1M1wiOjE1MyxcIjE1NFwiOjE1NCxcIjE1NVwiOjE1NSxcIjE1NlwiOjE1NixcIjE1N1wiOjE1NyxcIjE1OFwiOjE1OCxcIjE1OVwiOjE1OSxcIjE2MFwiOjE2MCxcIjE2MVwiOjE2MSxcIjE2MlwiOjE2MixcIjE2M1wiOjE2MyxcIjE2NFwiOjE2NCxcIjE2NVwiOjE2NSxcIjE2NlwiOjE2NixcIjE2N1wiOjE2NyxcIjE2OFwiOjE2OCxcIjE2OVwiOjE2OSxcIjE3MFwiOjE3MCxcIjE3MVwiOjE3MSxcIjE3MlwiOjE3MixcIjE3M1wiOjE3MyxcIjE3NFwiOjE3NCxcIjE3NVwiOjE3NSxcIjE3NlwiOjE3NixcIjE3N1wiOjE3NyxcIjE3OFwiOjE3OCxcIjE3OVwiOjE3OSxcIjE4MFwiOjE4MCxcIjE4MVwiOjE4MSxcIjE4MlwiOjE4MixcIjE4M1wiOjE4MyxcIjE4NFwiOjE4NCxcIjE4NVwiOjE4NSxcIjE4NlwiOjE4NixcIjE4N1wiOjE4NyxcIjE4OFwiOjE4OCxcIjE4OVwiOjE4OSxcIjE5MFwiOjE5MCxcIjE5MVwiOjE5MSxcIjE5MlwiOjE5MixcIjE5M1wiOjE5MyxcIjE5NFwiOjE5NCxcIjE5NVwiOjE5NSxcIjE5NlwiOjE5NixcIjE5N1wiOjE5NyxcIjE5OFwiOjE5OCxcIjE5OVwiOjE5OSxcIjIwMFwiOjIwMCxcIjIwMVwiOjIwMSxcIjIwMlwiOjIwMixcIjIwM1wiOjIwMyxcIjIwNFwiOjIwNCxcIjIwNVwiOjIwNSxcIjIwNlwiOjIwNixcIjIwN1wiOjIwNyxcIjIwOFwiOjIwOCxcIjIwOVwiOjIwOSxcIjIxMFwiOjIxMCxcIjIxMVwiOjIxMSxcIjIxMlwiOjIxMixcIjIxM1wiOjIxMyxcIjIxNFwiOjIxNCxcIjIxNVwiOjIxNSxcIjIxNlwiOjIxNixcIjIxN1wiOjIxNyxcIjIxOFwiOjIxOCxcIjIxOVwiOjIxOSxcIjIyMFwiOjIyMCxcIjIyMVwiOjIyMSxcIjIyMlwiOjIyMixcIjIyM1wiOjIyMyxcIjIyNFwiOjIyNCxcIjIyNVwiOjIyNSxcIjIyNlwiOjIyNixcIjIyN1wiOjIyNyxcIjIyOFwiOjIyOCxcIjIyOVwiOjIyOSxcIjIzXCI6MjMsXCIyMzBcIjoyMzAsXCIyMzFcIjoyMzEsXCIyMzJcIjoyMzIsXCIyMzNcIjoyMzMsXCIyMzRcIjoyMzQsXCIyMzVcIjoyMzUsXCIyMzZcIjoyMzYsXCIyMzdcIjoyMzcsXCIyMzhcIjoyMzgsXCIyMzlcIjoyMzksXCIyNDBcIjoyNDAsXCIyNDFcIjoyNDEsXCIyNDJcIjoyNDIsXCIyNDNcIjoyNDMsXCIyNDRcIjoyNDQsXCIyNDVcIjoyNDUsXCIyNDZcIjoyNDYsXCIyNDdcIjoyNDcsXCIyNDhcIjoyNDgsXCIyNDlcIjoyNDksXCIyNTBcIjoyNTAsXCIyNTFcIjoyNTEsXCIyNTJcIjoyNTIsXCIyNTNcIjoyNTMsXCIyNTRcIjoyNTQsXCIyNTVcIjoyNTUsXCIyNTZcIjoyNTYsXCIyNTdcIjoyNTcsXCIyNThcIjoyNTgsXCIyNTlcIjoyNTksXCIyNjBcIjoyNjAsXCIyNjFcIjoyNjEsXCIyNjJcIjoyNjIsXCIyNjNcIjoyNjMsXCIyNjRcIjoyNjQsXCIyNjVcIjoyNjUsXCIyNjZcIjoyNjYsXCIyNjdcIjoyNjcsXCIyNjhcIjoyNjgsXCIyNjlcIjoyNjksXCIyNzBcIjoyNzAsXCIyNzFcIjoyNzEsXCIyNzJcIjoyNzIsXCIyNzNcIjoyNzMsXCIyNzRcIjoyNzQsXCIyNzVcIjoyNzUsXCIyNzZcIjoyNzYsXCIyNzdcIjoyNzcsXCIyNzhcIjoyNzgsXCIyNzlcIjoyNzksXCIyODBcIjoyODAsXCIyODFcIjoyODEsXCIyODJcIjoyODIsXCIyODNcIjoyODMsXCIyODRcIjoyODQsXCIyODVcIjoyODUsXCIyODZcIjoyODYsXCIyODdcIjoyODcsXCIyODhcIjoyODgsXCIyODlcIjoyODksXCIyOTBcIjoyOTAsXCIyOTFcIjoyOTEsXCIyOTJcIjoyOTIsXCIyOTNcIjoyOTMsXCIyOTRcIjoyOTQsXCIyOTVcIjoyOTUsXCIyOTZcIjoyOTYsXCIyOTdcIjoyOTcsXCIyOThcIjoyOTgsXCIyOTlcIjoyOTksXCIzMDBcIjozMDAsXCIzMDFcIjozMDEsXCIzMDJcIjozMDIsXCIzMDNcIjozMDMsXCIzMDRcIjozMDQsXCIzMDVcIjozMDUsXCIzMDZcIjozMDYsXCIzMDdcIjozMDcsXCIzMDhcIjozMDgsXCIzMDlcIjozMDksXCIzMTBcIjozMTAsXCIzMTFcIjozMTEsXCIzMTJcIjozMTIsXCIzMTNcIjozMTMsXCIzMTRcIjozMTQsXCIzMTVcIjozMTUsXCIzMTZcIjozMTYsXCIzMTdcIjozMTcsXCIzMThcIjozMTgsXCIzMTlcIjozMTksXCIzMjBcIjozMjAsXCIzMjFcIjozMjEsXCIzMjJcIjozMjIsXCIzMjNcIjozMjMsXCIzMjRcIjozMjQsXCIzMjVcIjozMjUsXCIzMjZcIjozMjZ9XSwzMjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9tYXN0ZXIvTElDRU5TRSBmaWxlLiBBblxuICogYWRkaXRpb25hbCBncmFudCBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluXG4gKiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwucHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBnbG9iYWwucHJvY2Vzcy5kb21haW4pIHtcbiAgICAgIGludm9rZSA9IGdsb2JhbC5wcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBBbW9uZyB0aGUgdmFyaW91cyB0cmlja3MgZm9yIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsXG4gIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdFxuICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLlxuICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6XG4gIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHRoaXNcbik7XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxufSx7fV19LHt9LFsxXSk7XG5cbi8vIGNvbm5lY3QganF1ZXJ5ICYgY2xpcC1wYXRoIHRvIGNyZWF0ZSBwb2x5ZmlsbCBmb3IgY3NzIGNsaXAtcGF0aCBwcm9wZXJ0eVxyXG4vLyBpZiBydW4gb24gaWUxMVxyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcclxuXHRjb25zdCBpc0lFMTEgPSAoKSA9PiB7XHJcblx0XHRyZXR1cm4gISF3aW5kb3cuTVNJbnB1dE1ldGhvZENvbnRleHQgJiYgISFkb2N1bWVudC5kb2N1bWVudE1vZGU7XHJcblx0XHQvLyByZXR1cm4gdHJ1ZVxyXG5cdH07XHJcblxyXG5cdC8vIGZ1bmN0aW9uIGZvciBjaGFuZ2luZyByYW5nZSBwb3NpdGlvblxyXG5cdGNvbnN0IGlzTW9iaWxlID0gKCkgPT4gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCA8IDc2ODtcclxuXHJcblxyXG5cdGlmIChpc0lFMTEoKSkge1xyXG5cdFx0Y29uc3QgaGFuZGxlciA9ICgpID0+IHtcclxuXHRcdFx0Y29uc3QgY3JlYXRlRmlsbFBvbHlmaWxsID0gb3B0aW9ucyA9PiB7XHJcblx0XHRcdFx0Y29uc3QgcmVwbGFjZXJUb3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuXHRcdFx0XHRyZXBsYWNlclRvcC5jbGFzc05hbWUgPSBvcHRpb25zLmNsYXNzTmFtZTtcclxuXHRcdFx0XHRyZXBsYWNlclRvcC5zZXRBdHRyaWJ1dGUoJ3NyYycsIG9wdGlvbnMuc3JjKTtcclxuXHRcdFx0XHRyZXBsYWNlclRvcC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgb3B0aW9ucy53aWR0aCk7XHJcblx0XHRcdFx0cmVwbGFjZXJUb3Auc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBvcHRpb25zLmhlaWdodCk7XHJcblx0XHRcdFx0cmVwbGFjZXJUb3Auc2V0QXR0cmlidXRlKCdhbHQnLCBvcHRpb25zLmFsdCB8fCAnJyk7XHJcblx0XHRcdFx0cmVwbGFjZXJUb3Auc2V0QXR0cmlidXRlKCdkYXRhLXBvbHljbGlwJywgb3B0aW9ucy5wb2x5Y2xpcCk7XHJcblxyXG5cdFx0XHRcdG9wdGlvbnMuY29udGFpbmVyLmFwcGVuZENoaWxkKHJlcGxhY2VyVG9wKTtcclxuXHRcdFx0XHRyZXR1cm4gcmVwbGFjZXJUb3A7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRjb25zdCBjcmVhdGVCb3R0b21QYXJ0ID0gb3B0aW9ucyA9PiB7XHJcblx0XHRcdFx0Y29uc3QgYm90dG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblx0XHRcdFx0Ym90dG9tLmNsYXNzTmFtZSA9IG9wdGlvbnMuY2xhc3NOYW1lO1xyXG5cdFx0XHRcdG9wdGlvbnMuY29udGFpbmVyLmFwcGVuZENoaWxkKGJvdHRvbSk7XHJcblx0XHRcdFx0cmV0dXJuIGJvdHRvbTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGNvbnN0IHJhbmdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJhbmdlX19zY2FsZScpO1xyXG5cdFx0XHRyYW5nZS5pbm5lckhUTUwgPSAnJztcclxuXHRcdFx0cmFuZ2UuY2xhc3NMaXN0LmFkZCgncG9seWZpbGwnKTtcclxuXHJcblx0XHRcdC8vIGNvbnN0IHJhbmdlVG9wID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJhbmdlX19zY2FsZS10b3AnKTtcclxuXHRcdFx0Y29uc3QgcmFuZ2VUb3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHRcdFx0cmFuZ2VUb3AuY2xhc3NOYW1lID0gJ3BvbHlmaWxsX191cHBlcic7XHJcblxyXG5cdFx0XHRjb25zdCByYW5nZUJvdHRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0XHRyYW5nZUJvdHRvbS5jbGFzc05hbWUgPSAncG9seWZpbGxfX2JvdHRvbSc7XHJcblxyXG5cdFx0XHRyYW5nZS5hcHBlbmRDaGlsZChyYW5nZVRvcCk7XHJcblx0XHRcdHJhbmdlLmFwcGVuZENoaWxkKHJhbmdlQm90dG9tKTtcclxuXHJcblx0XHRcdGNvbnN0IHRyaWFuZ2xlR3JhZGllbnQgPSBjcmVhdGVGaWxsUG9seWZpbGwoe1xyXG5cdFx0XHRcdHNyYzogJ2ltYWdlcy9ncmFkaWVudC5wbmcnLFxyXG5cdFx0XHRcdHdpZHRoOiAnNzY4JyxcclxuXHRcdFx0XHRoZWlnaHQ6ICcxMScsXHJcblx0XHRcdFx0YWx0OiAnJyxcclxuXHRcdFx0XHRwb2x5Y2xpcDogJzEwMCUsIDAsIDEwMCUsIDEwMCUsIDAlLCAxMDAlJyxcclxuXHRcdFx0XHRjbGFzc05hbWU6ICdwbHlmaWxsX19pbWcnLFxyXG5cdFx0XHRcdGNvbnRhaW5lcjogcmFuZ2VUb3AsXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0Y29uc3QgdHJpYW5nbGVHcmF5ID0gY3JlYXRlRmlsbFBvbHlmaWxsKHtcclxuXHRcdFx0XHRzcmM6ICdpbWFnZXMvZ3JheS5wbmcnLFxyXG5cdFx0XHRcdHdpZHRoOiAnNzY4JyxcclxuXHRcdFx0XHRoZWlnaHQ6ICcxMScsXHJcblx0XHRcdFx0YWx0OiAnJyxcclxuXHRcdFx0XHRwb2x5Y2xpcDogJzEwMCUsIDAsIDEwMCUsIDEwMCUsIDAlLCAxMDAlJyxcclxuXHRcdFx0XHRjbGFzc05hbWU6ICdwb2x5ZmlsbF9faW1nJyxcclxuXHRcdFx0XHRjb250YWluZXI6IHJhbmdlQm90dG9tLFxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGNvbnN0IGJvdHRvbUdyYWRpZW50ID0gY3JlYXRlQm90dG9tUGFydCh7XHJcblx0XHRcdFx0Y2xhc3NOYW1lOiAncG9seWZpbGxfX3VwcGVyLWJvdHRvbScsXHJcblx0XHRcdFx0Y29udGFpbmVyOiByYW5nZVRvcCxcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRjb25zdCBib3R0b21HcmF5ID0gY3JlYXRlQm90dG9tUGFydCh7XHJcblx0XHRcdFx0Y2xhc3NOYW1lOiAncG9seWZpbGxfX2JvdHRvbS1ib3R0b20nLFxyXG5cdFx0XHRcdGNvbnRhaW5lcjogcmFuZ2VCb3R0b20sXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0Y29uc3QgcmFuZ2VDb250cm9sID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJhbmdlX19jb250cm9sJylcclxuXHRcdFx0c2V0VGltZW91dCgoKSA9PiByYW5nZVRvcC5zdHlsZS5tYXhXaWR0aCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXJhbmdlXScpLmRhdGFzZXQucmFuZ2VTdGFydCArICclJywxMDAwKVxyXG5cclxuXHRcdFx0d2luZG93LnNldFZhbHVlcyA9IChkaXJlY3Rpb24sIHYsIHN0ZXApID0+IHtcclxuXHRcdFx0XHRyYW5nZVRvcC5zdHlsZS5tYXhXaWR0aCA9IHYgKyAncHgnXHJcblxyXG5cdFx0XHRcdGlmIChkaXJlY3Rpb24gPT09ICd1cCcpIHtcclxuXHRcdFx0XHRcdHJhbmdlQ29udHJvbC5zdHlsZS5sZWZ0ID0gdiArICdweCc7XHJcblx0XHRcdFx0XHR2ICs9IHN0ZXA7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnZG93bicpIHtcclxuXHRcdFx0XHRcdHJhbmdlQ29udHJvbC5zdHlsZS5sZWZ0ID0gdiArICdweCc7XHJcblx0XHRcdFx0XHR2IC09IHN0ZXA7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGNvbnNvbGUubG9nKGlzTW9iaWxlKCkpXHJcblxyXG5cdFx0XHQvLyBpZiAoaXNNb2JpbGUoKSkge1xyXG5cdFx0XHQvLyBcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHQvLyBcdFx0Y29uc3QgY2FudmFzTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb2x5Q2xpcC1jbGlwcGVkJyk7XHJcblx0XHRcdC8vIFx0XHRjb25zb2xlLmxvZyhjYW52YXNMaXN0KTtcclxuXHRcdFx0Ly8gXHRcdFsuLi5jYW52YXNMaXN0XS5mb3JFYWNoKGNhbnZhcyA9PiB7XHJcblx0XHRcdC8vIFx0XHRcdGNhbnZhcy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgJzc2OCcpXHJcblx0XHRcdC8vIFx0XHRcdGNvbnNvbGUubG9nKGNhbnZhcylcclxuXHRcdFx0Ly8gXHRcdH0pXHJcblx0XHRcdC8vIFx0fSwgNTApXHJcblx0XHRcdC8vXHJcblx0XHRcdC8vIH1cclxuXHJcblx0XHR9O1xyXG5cclxuXHRcdGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG5cdFx0c2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcclxuXHRcdHNjcmlwdC5zcmMgPSAnanMvbGlicy5taW4uanMnO1xyXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVsgMCBdLmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcblx0XHRzY3JpcHQub25sb2FkID0gKCkgPT4ge1xyXG5cclxuXHRcdFx0aGFuZGxlcigpO1xyXG5cclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHQvL1x0Y3JlYXRlIGZsb2F0aW5nIHBsYWNlaG9sZGVyc1xyXG5cdGNvbnN0IGhhbmRsZUZsb2F0aW5nUGxhY2Vob2xkZXJzID0gKCkgPT4ge1xyXG5cdFx0Y29uc3QgY3JlYXRlRmxvYXRpbmdQbGFjZWhvbGRlciA9IChlbCkgPT4ge1xyXG5cclxuXHRcdFx0Y29uc3QgdGV4dCA9IGVsLmRhdGFzZXQucGxhY2Vob2xkZXI7XHJcblx0XHRcdGlmICh0ZXh0ID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuXHJcblx0XHRcdGNvbnN0IHBsYWNlaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuXHRcdFx0cGxhY2Vob2xkZXIuZm9yID0gZWwubmFtZTtcclxuXHRcdFx0cGxhY2Vob2xkZXIudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG5cdFx0XHRwbGFjZWhvbGRlci5jbGFzc0xpc3QuYWRkKCdmbG9hdGluZy1wbGFjZWhvbGRlcicpO1xyXG5cdFx0XHQvLyBlbC5wYXJlbnRFbGVtZW50LnByZXBlbmQocGxhY2Vob2xkZXIpO1xyXG5cdFx0XHRlbC5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShwbGFjZWhvbGRlcixcclxuXHRcdFx0XHRlbC5wYXJlbnRFbGVtZW50LmNoaWxkTm9kZXNbIDAgXSk7XHJcblx0XHRcdGVsLnBsYWNlaG9sZGVyRWwgPSBwbGFjZWhvbGRlcjtcclxuXHJcblx0XHRcdGlmIChlbC52YWx1ZSAhPT0gJycpIHtcclxuXHRcdFx0XHRwbGFjZWhvbGRlci5jbGFzc0xpc3QuYWRkKCdmb2N1cycpO1xyXG5cdFx0XHRcdGVsLmNsYXNzTGlzdC5hZGQoJ2hhcy12YWx1ZScpO1xyXG5cclxuXHRcdFx0fVxyXG5cdFx0XHRlbC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGUgPT4ge1xyXG5cdFx0XHRcdHBsYWNlaG9sZGVyLmNsYXNzTGlzdC5hZGQoJ2ZvY3VzJyk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRjb25zdCBvbkZsb2F0aW5nTGFiZWxCbHVyID0gZSA9PiB7XHJcblx0XHRcdFx0cGxhY2Vob2xkZXIuY2xhc3NMaXN0LnJlbW92ZSgnZm9jdXMnKTtcclxuXHRcdFx0XHRlbC5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtdmFsdWUnKTtcclxuXHRcdFx0fTtcclxuXHRcdFx0ZWwuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGUgPT4ge1xyXG5cdFx0XHRcdGlmIChlbC52YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IGVsLnZhbHVlID09PSAnJykge1xyXG5cdFx0XHRcdFx0b25GbG9hdGluZ0xhYmVsQmx1cihlKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZWwuY2xhc3NMaXN0LmFkZCgnaGFzLXZhbHVlJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH07XHJcblx0XHRjb25zdCBlbGVtZW50c1dpdGhQbGFjZWhvbGRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcblx0XHRcdCdbZGF0YS1wbGFjZWhvbGRlcl0nKTtcclxuXHRcdFsuLi5lbGVtZW50c1dpdGhQbGFjZWhvbGRlcl0uZm9yRWFjaChcclxuXHRcdFx0ZWwgPT4gY3JlYXRlRmxvYXRpbmdQbGFjZWhvbGRlcihlbCkpO1xyXG5cclxuXHR9O1xyXG5cdGhhbmRsZUZsb2F0aW5nUGxhY2Vob2xkZXJzKCk7XHJcblxyXG5cdC8vIGJpcnRoeWVhciBzZWxlY3RcclxuXHRjb25zdCBoYW5kbGVCaXJ0aFllYXJTZWxlY3QgPSAoKSA9PiB7XHJcblx0XHRjb25zdCBiaXJ0aFllYXJTZWxlY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1zZWxlY3QteWVhcl0nKTtcclxuXHRcdGJpcnRoWWVhclNlbGVjdC5jbGFzc0xpc3QuYWRkKCdiaXJ0aHllYXItc2VsZWN0Jyk7XHJcblxyXG5cdFx0Ly8gaW5zZXJ0IGljb25cclxuXHRcdGNvbnN0IGV4cGFuZEljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuXHRcdGV4cGFuZEljb24uc3JjID0gJ2ltYWdlcy9zdmcvZXhwYW5kLWxpc3Quc3ZnJztcclxuXHRcdGV4cGFuZEljb24uYWx0ID0gJ2V4cGFuZC1iaXJ0aHllYXItbGlzdCc7XHJcblx0XHRleHBhbmRJY29uLmNsYXNzTGlzdC5hZGQoJ2JpcnRoeWVhci1zZWxlY3RfX2ljb24nKTtcclxuXHRcdGJpcnRoWWVhclNlbGVjdC5pbnNlcnRCZWZvcmUoZXhwYW5kSWNvbixcclxuXHRcdFx0YmlydGhZZWFyU2VsZWN0LmNoaWxkTm9kZXNbIDAgXSk7XHJcblxyXG5cdFx0Ly8gZ2V0IGlucHV0XHJcblx0XHRjb25zdCBpbnB1dCA9IGJpcnRoWWVhclNlbGVjdC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xyXG5cdFx0aW5wdXQuY2xhc3NMaXN0LmFkZCgnYmlydGh5ZWFyLXNlbGVjdF9faW5wdXQnKTtcclxuXHRcdGlucHV0LnJlYWRPbmx5ID0gJ3JlYWRvbmx5JztcclxuXHJcblx0XHQvLyBpbnNlcnQgbGlzdFxyXG5cdFx0Y29uc3QgdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xyXG5cdFx0dWwuY2xhc3NMaXN0LmFkZCgnYmlydGh5ZWFyLXNlbGVjdF9fbGlzdCcpO1xyXG5cdFx0Y29uc3QgbWluID0gYmlydGhZZWFyU2VsZWN0LmRhdGFzZXQueWVhclN0YXJ0IHx8IDE5NzA7XHJcblx0XHRjb25zdCBtYXggPSBiaXJ0aFllYXJTZWxlY3QuZGF0YXNldC55ZWFyRW5kIHx8IDIwMDM7XHJcblx0XHRmb3IgKGxldCBpID0gbWF4OyBpID49IG1pbjsgaS0tKSB7XHJcblx0XHRcdGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuXHRcdFx0bGkuY2xhc3NMaXN0LmFkZCgnYmlydGh5ZWFyLXNlbGVjdF9fbGlzdC1pdGVtJyk7XHJcblx0XHRcdGxpLnRleHRDb250ZW50ID0gaTtcclxuXHRcdFx0bGkub25jbGljayA9IGUgPT4ge1xyXG5cclxuXHRcdFx0XHRpbnB1dC52YWx1ZSA9IGk7XHJcblx0XHRcdFx0aW5wdXQuY2xhc3NMaXN0LmFkZCgnaGFzLXZhbHVlJyk7XHJcblx0XHRcdFx0aW5wdXQucGxhY2Vob2xkZXJFbC5jbGFzc0xpc3QuYWRkKCdmb2N1cycpO1xyXG5cclxuXHRcdFx0fTtcclxuXHRcdFx0dWwuYXBwZW5kQ2hpbGQobGkpO1xyXG5cdFx0fVxyXG5cdFx0YmlydGhZZWFyU2VsZWN0Lmluc2VydEJlZm9yZSh1bCwgYmlydGhZZWFyU2VsZWN0LmNoaWxkTm9kZXNbIDAgXSk7XHJcblxyXG5cdFx0Y29uc3Qgb3BlblNlbGVjdGlvbiA9IGUgPT4ge1xyXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdGV4cGFuZEljb24uY2xhc3NMaXN0LmFkZCgnYmlydGh5ZWFyLXNlbGVjdF9faWNvbi1yb3RhdGVkJyk7XHJcblx0XHRcdHVsLmNsYXNzTGlzdC5hZGQoJ3Nob3duJyk7XHJcblx0XHR9O1xyXG5cdFx0Y29uc3QgY2xvc2VTZWxlY3Rpb24gPSBlID0+IHtcclxuXHRcdFx0ZXhwYW5kSWNvbi5jbGFzc0xpc3QucmVtb3ZlKCdiaXJ0aHllYXItc2VsZWN0X19pY29uLXJvdGF0ZWQnKTtcclxuXHRcdFx0dWwuY2xhc3NMaXN0LnJlbW92ZSgnc2hvd24nKTtcclxuXHRcdH07XHJcblx0XHQvLyBhZGQgaGFuZGxlcnNcclxuXHRcdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgZSA9PiBvcGVuU2VsZWN0aW9uKGUpKTtcclxuXHJcblx0XHRleHBhbmRJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgZSA9PiBvcGVuU2VsZWN0aW9uKGUpKTtcclxuXHJcblx0XHRleHBhbmRJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBlID0+IGNsb3NlU2VsZWN0aW9uKGUpKTtcclxuXHJcblx0XHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZSA9PiBjbG9zZVNlbGVjdGlvbihlKSk7XHJcblxyXG5cdH07XHJcblx0aGFuZGxlQmlydGhZZWFyU2VsZWN0KCk7XHJcblxyXG5cdC8vIGN1c3RvbSBjaGVja2JveGVzXHJcblx0Y29uc3QgaGFuZGxlQ3VzdG9tQ2hlY2tib3hlcyA9ICgpID0+IHtcclxuXHRcdGNvbnN0IGdldFJhbmRvbVN0cmluZyA9IChsZW5ndGggPSA3KSA9PiB7XHJcblx0XHRcdHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcobGVuZ3RoKTtcclxuXHRcdH07XHJcblxyXG5cdFx0Y29uc3QgY3JlYXRlQ3VzdG9tQ2hlY2tCb3ggPSAoZWwpID0+IHtcclxuXHRcdFx0Y29uc3QgcGFyZW50ID0gZWwucGFyZW50RWxlbWVudDtcclxuXHRcdFx0ZWwuaGlkZGVuID0gJ2hpZGRlbic7XHJcblx0XHRcdGNvbnN0IGlkID0gZWwuaWQgfHwgKCgpID0+IHtcclxuXHRcdFx0XHRjb25zdCBuZXdJZCA9IGdldFJhbmRvbVN0cmluZygpO1xyXG5cdFx0XHRcdGVsLnNldEF0dHJpYnV0ZSgnaWQnLCBuZXdJZCk7XHJcblx0XHRcdFx0cmV0dXJuIG5ld0lkO1xyXG5cdFx0XHR9KSgpO1xyXG5cdFx0XHRjb25zdCBjaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuXHRcdFx0Y2hlY2tib3guY2xhc3NMaXN0LmFkZCgnY3VzdG9tLWNoZWNrYm94Jyk7XHJcblx0XHRcdGNoZWNrYm94LnNldEF0dHJpYnV0ZSgndGFiSW5kZXgnLCAnMCcpO1xyXG5cclxuXHRcdFx0Ly9cclxuXHRcdFx0Y29uc3QgaW5kaWNhdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcblx0XHRcdGluZGljYXRvci5zcmMgPSAnaW1hZ2VzL3N2Zy9jaGVja2VkLnN2Zyc7XHJcblx0XHRcdGluZGljYXRvci5hbHQgPSAnJztcclxuXHRcdFx0aW5kaWNhdG9yLmNsYXNzTGlzdC5hZGQoJ2N1c3RvbS1jaGVja2JveF9faW5kaWNhdG9yJyk7XHJcblx0XHRcdGNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcclxuXHRcdFx0Y2hlY2tib3guYXBwZW5kQ2hpbGQoaW5kaWNhdG9yKTtcclxuXHJcblx0XHRcdGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuXHRcdFx0bGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCBpZCk7XHJcblx0XHRcdGxhYmVsLmNsYXNzTmFtZSA9ICdjdXN0b20tY2hlY2tib3hfX2xhYmVsJztcclxuXHRcdFx0bGFiZWwudGV4dENvbnRlbnQgPSBlbC5kYXRhc2V0LmxhYmVsO1xyXG5cclxuXHRcdFx0aWYgKGVsLmNoZWNrZWQgPT09IHRydWUpIHtcclxuXHRcdFx0XHRjaGVja2JveC5jbGFzc0xpc3QuYWRkKCdjdXN0b20tY2hlY2tib3gtLWNoZWNrZWQnKTtcclxuXHRcdFx0XHRpbmRpY2F0b3IuY2xhc3NMaXN0LmFkZChcclxuXHRcdFx0XHRcdCdjdXN0b20tY2hlY2tib3hfX2luZGljYXRvci0tdmlzaWJsZScpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjaGVja2JveC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuXHRcdFx0XHRjb25zdCBjaGVja2VkID0gY2hlY2tib3guY2hlY2tlZDtcclxuXHJcblx0XHRcdFx0aWYgKCFjaGVja2VkKSB7XHJcblx0XHRcdFx0XHRjaGVja2JveC5jbGFzc0xpc3QuYWRkKCdjdXN0b20tY2hlY2tib3gtLWNoZWNrZWQnKTtcclxuXHRcdFx0XHRcdGluZGljYXRvci5jbGFzc0xpc3QuYWRkKFxyXG5cdFx0XHRcdFx0XHQnY3VzdG9tLWNoZWNrYm94X19pbmRpY2F0b3ItLXZpc2libGUnKTtcclxuXHRcdFx0XHRcdGVsLnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsIHRydWUpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRjaGVja2JveC5jbGFzc0xpc3QucmVtb3ZlKCdjdXN0b20tY2hlY2tib3gtLWNoZWNrZWQnKTtcclxuXHRcdFx0XHRcdGluZGljYXRvci5jbGFzc0xpc3QucmVtb3ZlKFxyXG5cdFx0XHRcdFx0XHQnY3VzdG9tLWNoZWNrYm94X19pbmRpY2F0b3ItLXZpc2libGUnKTtcclxuXHRcdFx0XHRcdGVsLnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsIGZhbHNlKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGNoZWNrYm94LmNoZWNrZWQgPSAhY2hlY2tlZDtcclxuXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0cGFyZW50LmFwcGVuZENoaWxkKGNoZWNrYm94KTtcclxuXHRcdFx0cGFyZW50LmFwcGVuZENoaWxkKGxhYmVsKTtcclxuXHRcdH07XHJcblxyXG5cdFx0Y29uc3QgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1jdXN0b20tY2hlY2tib3hdJyk7XHJcblx0XHRbLi4uZWxlbWVudHNdLmZvckVhY2goaXRlbSA9PiBjcmVhdGVDdXN0b21DaGVja0JveChpdGVtKSk7XHJcblx0fTtcclxuXHRoYW5kbGVDdXN0b21DaGVja2JveGVzKCk7XHJcblxyXG5cdC8vIGpzIHJhbmdlXHJcblx0Y29uc3QgaGFuZGxlSlNMZXZlbFJhbmdlID0gKCkgPT4ge1xyXG5cdFx0Y29uc3QgZ2V0UmVsYXRpdmVQZXJjZW50YWdlID0gKHZhbCwgdGFyZ2V0KSA9PiB7XHJcblx0XHRcdGNvbnN0IG9uZVBlcmNlbnQgPSB0YXJnZXQgLyAxMDA7XHJcblx0XHRcdHJldHVybiAodGFyZ2V0IC0gKHRhcmdldCAtIHZhbCkpIC8gb25lUGVyY2VudDtcclxuXHRcdH07XHJcblx0XHQvLyBqYXZhc2NyaXB0IHNlY3Rpb24gcmFuZ2VcclxuXHRcdGNvbnN0IGRlbGF5ID0gKGZuLCBtcykgPT4ge1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKERhdGUubm93KCkgPCBkZWxheS5uZXh0UG9zc2libGVDYWxsRGF0ZSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRmbiguLi5hcmd1bWVudHMpO1xyXG5cdFx0XHRcdGRlbGF5Lm5leHRQb3NzaWJsZUNhbGxEYXRlID0gRGF0ZS5ub3coKSArIG1zO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdH07XHJcblx0XHRjb25zdCBnZXRGcm9tUGVyY2VudGFnZXMgPSAocGVyY2VudGFnZXMsIHRhcmdldCkgPT4ge1xyXG5cdFx0XHRyZXR1cm4gdGFyZ2V0IC8gMTAwICogcGVyY2VudGFnZXM7XHJcblx0XHR9O1xyXG5cdFx0Y29uc3QgZ2V0RGFzaGVzQW1vdW50ID0gKHBvaW50LCBwb2ludHMpID0+IHtcclxuXHRcdFx0cG9pbnQgPSBOdW1iZXIocG9pbnQpO1xyXG5cdFx0XHRjb25zdCB2ID0gcG9pbnRzLmdldChwb2ludCk7XHJcblx0XHRcdGlmICh2KSB7XHJcblx0XHRcdFx0cG9pbnRzLnNldChwb2ludCwgey4uLnYsIGlzVXNlZDogdHJ1ZX0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB2O1xyXG5cdFx0fTtcclxuXHJcblx0XHRjb25zdCBzZXRSYW5nZVBvc2l0aW9uID0gZnVuY3Rpb24oXHJcblx0XHRcdGUsIGVsLCBzdGVwID0gMSwgbXMgPSA1MCwgYWJzb2x1dGVWYWx1ZSA9IG51bGwpIHtcclxuXHRcdFx0bGV0IHY7XHJcblx0XHRcdC8vIGlmIHZhbHVlIGlzIHByb3ZpZGVkIHRoZW4ganVzdCBtb3ZlIHRvIGl0XHJcblxyXG5cdFx0XHRpZiAoYWJzb2x1dGVWYWx1ZSAhPT0gbnVsbCkge1xyXG5cdFx0XHRcdHYgPSBhYnNvbHV0ZVZhbHVlO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGNvbnN0IGNvb3JkcyA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cdFx0XHRcdHYgPSBlLnBhZ2VYIC0gY29vcmRzLmxlZnQ7XHJcblx0XHRcdH1cclxuXHRcdFx0Y29uc3QgZ29hbCA9IHY7XHJcblx0XHRcdGNvbnN0IGluaXRpYWwgPSByYW5nZUNvbnRyb2wuc3R5bGUubGVmdC5yZXBsYWNlKCdweCcsICcnKTtcclxuXHRcdFx0Y29uc3QgZGlyZWN0aW9uID0gZ29hbCA+IGluaXRpYWwgPyAndXAnIDogJ2Rvd24nO1xyXG5cdFx0XHRsZXQgaSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gaGFuZGxlcigpIHtcclxuXHRcdFx0XHR3aW5kb3cuc2V0VmFsdWVzID8gd2luZG93LnNldFZhbHVlcyhkaXJlY3Rpb24sIHYsIHN0ZXApIDogc2V0VmFsdWVzKGRpcmVjdGlvbiwgdiwgc3RlcCk7XHJcblx0XHRcdFx0Y29uc3QgY3VycmVudCA9IHY7XHJcblx0XHRcdFx0aWYgKGN1cnJlbnQgPT09IGdvYWwpIHtcclxuXHRcdFx0XHRcdGNsZWFyVGltZW91dChpKTtcclxuXHRcdFx0XHRcdG1vdXNlRG93bkhhbmRsZXIuY3VycmVudCA9IGN1cnJlbnQ7XHJcblx0XHRcdFx0XHR0b3VjaFN0YXJ0SGFuZGxlci5jdXJyZW50ID0gY3VycmVudDtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0aSA9IHNldFRpbWVvdXQoaGFuZGxlciwgbXMpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0sIG1zKTtcclxuXHJcblx0XHR9O1xyXG5cclxuXHRcdGNvbnN0IHBvaW50cyA9IG5ldyBNYXAoW1xyXG5cdFx0XHRbMCwge2Rhc2hlczogNywgbWFya2VySGVpZ2h0OiAwLCBpZTExVG9wOiAyMX1dLFxyXG5cdFx0XHRbMjQsIHtkYXNoZXM6IDYsIG1hcmtlckhlaWdodDogNiwgaWUxMVRvcDogN31dLFxyXG5cdFx0XHRbNTAsIHtkYXNoZXM6IDUsIG1hcmtlckhlaWdodDogOSwgaWUxMVRvcDogNX1dLFxyXG5cdFx0XHRbNzUsIHtkYXNoZXM6IDQsIG1hcmtlckhlaWdodDogMTEsIGllMTFUb3A6IDV9XSxcclxuXHRcdFx0WzEwMCwge2Rhc2hlczogMywgbWFya2VySGVpZ2h0OiAxNCwgaWUxMVRvcDogMjN9XSxcclxuXHRcdF0pO1xyXG5cclxuXHRcdGNvbnN0IHJhbmdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtcmFuZ2VdJyk7XHJcblx0XHRjb25zdCByYW5nZUNvbnRyb2wgPSByYW5nZS5xdWVyeVNlbGVjdG9yKCcucmFuZ2VfX2NvbnRyb2wnKTtcclxuXHRcdGNvbnN0IHJhbmdlQ29udHJvbENvbnRhaW5lciA9IHJhbmdlLnF1ZXJ5U2VsZWN0b3IoXHJcblx0XHRcdCcucmFuZ2VfX2NvbnRyb2wtY29udGFpbmVyJyk7XHJcblx0XHRjb25zdCByYW5nZUdyYWRpZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5yYW5nZV9fZ3JhZGllbnQnKTtcclxuXHRcdGNvbnN0IHJhbmdlR3JhZGllbnRzRmlsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxyXG5cdFx0XHQnLnJhbmdlX19ncmFkaWVudC1maWxsJyk7XHJcblx0XHRjb25zdCBpbml0aWFsVmFsdWVQZXJjZW50YWdlcyA9IHJhbmdlLmRhdGFzZXQucmFuZ2VTdGFydDtcclxuXHRcdGNvbnN0IHJhbmdlV2lkdGggPSByYW5nZS5xdWVyeVNlbGVjdG9yKCcucmFuZ2VfX3NjYWxlLXRvcCcpLm9mZnNldFdpZHRoO1xyXG5cclxuXHRcdGNvbnN0IGNyZWF0ZVBvaW50cyA9IChwb2ludHNEYXRhKSA9PiB7XHJcblx0XHRcdGNvbnN0IHBvaW50c0NvbnRhaW5lciA9IHJhbmdlLnF1ZXJ5U2VsZWN0b3IoJy5yYW5nZV9fcG9pbnRzJyk7XHJcblxyXG5cdFx0XHRpZiAoaXNJRTExKCkpIHtcclxuXHRcdFx0XHRwb2ludHNDb250YWluZXIuc3R5bGVbICdhbGlnbi1pdGVtcycgXSA9ICdmbGV4LXN0YXJ0JztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc3QgcG9pbnRzID0gcmFuZ2UucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtcG9pbnRdJyk7XHJcblxyXG5cdFx0XHRbLi4ucG9pbnRzXS5mb3JFYWNoKHBvaW50ID0+IHtcclxuXHRcdFx0XHRsZXQgb3JpZW50YXRpb25BZGRpdGlvbkNsYXNzID0gJyc7XHJcblx0XHRcdFx0bGV0IHRleHRBZGRpdGlvbkNsYXNzID0gJyc7XHJcblx0XHRcdFx0bGV0IG1hcmtlckFkZGl0aW9uYWxDbGFzcyA9ICcnO1xyXG5cdFx0XHRcdGxldCBvZmZzZXRMZWZ0ID0gZ2V0RnJvbVBlcmNlbnRhZ2VzKHBvaW50LmRhdGFzZXQucG9pbnQsXHJcblx0XHRcdFx0XHRyYW5nZVdpZHRoKTtcclxuXHRcdFx0XHRpZiAob2Zmc2V0TGVmdCA9PT0gcmFuZ2VXaWR0aCkge1xyXG5cclxuXHRcdFx0XHRcdHBvaW50LmNsYXNzTGlzdC5hZGQoJ3JhbmdlX19wb2ludC0tcmlnaHQnKTtcclxuXHRcdFx0XHRcdGlmIChpc01vYmlsZSgpKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHJcblx0XHRcdFx0XHRcdFx0cG9pbnQuc3R5bGUucmlnaHQgPSAnMCc7XHJcblx0XHRcdFx0XHRcdFx0cG9pbnQuc3R5bGUubGVmdCA9IG9mZnNldExlZnQgKyAyICsgJ3B4JztcclxuXHRcdFx0XHRcdFx0XHRwb2ludC5zdHlsZS50b3AgPSAnNDRweCdcclxuXHRcdFx0XHRcdFx0XHRwb2ludC5xdWVyeVNlbGVjdG9yKFxyXG5cdFx0XHRcdFx0XHRcdFx0Jy5yYW5nZV9fcG9pbnQtdGV4dCAnKS5zdHlsZS5jc3NUZXh0ID0gJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDogLTE1MnB4OyA7d2lkdGg6MTgwcHg7JyArICghaXNJRTExKCkgPyAndG9wOjBweCcgOiAndG9wOi0yMHB4JylcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0b3JpZW50YXRpb25BZGRpdGlvbkNsYXNzID0gJ3JhbmdlX19wb2ludC1vcmllbnRhdGlvbi0tcmlnaHQnO1xyXG5cdFx0XHRcdFx0dGV4dEFkZGl0aW9uQ2xhc3MgPSAncmFuZ2VfX3BvaW50LXRleHQtLXJpZ2h0JztcclxuXHRcdFx0XHRcdG1hcmtlckFkZGl0aW9uYWxDbGFzcyA9ICdyYW5nZV9fcG9pbnQtbWFya2VyLS1yaWdodCc7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHBvaW50LnN0eWxlLmxlZnQgPSBvZmZzZXRMZWZ0ICsgJ3B4JztcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGNvbnN0IG9yaWVudGF0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblx0XHRcdFx0b3JpZW50YXRpb24uY2xhc3NOYW1lID0gJ3JhbmdlX19wb2ludC1vcmllbnRhdGlvbiAnICtcclxuXHRcdFx0XHRcdG9yaWVudGF0aW9uQWRkaXRpb25DbGFzcztcclxuXHJcblx0XHRcdFx0Y29uc3Qge2Rhc2hlczogZGFzaGVzQW1vdW50LCBtYXJrZXJIZWlnaHQsIGllMTFUb3B9ID0gZ2V0RGFzaGVzQW1vdW50KFxyXG5cdFx0XHRcdFx0cG9pbnQuZGF0YXNldC5wb2ludCwgcG9pbnRzRGF0YSk7XHJcblxyXG5cdFx0XHRcdGlmIChpc0lFMTEoKSkge1xyXG5cdFx0XHRcdFx0cG9pbnQuc3R5bGUudG9wID0gaWUxMVRvcCArICdweCdcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGNvbnN0IGRhc2hlcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0XHRcdGRhc2hlcy5jbGFzc05hbWUgPSAncmFuZ2VfX3BvaW50LWRhc2hlcyc7XHJcblx0XHRcdFx0ZGFzaGVzLnN0eWxlLmhlaWdodCA9IGRhc2hlc0Ftb3VudCAqIDIgKyAncHgnO1xyXG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgZGFzaGVzQW1vdW50OyBpKyspIHtcclxuXHRcdFx0XHRcdGNvbnN0IGRhc2ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcblx0XHRcdFx0XHRkYXNoLmNsYXNzTmFtZSA9ICdyYW5nZV9fcG9pbnQtZGFzaCc7XHJcblx0XHRcdFx0XHRkYXNoZXMuYXBwZW5kQ2hpbGQoZGFzaCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdG9yaWVudGF0aW9uLmFwcGVuZENoaWxkKGRhc2hlcyk7XHJcblxyXG5cdFx0XHRcdGNvbnN0IG1hcmtlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0XHRcdG1hcmtlci5jbGFzc05hbWUgPSAncmFuZ2VfX3BvaW50LW1hcmtlciAnICtcclxuXHRcdFx0XHRcdG1hcmtlckFkZGl0aW9uYWxDbGFzcztcclxuXHRcdFx0XHRtYXJrZXIuc3R5bGUuaGVpZ2h0ID0gbWFya2VySGVpZ2h0ICsgJ3B4JztcclxuXHRcdFx0XHRvcmllbnRhdGlvbi5hcHBlbmRDaGlsZChtYXJrZXIpO1xyXG5cclxuXHRcdFx0XHRjb25zdCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cdFx0XHRcdHRleHQuY2xhc3NOYW1lID0gJ3JhbmdlX19wb2ludC10ZXh0ICcgKyB0ZXh0QWRkaXRpb25DbGFzcztcclxuXHRcdFx0XHR0ZXh0LnRleHRDb250ZW50ID0gcG9pbnQuZGF0YXNldC50ZXh0O1xyXG5cdFx0XHRcdHBvaW50LmFwcGVuZENoaWxkKHRleHQpO1xyXG5cdFx0XHRcdHBvaW50LmFwcGVuZENoaWxkKG9yaWVudGF0aW9uKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9O1xyXG5cdFx0Y3JlYXRlUG9pbnRzKHBvaW50cyk7XHJcblxyXG5cdFx0Y29uc3Qgc2V0VmFsdWVzID0gKGRpcmVjdGlvbiwgdiwgc3RlcCkgPT4ge1xyXG5cdFx0XHRjb25zb2xlLmxvZyh2KTtcclxuXHRcdFx0Wy4uLnJhbmdlR3JhZGllbnRzRmlsbHNdLmZvckVhY2goZmlsbCA9PiB7XHJcblx0XHRcdFx0ZmlsbC5zdHlsZS53aWR0aCA9IHJhbmdlV2lkdGggLSB2ICsgJ3B4JztcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRpZiAoZGlyZWN0aW9uID09PSAndXAnKSB7XHJcblx0XHRcdFx0cmFuZ2VDb250cm9sLnN0eWxlLmxlZnQgPSB2ICsgJ3B4JztcclxuXHRcdFx0XHR2ICs9IHN0ZXA7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2Rvd24nKSB7XHJcblx0XHRcdFx0cmFuZ2VDb250cm9sLnN0eWxlLmxlZnQgPSB2ICsgJ3B4JztcclxuXHRcdFx0XHR2IC09IHN0ZXA7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0Y29uc3QgaXNDbG9zZXJUb1VwcGVyID0gKGN1cnIsIHVwcGVyVmFsdWUsIGxvd2VyVmFsdWUpID0+IHtcclxuXHRcdFx0bGV0IGxvd2VyQ291bnQsIGhpZ2hlckNvdW50O1xyXG5cdFx0XHRoaWdoZXJDb3VudCA9IGxvd2VyQ291bnQgPSAwO1xyXG5cdFx0XHRmb3IgKGxldCBpID0gY3VycjsgaSA8PSB1cHBlclZhbHVlOyBpKyssIGhpZ2hlckNvdW50KyspIHt9XHJcblx0XHRcdGZvciAobGV0IGkgPSBjdXJyOyBpID49IGxvd2VyVmFsdWU7IGktLSwgbG93ZXJDb3VudCsrKSB7fVxyXG5cdFx0XHRyZXR1cm4gaGlnaGVyQ291bnQgPiBsb3dlckNvdW50O1xyXG5cdFx0fTtcclxuXHJcblx0XHRjb25zdCBtb3ZlVG9OZWFyZXN0UG9pbnQgPSAoZSwgY3VyciwgcG9pbnRzKSA9PiB7XHJcblx0XHRcdC8vIHB1c2ggYWxsIG9mZnNldCB2YWx1ZXMgaW50byBhcnJheVxyXG5cdFx0XHRjb25zdCBkaWZmQXJyYXkgPSBbXTtcclxuXHRcdFx0cG9pbnRzLnJlZHVjZSgocHJldmlvdXMsIGN1cnJlbnQpID0+IHtcclxuXHRcdFx0XHRsZXQgY3VycmVudERpZmZlcmVuY2UgPSBjdXJyZW50IC0gY3VycjtcclxuXHRcdFx0XHRkaWZmQXJyYXkucHVzaCh7XHJcblx0XHRcdFx0XHR2YWx1ZTogY3VycmVudERpZmZlcmVuY2UsXHJcblx0XHRcdFx0XHRhYnNWYWx1ZTogTWF0aC5hYnMoY3VycmVudERpZmZlcmVuY2UpLFxyXG5cdFx0XHRcdFx0cG9pbnQ6IGN1cnJlbnQsXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmV0dXJuIGN1cnJlbnQ7XHJcblx0XHRcdH0sIHBvaW50c1sgMCBdKTtcclxuXHJcblx0XHRcdC8vIGZpbmQgbWluIG9mZnNldFxyXG5cdFx0XHRsZXQgbWluO1xyXG5cdFx0XHRbLi4uZGlmZkFycmF5XS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG5cdFx0XHRcdGlmIChtaW4gPT09IHVuZGVmaW5lZFxyXG5cdFx0XHRcdFx0fHwgaXRlbS5hYnNWYWx1ZSA8IG1pbi5hYnNWYWx1ZSkgbWluID0gaXRlbTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4gc2V0UmFuZ2VQb3NpdGlvbihudWxsLCBudWxsLCAxLCA0MDAsIG1pbi5wb2ludCksIDIwMCk7XHJcblx0XHR9O1xyXG5cclxuXHRcdGNvbnN0IGFzc2lnblZhbHVlc0FjY29yZGluZ1RvUGVyY2VudGFnZXMgPSAoYXJyLCB3aWR0aCkgPT4ge1xyXG5cdFx0XHRyZXR1cm4gWy4uLmFycl0ubWFwKGkgPT4gZ2V0RnJvbVBlcmNlbnRhZ2VzKGksIHdpZHRoKSk7XHJcblx0XHR9O1xyXG5cdFx0Y29uc3QgcmVtb3ZlVW51c2VkRWxlbWVudHMgPSAocG9pbnRzKSA9PiB7XHJcblx0XHRcdGZvciAoY29uc3QgZW50cnkgb2YgcG9pbnRzKSB7XHJcblx0XHRcdFx0aWYgKGVudHJ5WyAxIF0uaXNVc2VkID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRcdHBvaW50cy5kZWxldGUoZW50cnlbIDAgXSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBwb2ludHM7XHJcblx0XHR9O1xyXG5cclxuXHRcdGNvbnN0IG1vdXNlRG93bkhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XHJcblxyXG5cdFx0XHRjb25zdCBtb3VzZU1vdmVIYW5kbGVyID0gKGUpID0+IHtcclxuXHRcdFx0XHRzZXRSYW5nZVBvc2l0aW9uKGUsIHJhbmdlQ29udHJvbENvbnRhaW5lcik7XHJcblx0XHRcdH07XHJcblx0XHRcdGNvbnN0IG1vdXNlVXBIYW5kbGVyID0gKGUpID0+IHtcclxuXHRcdFx0XHRyYW5nZUNvbnRyb2xDb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJyxcclxuXHRcdFx0XHRcdG1vdXNlTW92ZUhhbmRsZXIpO1xyXG5cdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdFx0cmFuZ2VDb250cm9sQ29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLFxyXG5cdFx0XHRcdFx0XHRtb3VzZVVwSGFuZGxlcik7XHJcblx0XHRcdFx0XHRtb3ZlVG9OZWFyZXN0UG9pbnQoZSwgbW91c2VEb3duSGFuZGxlci5jdXJyZW50LFxyXG5cdFx0XHRcdFx0XHRhc3NpZ25WYWx1ZXNBY2NvcmRpbmdUb1BlcmNlbnRhZ2VzKFxyXG5cdFx0XHRcdFx0XHRcdHJlbW92ZVVudXNlZEVsZW1lbnRzKHBvaW50cykua2V5cygpLFxyXG5cdFx0XHRcdFx0XHRcdHJhbmdlV2lkdGgpKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGNvbnN0IG1vdXNlT3V0SGFuZGxlciA9IChlKSA9PiB7XHJcblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRpZiAoZS50YXJnZXQgPT09IHJhbmdlKSB7XHJcblx0XHRcdFx0XHRcdHJhbmdlQ29udHJvbENvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLFxyXG5cdFx0XHRcdFx0XHRcdG1vdXNlTW92ZUhhbmRsZXIpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Ly8gcmFuZ2VDb250cm9sQ29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBtb3VzZVVwSGFuZGxlcik7XHJcblxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0cmFuZ2UuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCBtb3VzZU91dEhhbmRsZXIpO1xyXG5cdFx0XHRyYW5nZUNvbnRyb2xDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJyxcclxuXHRcdFx0XHRtb3VzZU1vdmVIYW5kbGVyKTtcclxuXHRcdFx0cmFuZ2VDb250cm9sQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBtb3VzZVVwSGFuZGxlcik7XHJcblx0XHR9O1xyXG5cclxuXHRcdGNvbnN0IHRvdWNoRW5kSGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0bW92ZVRvTmVhcmVzdFBvaW50KGUsIHRvdWNoU3RhcnRIYW5kbGVyLmN1cnJlbnQsXHJcblx0XHRcdFx0YXNzaWduVmFsdWVzQWNjb3JkaW5nVG9QZXJjZW50YWdlcyhcclxuXHRcdFx0XHRcdHJlbW92ZVVudXNlZEVsZW1lbnRzKHBvaW50cykua2V5cygpLFxyXG5cdFx0XHRcdFx0cmFuZ2VXaWR0aCkpO1xyXG5cdFx0fTtcclxuXHJcblx0XHRjb25zdCB0b3VjaFN0YXJ0SGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0Y29uc3Qgb2Zmc2V0TGVmdCA9IChlLmNoYW5nZWRUb3VjaGVzWyAwIF0ucGFnZVggKyByYW5nZS5zY3JvbGxMZWZ0KTtcclxuXHRcdFx0c2V0UmFuZ2VQb3NpdGlvbihudWxsLCBudWxsLCAxLCA1MCwgb2Zmc2V0TGVmdCk7XHJcblxyXG5cdFx0fTtcclxuXHRcdHJhbmdlQ29udHJvbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBtb3VzZURvd25IYW5kbGVyKTtcclxuXHRcdHJhbmdlLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRvdWNoU3RhcnRIYW5kbGVyKTtcclxuXHRcdHJhbmdlLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0b3VjaFN0YXJ0SGFuZGxlcik7XHJcblx0XHRyYW5nZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRvdWNoRW5kSGFuZGxlcik7XHJcblxyXG5cdFx0Y29uc3Qgc2V0SW5pdGl0YWxQb3NpdGlvbiA9ICgpID0+IHtcclxuXHRcdFx0Y29uc3QgaW5pdGlhbFBvc2l0aW9uID0gZ2V0RnJvbVBlcmNlbnRhZ2VzKGluaXRpYWxWYWx1ZVBlcmNlbnRhZ2VzLFxyXG5cdFx0XHRcdHJhbmdlV2lkdGgpO1xyXG5cdFx0XHRyYW5nZUNvbnRyb2wuc3R5bGUuc2V0UHJvcGVydHkoJ2xlZnQnLCBpbml0aWFsUG9zaXRpb24gKyAncHgnKTtcclxuXHRcdFx0Wy4uLnJhbmdlR3JhZGllbnRzRmlsbHNdLmZvckVhY2goXHJcblx0XHRcdFx0KGl0ZW0pID0+IGl0ZW0uc3R5bGUuc2V0UHJvcGVydHkoJ3dpZHRoJyxcclxuXHRcdFx0XHRcdGluaXRpYWxQb3NpdGlvbiArICdweCcpKTtcclxuXHRcdH07XHJcblx0XHRzZXRJbml0aXRhbFBvc2l0aW9uKCk7XHJcblxyXG5cdH07XHJcblx0aGFuZGxlSlNMZXZlbFJhbmdlKCk7XHJcblxyXG5cdC8qXHJcblx0Ly8gbWVudVxyXG5cdC8vIGNvbnN0IGhhbmRsZU1lbnUgPSAoKSA9PiB7XHJcblx0Ly8gXHRjb25zdCBtZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtbWVudV0nKVxyXG5cdC8vIFx0Y29uc3QgbWVudUl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1lbnVfX2l0ZW0nKVxyXG5cdC8vIFx0Y29uc3QgbWVudUxpbmtzID0gbWVudS5xdWVyeVNlbGVjdG9yQWxsKCcubWVudV9fbGluaycpXHJcblx0Ly8gXHRsZXQgY29udGFpbmVycyA9IFtdXHJcblx0Ly8gXHRtZW51TGlua3MuZm9yRWFjaChsaW5rID0+IHtcclxuXHQvLyBcdFx0Y29uc3QgaHJlZiA9IGxpbmsuZ2V0QXR0cmlidXRlKCdocmVmJylcclxuXHQvLyBcdFx0Y29udGFpbmVycy5wdXNoKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGhyZWYpKVxyXG5cdC8vXHJcblx0Ly8gXHRcdGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG5cdC8vIFx0XHRcdGUucHJldmVudERlZmF1bHQoKVxyXG5cdC8vIFx0XHRcdGNvbnRhaW5lcnMuZm9yRWFjaChpdGVtID0+IGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJykpXHJcblx0Ly8gXHRcdFx0bWVudUl0ZW1zLmZvckVhY2goaXRlbSA9PiBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpKVxyXG5cdC8vIFx0XHRcdGxpbmsuY2xvc2VzdCgnLm1lbnVfX2l0ZW0nKS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxyXG5cdC8vIFx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGhyZWYpLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXHJcblx0Ly8gXHRcdH0pXHJcblx0Ly9cclxuXHQvLyBcdH0pXHJcblx0Ly8gfVxyXG5cdC8vIGhhbmRsZU1lbnUoKVxyXG5cdCovXHJcblxyXG5cdC8vbW9iaWxlIG1lbnVcclxuXHRjb25zdCBoYW5kbGVNZW51TW9iaWxlID0gKCkgPT4ge1xyXG5cdFx0Y29uc3QgaGFtYnVyZ2VyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1lbnUtaGFtYnVyZ2VyJyk7XHJcblx0XHRjb25zdCBoX3RvcCA9IGhhbWJ1cmdlci5maXJzdEVsZW1lbnRDaGlsZDtcclxuXHRcdGNvbnN0IGhfYm90dG9tID0gaF90b3AubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG5cclxuXHRcdGNvbnN0IG1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudV9fbGlzdCcpO1xyXG5cdFx0Y29uc3QgbWVudUl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1lbnVfX2l0ZW0nKTtcclxuXHRcdGNvbnN0IG1lbnVMaW5rcyA9IG1lbnUucXVlcnlTZWxlY3RvckFsbCgnLm1lbnVfX2xpbmsnKTtcclxuXHJcblx0XHRjb25zdCBoYW1idXJnZXJUdXJuTGlzdCA9ICgpID0+IHtcclxuXHRcdFx0aGFtYnVyZ2VyLmNsYXNzTGlzdC5yZW1vdmUoJ3gnKTtcclxuXHRcdFx0aF90b3AuY2xhc3NMaXN0LmFkZCgnY29sbGFwc2UnKTtcclxuXHRcdFx0aF9ib3R0b20uY2xhc3NMaXN0LmFkZCgnY29sbGFwc2UnKTtcclxuXHRcdFx0aF90b3AuY2xhc3NMaXN0LnJlbW92ZSgncm90YXRlJyk7XHJcblx0XHRcdGhfYm90dG9tLmNsYXNzTGlzdC5yZW1vdmUoJ3JvdGF0ZScpO1xyXG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRoX3RvcC5jbGFzc0xpc3QucmVtb3ZlKCdjb2xsYXBzZScpO1xyXG5cdFx0XHRcdGhfYm90dG9tLmNsYXNzTGlzdC5yZW1vdmUoJ2NvbGxhcHNlJyk7XHJcblx0XHRcdH0sIDIwMCk7XHJcblx0XHR9O1xyXG5cclxuXHRcdGNvbnN0IGhhbWJ1cmdlclR1cm5YID0gKCkgPT4ge1xyXG5cdFx0XHRoYW1idXJnZXIuY2xhc3NMaXN0LmFkZCgneCcpO1xyXG5cdFx0XHRoX3RvcC5jbGFzc0xpc3QuYWRkKCdjb2xsYXBzZScpO1xyXG5cdFx0XHRoX2JvdHRvbS5jbGFzc0xpc3QuYWRkKCdjb2xsYXBzZScpO1xyXG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRoX3RvcC5jbGFzc0xpc3QuYWRkKCdyb3RhdGUnKTtcclxuXHRcdFx0XHRoX2JvdHRvbS5jbGFzc0xpc3QuYWRkKCdyb3RhdGUnKTtcclxuXHRcdFx0XHRoX3RvcC5jbGFzc0xpc3QucmVtb3ZlKCdjb2xsYXBzZScpO1xyXG5cdFx0XHRcdGhfYm90dG9tLmNsYXNzTGlzdC5yZW1vdmUoJ2NvbGxhcHNlJyk7XHJcblx0XHRcdH0sIDIwMCk7XHJcblxyXG5cdFx0fTtcclxuXHJcblx0XHRjb25zdCBzaG93TWVudSA9ICgpID0+IHtcclxuXHRcdFx0aGFtYnVyZ2VyVHVyblgoKTtcclxuXHRcdFx0c2V0VGltZW91dCgoKSA9PiBtZW51LmNsYXNzTGlzdC5hZGQoJ21lbnVfX2xpc3QtLXZpc2libGUnKSwgMjAwKTtcclxuXHRcdH07XHJcblxyXG5cdFx0Y29uc3QgaGlkZU1lbnUgPSAoKSA9PiB7XHJcblx0XHRcdGhhbWJ1cmdlclR1cm5MaXN0KCk7XHJcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4gbWVudS5jbGFzc0xpc3QucmVtb3ZlKCdtZW51X19saXN0LS12aXNpYmxlJyksIDIwMCk7XHJcblx0XHR9O1xyXG5cdFx0aGFtYnVyZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcblx0XHRcdGlmICghbWVudS5jbGFzc0xpc3QuY29udGFpbnMoJ21lbnVfX2xpc3QtLXZpc2libGUnKSkge1xyXG5cdFx0XHRcdHJldHVybiBzaG93TWVudSgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBoaWRlTWVudSgpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Wy4uLm1lbnVMaW5rc10uZm9yRWFjaChsaW5rID0+IHtcclxuXHRcdFx0bGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuXHRcdFx0XHRoaWRlTWVudSgpO1xyXG5cdFx0XHRcdFsuLi5tZW51SXRlbXNdLmZvckVhY2goaXRlbSA9PiBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpKTtcclxuXHRcdFx0XHRsaW5rLnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcblxyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdH07XHJcblx0aGFuZGxlTWVudU1vYmlsZSgpO1xyXG59KTsiXX0=
